// ==UserScript==
// @name            Revival v3
// @version         v7.1
// @author          GOD OF W/\R
// @match           *://*.moomoo.io/*
// @icon            https://media.discordapp.net/attachments/1047280688350625793/1174840039331602592/Untitled_video_-_Made_with_Clipchamp.gif?ex=65690e0c&is=6556990c&hm=eac6967d8dd486b2ba520f388e5a6cd2443ee5d5b5ca5b66877d395acce8bf71&
// @grant           none
// @description     share and ill dox u
// ==/UserScript==

let a = -1;
let b = -1;
let c = -1;
let d = -1;
let e = "#ffffff";
let f = "#8ecc51";
let g = "#f9cb9c";
let h = "#8ecc51";
let i = "#926DB6";
let j = "#F05C5B";
let k = "#8ecc51";
let l = "#8ecc51";
let m = "#98B86E";
let n = "#F05C5B";
let o = "#ffffff";
let p = true;
let q = console.log;
let r = window.location.hostname == "127.0.0.1";
let s = false;

function t(a) {
    return document.getElementById(a);
}
var u = function(a) {
    var b = {};

    function c(d) {
        if (b[d]) {
            return b[d].exports;
        }
        var e = b[d] = {
            i: d,
            l: false,
            exports: {}
        };
        a[d].call(e.exports, e, e.exports, c);
        e.l = true;
        return e.exports;
    }
    c.m = a;
    c.c = b;
    c.d = function(a, b, d) {
        if (!c.o(a, b)) {
            Object.defineProperty(a, b, {
                enumerable: true,
                get: d
            });
        }
    };
    c.r = function(a) {
        if (typeof Symbol != "undefined" && Symbol.toStringTag) {
            Object.defineProperty(a, Symbol.toStringTag, {
                value: "Module"
            });
        }
        Object.defineProperty(a, "__esModule", {
            value: true
        });
    };
    c.t = function(a, b) {
        if (b & 1) {
            a = c(a);
        }
        if (b & 8) {
            return a;
        }
        if (b & 4 && typeof a == "object" && a && a.__esModule) {
            return a;
        }
        var d = Object.create(null);
        c.r(d);
        Object.defineProperty(d, "default", {
            enumerable: true,
            value: a
        });
        if (b & 2 && typeof a != "string") {
            for (var e in a) {
                c.d(d, e, function(b) {
                    return a[b];
                }.bind(null, e));
            }
        }
        return d;
    };
    c.n = function(a) {
        var b = a && a.__esModule ? function() {
            return a.default;
        } : function() {
            return a;
        };
        c.d(b, "a", b);
        return b;
    };
    c.o = function(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    };
    c.p = "/bin/";
    return c(c.s = 0);
}([function(a, b, c) {
    var d = {};
    var e = c(1);
    var f = c(2);
    var g = c(3);
    a.exports = d;
    var h = 1;
    d.js = function() {
        var a;
        var b;
        var c;
        var i = 1.4;
        var j = false;
        var k = {};
        var l = {};
        var m = {};
        var n = {};
        var o = true;
        var p = {};
        var q = [];
        var r = Number.MAX_VALUE;
        var s = false;
        this.setAcceptableTiles = function(a) {
            if (a instanceof Array) {
                c = a;
            } else if (!isNaN(parseFloat(a)) && isFinite(a)) {
                c = [a];
            }
        };
        this.enableSync = function() {
            j = true;
        };
        this.disableSync = function() {
            j = false;
        };
        this.enableDiagonals = function() {
            s = true;
        };
        this.disableDiagonals = function() {
            s = false;
        };
        this.setGrid = function(b) {
            a = b;
            for (var c = 0; c < a.length; c++) {
                for (var d = 0; d < a[0].length; d++) {
                    l[a[c][d]] ||= 1;
                }
            }
        };
        this.setTileCost = function(a, b) {
            l[a] = b;
        };
        this.setAdditionalPointCost = function(a, b, c) {
            if (m[b] === undefined) {
                m[b] = {};
            }
            m[b][a] = c;
        };
        this.removeAdditionalPointCost = function(a, b) {
            if (m[b] !== undefined) {
                delete m[b][a];
            }
        };
        this.removeAllAdditionalPointCosts = function() {
            m = {};
        };
        this.setDirectionalCondition = function(a, b, c) {
            if (n[b] === undefined) {
                n[b] = {};
            }
            n[b][a] = c;
        };
        this.removeAllDirectionalConditions = function() {
            n = {};
        };
        this.setIterationsPerCalculation = function(a) {
            r = a;
        };
        this.avoidAdditionalPoint = function(a, b) {
            if (k[b] === undefined) {
                k[b] = {};
            }
            k[b][a] = 1;
        };
        this.stopAvoidingAdditionalPoint = function(a, b) {
            if (k[b] !== undefined) {
                delete k[b][a];
            }
        };
        this.enableCornerCutting = function() {
            o = true;
        };
        this.disableCornerCutting = function() {
            o = false;
        };
        this.stopAvoidingAllAdditionalPoints = function() {
            k = {};
        };
        this.findPath = function(b, d, f, i, k) {
            function l(a) {
                if (j) {
                    k(a);
                } else {
                    setTimeout(function() {
                        k(a);
                    });
                }
            }
            if (c === undefined) {
                throw new Error("You can't set a path without first calling setAcceptableTiles() on EasyStar.");
            }
            if (a === undefined) {
                throw new Error("You can't set a path without first calling setGrid() on EasyStar.");
            }
            if (b < 0 || d < 0 || f < 0 || i < 0 || b > a[0].length - 1 || d > a.length - 1 || f > a[0].length - 1 || i > a.length - 1) {
                throw new Error("Your start or end point is outside the scope of your grid.");
            }
            if (b !== f || d !== i) {
                var m = a[i][f];
                var n = false;
                for (var o = 0; o < c.length; o++) {
                    if (m === c[o]) {
                        n = true;
                        break;
                    }
                }
                if (n !== false) {
                    var r = new e();
                    r.openList = new g(function(a, b) {
                        return a.bestGuessDistance() - b.bestGuessDistance();
                    });
                    r.isDoneCalculating = false;
                    r.nodeHash = {};
                    r.startX = b;
                    r.startY = d;
                    r.endX = f;
                    r.endY = i;
                    r.callback = l;
                    r.openList.push(x(r, r.startX, r.startY, null, 1));
                    i = h++;
                    p[i] = r;
                    q.push(i);
                    return i;
                }
                l(null);
            } else {
                l([]);
            }
        };
        this.cancelPath = function(a) {
            return a in p && (delete p[a], true);
        };
        this.calculate = function() {
            if (q.length !== 0 && a !== undefined && c !== undefined) {
                for (b = 0; b < r; b++) {
                    if (q.length === 0) {
                        return;
                    }
                    if (j) {
                        b = 0;
                    }
                    var d = q[0];
                    var e = p[d];
                    if (e !== undefined) {
                        if (e.openList.size() !== 0) {
                            var f = e.openList.pop();
                            if (e.endX !== f.x || e.endY !== f.y) {
                                if ((f.list = 0) < f.y) {
                                    t(e, f, 0, -1, +w(f.x, f.y - 1));
                                }
                                if (f.x < a[0].length - 1) {
                                    t(e, f, 1, 0, +w(f.x + 1, f.y));
                                }
                                if (f.y < a.length - 1) {
                                    t(e, f, 0, 1, +w(f.x, f.y + 1));
                                }
                                if (f.x > 0) {
                                    t(e, f, -1, 0, +w(f.x - 1, f.y));
                                }
                                if (s) {
                                    if (f.x > 0 && f.y > 0 && (o || u(a, c, f.x, f.y - 1, f) && u(a, c, f.x - 1, f.y, f))) {
                                        t(e, f, -1, -1, i * w(f.x - 1, f.y - 1));
                                    }
                                    if (f.x < a[0].length - 1 && f.y < a.length - 1 && (o || u(a, c, f.x, f.y + 1, f) && u(a, c, f.x + 1, f.y, f))) {
                                        t(e, f, 1, 1, i * w(f.x + 1, f.y + 1));
                                    }
                                    if (f.x < a[0].length - 1 && f.y > 0 && (o || u(a, c, f.x, f.y - 1, f) && u(a, c, f.x + 1, f.y, f))) {
                                        t(e, f, 1, -1, i * w(f.x + 1, f.y - 1));
                                    }
                                    if (f.x > 0 && f.y < a.length - 1 && (o || u(a, c, f.x, f.y + 1, f) && u(a, c, f.x - 1, f.y, f))) {
                                        t(e, f, -1, 1, i * w(f.x - 1, f.y + 1));
                                    }
                                }
                            } else {
                                var g = [];
                                g.push({
                                    x: f.x,
                                    y: f.y
                                });
                                for (var h = f.parent; h != null;) {
                                    g.push({
                                        x: h.x,
                                        y: h.y
                                    });
                                    h = h.parent;
                                }
                                g.reverse();
                                e.callback(g);
                                delete p[d];
                                q.shift();
                            }
                        } else {
                            e.callback(null);
                            delete p[d];
                            q.shift();
                        }
                    } else {
                        q.shift();
                    }
                }
            }
        };

        function t(b, d, e, f, g) {
            e = d.x + e;
            f = d.y + f;
            if ((k[f] === undefined || k[f][e] === undefined) && !!u(a, c, e, f, d)) {
                if ((f = x(b, e, f, d, g)).list === undefined) {
                    f.list = 1;
                    b.openList.push(f);
                } else if (d.costSoFar + g < f.costSoFar) {
                    f.costSoFar = d.costSoFar + g;
                    f.parent = d;
                    b.openList.updateItem(f);
                }
            }
        }

        function u(a, b, c, d, e) {
            var f = n[d] && n[d][c];
            if (f) {
                var g = v(e.x - c, e.y - d);
                if (! function() {
                        for (var a = 0; a < f.length; a++) {
                            if (f[a] === g) {
                                return true;
                            }
                        }
                        return false;
                    }()) {
                    return false;
                }
            }
            for (var h = 0; h < b.length; h++) {
                if (a[d][c] === b[h]) {
                    return true;
                }
            }
            return false;
        }

        function v(a, b) {
            if (a === 0 && b === -1) {
                return d.TOP;
            }
            if (a === 1 && b === -1) {
                return d.TOP_RIGHT;
            }
            if (a === 1 && b === 0) {
                return d.RIGHT;
            }
            if (a === 1 && b === 1) {
                return d.BOTTOM_RIGHT;
            }
            if (a === 0 && b === 1) {
                return d.BOTTOM;
            }
            if (a === -1 && b === 1) {
                return d.BOTTOM_LEFT;
            }
            if (a === -1 && b === 0) {
                return d.LEFT;
            }
            if (a === -1 && b === -1) {
                return d.TOP_LEFT;
            }
            throw new Error("These differences are not valid: " + a + ", " + b);
        }

        function w(b, c) {
            return m[c] && m[c][b] || l[a[c][b]];
        }

        function x(a, b, c, d, e) {
            if (a.nodeHash[c] !== undefined) {
                if (a.nodeHash[c][b] !== undefined) {
                    return a.nodeHash[c][b];
                }
            } else {
                a.nodeHash[c] = {};
            }
            var g = y(b, c, a.endX, a.endY);
            var e = d !== null ? d.costSoFar + e : 0;
            var g = new f(d, b, c, e, g);
            return a.nodeHash[c][b] = g;
        }

        function y(a, b, c, d) {
            var e;
            var f;
            if (s) {
                if ((e = Math.abs(a - c)) < (f = Math.abs(b - d))) {
                    return i * e + f;
                } else {
                    return i * f + e;
                }
            } else {
                return (e = Math.abs(a - c)) + (f = Math.abs(b - d));
            }
        }
    };
    d.TOP = "TOP";
    d.TOP_RIGHT = "TOP_RIGHT";
    d.RIGHT = "RIGHT";
    d.BOTTOM_RIGHT = "BOTTOM_RIGHT";
    d.BOTTOM = "BOTTOM";
    d.BOTTOM_LEFT = "BOTTOM_LEFT";
    d.LEFT = "LEFT";
    d.TOP_LEFT = "TOP_LEFT";
}, function(a, b) {
    a.exports = function() {
        this.pointsToAvoid = {};
        this.startX;
        this.callback;
        this.startY;
        this.endX;
        this.endY;
        this.nodeHash = {};
        this.openList;
    };
}, function(a, b) {
    a.exports = function(a, b, c, d, e) {
        this.parent = a;
        this.x = b;
        this.y = c;
        this.costSoFar = d;
        this.simpleDistanceToTarget = e;
        this.bestGuessDistance = function() {
            return this.costSoFar + this.simpleDistanceToTarget;
        };
    };
}, function(a, b, c) {
    a.exports = c(4);
}, function(a, b, c) {
    var d;
    var e;
    (function() {
        var c;
        var f;
        var g;
        var h;
        var i;
        var j;
        var k;
        var l;
        var m;
        var n;
        var o;
        var p;
        var q;
        var r;
        var s;

        function t(a) {
            this.cmp = a ?? f;
            this.nodes = [];
        }
        g = Math.floor;
        n = Math.min;
        f = function(a, b) {
            if (a < b) {
                return -1;
            } else if (b < a) {
                return 1;
            } else {
                return 0;
            }
        };
        m = function(a, b, c, d, e) {
            var h;
            if (c == null) {
                c = 0;
            }
            if (e == null) {
                e = f;
            }
            if (c < 0) {
                throw new Error("lo must be non-negative");
            }
            for (d == null && (d = a.length); c < d;) {
                if (e(b, a[h = g((c + d) / 2)]) < 0) {
                    d = h;
                } else {
                    c = h + 1;
                }
            }
            [].splice.apply(a, [c, c - c].concat(b));
            return b;
        };
        j = function(a, b, c) {
            if (c == null) {
                c = f;
            }
            a.push(b);
            return r(a, 0, a.length - 1, c);
        };
        i = function(a, b) {
            var c;
            var d;
            if (b == null) {
                b = f;
            }
            c = a.pop();
            if (a.length) {
                d = a[0];
                a[0] = c;
                s(a, 0, b);
            } else {
                d = c;
            }
            return d;
        };
        l = function(a, b, c) {
            var d;
            if (c == null) {
                c = f;
            }
            d = a[0];
            a[0] = b;
            s(a, 0, c);
            return d;
        };
        k = function(a, b, c) {
            var d;
            if (c == null) {
                c = f;
            }
            if (a.length && c(a[0], b) < 0) {
                b = (d = [a[0], b])[0];
                a[0] = d[1];
                s(a, 0, c);
            }
            return b;
        };
        h = function(a, b) {
            var c;
            var d;
            var e;
            var h;
            var i;
            var j;
            if (b == null) {
                b = f;
            }
            i = [];
            d = 0;
            e = (h = function() {
                j = [];
                for (var b = 0, c = g(a.length / 2); c >= 0 ? b < c : c < b; c >= 0 ? b++ : b--) {
                    j.push(b);
                }
                return j;
            }.apply(this).reverse()).length;
            for (; d < e; d++) {
                c = h[d];
                i.push(s(a, c, b));
            }
            return i;
        };
        q = function(a, b, c) {
            if (c == null) {
                c = f;
            }
            if ((b = a.indexOf(b)) !== -1) {
                r(a, 0, b, c);
                return s(a, b, c);
            }
        };
        o = function(a, b, c) {
            var d;
            var e;
            var g;
            var i;
            var j;
            if (c == null) {
                c = f;
            }
            if (!(e = a.slice(0, b)).length) {
                return e;
            }
            h(e, c);
            g = 0;
            i = (j = a.slice(b)).length;
            for (; g < i; g++) {
                d = j[g];
                k(e, d, c);
            }
            return e.sort(c).reverse();
        };
        p = function(a, b, c) {
            var d;
            var e;
            var g;
            var j;
            var k;
            var l;
            var o;
            var p;
            var q;
            if (c == null) {
                c = f;
            }
            if (b * 10 <= a.length) {
                if (!(g = a.slice(0, b).sort(c)).length) {
                    return g;
                }
                e = g[g.length - 1];
                j = 0;
                l = (o = a.slice(b)).length;
                for (; j < l; j++) {
                    if (c(d = o[j], e) < 0) {
                        m(g, d, 0, null, c);
                        g.pop();
                        e = g[g.length - 1];
                    }
                }
                return g;
            }
            h(a, c);
            q = [];
            k = 0;
            p = n(b, a.length);
            for (; p >= 0 ? k < p : p < k; p >= 0 ? ++k : --k) {
                q.push(i(a, c));
            }
            return q;
        };
        r = function(a, b, c, d) {
            var e;
            var g;
            var h;
            if (d == null) {
                d = f;
            }
            e = a[c];
            while (b < c && d(e, g = a[h = c - 1 >> 1]) < 0) {
                a[c] = g;
                c = h;
            }
            return a[c] = e;
        };
        s = function(a, b, c) {
            var d;
            var e;
            var g;
            var h;
            var i;
            if (c == null) {
                c = f;
            }
            e = a.length;
            g = a[i = b];
            d = b * 2 + 1;
            while (d < e) {
                if ((h = d + 1) < e && c(a[d], a[h]) >= 0) {
                    d = h;
                }
                a[b] = a[d];
                d = (b = d) * 2 + 1;
            }
            a[b] = g;
            return r(a, i, b, c);
        };
        t.push = j;
        t.pop = i;
        t.replace = l;
        t.pushpop = k;
        t.heapify = h;
        t.updateItem = q;
        t.nlargest = o;
        t.nsmallest = p;
        t.prototype.push = function(a) {
            return j(this.nodes, a, this.cmp);
        };
        t.prototype.pop = function() {
            return i(this.nodes, this.cmp);
        };
        t.prototype.peek = function() {
            return this.nodes[0];
        };
        t.prototype.contains = function(a) {
            return this.nodes.indexOf(a) !== -1;
        };
        t.prototype.replace = function(a) {
            return l(this.nodes, a, this.cmp);
        };
        t.prototype.pushpop = function(a) {
            return k(this.nodes, a, this.cmp);
        };
        t.prototype.heapify = function() {
            return h(this.nodes, this.cmp);
        };
        t.prototype.updateItem = function(a) {
            return q(this.nodes, a, this.cmp);
        };
        t.prototype.clear = function() {
            return this.nodes = [];
        };
        t.prototype.empty = function() {
            return this.nodes.length === 0;
        };
        t.prototype.size = function() {
            return this.nodes.length;
        };
        t.prototype.clone = function() {
            var a = new t();
            a.nodes = this.nodes.slice(0);
            return a;
        };
        t.prototype.toArray = function() {
            return this.nodes.slice(0);
        };
        t.prototype.insert = t.prototype.push;
        t.prototype.top = t.prototype.peek;
        t.prototype.front = t.prototype.peek;
        t.prototype.has = t.prototype.contains;
        t.prototype.copy = t.prototype.clone;
        c = t;
        d = [];
        if ((e = typeof(e = function() {
                return c;
            }) == "function" ? e.apply(b, d) : e) !== undefined) {
            a.exports = e;
        }
    }).call(this);
}]);
let v = new u.js();
(function(a) {
    if (!a) {
        return;
    }
    let c = {
        setup: () => {
            'use strict';

            let a = document.createElement("link");
            a.rel = "stylesheet";
            a.href = "https://fonts.googleapis.com/css?family=Ubuntu:700";
            a.type = "text/css";
            document.body.append(a);
            let b = document.createElement("script");
            b.src = "https://rawgit.com/kawanet/msgpack-lite/master/dist/msgpack.min.js";
            document.body.append(b);
        },
        main: () => {
            if (!p) {
                return;
            }
            "use strict";
            window.oncontextmenu = function() {
                return false;
            };
            let a = window.config;
            a.clientSendRate = 0;
            a.serverUpdateRate = 9;
            a.deathFadeout = 0;
            a.isSandbox = window.location.hostname == "sandbox.moomoo.io";
            a.skinColors = ["#bf8f54", "#cbb091", "#896c4b", "#fadadc", "#ececec", "#c37373", "#4c4c4c", "#ecaff7", "#738cc3", "#8bc373", "#91b2db"];
            a.weaponVariants = [{
                id: 0,
                src: "",
                xp: 0,
                val: 1
            }, {
                id: 1,
                src: "_g",
                xp: 3000,
                val: 1.1
            }, {
                id: 2,
                src: "_d",
                xp: 7000,
                val: 1.18
            }, {
                id: 3,
                src: "_r",
                poison: true,
                xp: 12000,
                val: 1.18
            }, {
                id: 4,
                src: "_e",
                poison: true,
                heal: true,
                xp: 24000,
                val: 1.18
            }];
            a.anotherVisual = true;
            a.useWebGl = false;
            a.resetRender = false;

            function c(a) {
                return new Promise(b => {
                    setTimeout(() => {
                        b();
                    }, a);
                });
            }
            let d = false;
            let e = [];
            let f;
            if (typeof Storage !== "undefined") {
                f = true;
            }

            function g(a, b) {
                if (f) {
                    localStorage.setItem(a, b);
                }
            }

            function h(a) {
                if (f) {
                    localStorage.removeItem(a);
                }
            }

            function i(a) {
                if (f) {
                    return localStorage.getItem(a);
                }
                return null;
            }
            let j = function(a, b) {
                try {
                    let c = JSON.parse(i(a));
                    if (typeof c === "object") {
                        return b;
                    } else {
                        return c;
                    }
                } catch (a) {
                    alert("dieskid");
                    return b;
                }
            };

            function m() {
                return {
                    killChat: false,
                    autoBuy: false,
                    autoBuyEquip: true,
                    autoPush: false,
                    revTick: false,
                    spikeTick: true,
                    predictTick: true,
                    autoPlace: true,
                    autoReplace: true,
                    antiTrap: true,
                    slowOT: false,
                    attackDir: false,
                    noDir: true,
                    showDir: false,
                    autoRespawn: false
                };
            }
            let n = m();
            window.removeConfigs = function() {
                for (let a in n) {
                    h(a, n[a]);
                }
            };
            for (let a in n) {
                n[a] = j(a, n[a]);
            }
            window.changeMenu = function() {};
            window.debug = function() {};
            window.toggleNight = function() {};
            window.wasdMode = function() {};
            window.startGrind = function() {};
            window.connectFillBots = function() {};
            window.destroyFillBots = function() {};
            window.tryConnectBots = function() {};
            window.destroyBots = function() {};
            window.resBuild = function() {};
            window.toggleBotsCircle = function() {};
            window.toggleVisual = function() {};
            window.prepareUI = function() {};
            window.leave = function() {};
            window.ping = 0;
            class o {
                constructor(a, b) {
                    this.inGame = false;
                    this.lover = a + b;
                    this.baby = "ae86";
                    this.isBlack = 0;
                    this.webSocket = undefined;
                    this.checkBaby = function() {
                        if (this.baby !== "ae86") {
                            this.isBlack++;
                        } else {
                            this.isBlack--;
                        }
                        if (this.isBlack >= 1) {
                            return "bl4cky";
                        }
                        return "noting for you";
                    };
                    this.x2 = 0;
                    this.y2 = 0;
                    this.chat = "Imagine playing this badass game XDDDDD";
                    this.summon = function(a) {
                        this.x2 = a.x;
                        this.y2 = a.y;
                        this.chat = a.name + " ur so bad XDDDD";
                    };
                    this.commands = function(a) {
                        if (a == "rv3link") {
                            window.open("https://florr.io/");
                        }
                        if (a == "woah") {
                            window.open("https://www.youtube.com/watch?v=MO0AGukzj6M");
                        }
                        return a;
                    };
                    this.dayte = "11yearold";
                    this.memeganoob = "69yearold";
                    this.startDayteSpawn = function(a) {
                        let b = setInterval(() => {
                            this.x2 = a.x + 20;
                            this.y2 = a.y - 20;
                            this.chat = "UR SO BAD LOL";
                            if (a.name == "ae86") {
                                this.chat = "omg ae86 go run";
                                setTimeout(() => {
                                    this.inGame = false;
                                    clearInterval(b);
                                }, 1000);
                            }
                        }, 1234);
                    };
                    this.AntiChickenModV69420 = function(a) {
                        return "!c!dc user " + a.name;
                    };
                }
            };
            class q {
                constructor(a) {
                    this.element = a;
                }
                add(a) {
                    if (!this.element) {
                        return undefined;
                    }
                    this.element.innerHTML += a;
                }
                newLine(a) {
                    let b = "<br>";
                    if (a > 0) {
                        b = "";
                        for (let c = 0; c < a; c++) {
                            b += "<br>";
                        }
                    }
                    this.add(b);
                }
                checkBox(a) {
                    let b = "<input type = \"checkbox\"";
                    if (a.id) {
                        b += " id = " + a.id;
                    }
                    if (a.style) {
                        b += " style = " + a.style.replaceAll(" ", "");
                    }
                    if (a.class) {
                        b += " class = " + a.class;
                    }
                    if (a.checked) {
                        b += " checked";
                    }
                    if (a.onclick) {
                        b += " onclick = " + a.onclick;
                    }
                    b += ">";
                    this.add(b);
                }
                text(a) {
                    let b = "<input type = \"text\"";
                    if (a.id) {
                        b += " id = " + a.id;
                    }
                    if (a.style) {
                        b += " style = " + a.style.replaceAll(" ", "");
                    }
                    if (a.class) {
                        b += " class = " + a.class;
                    }
                    if (a.size) {
                        b += " size = " + a.size;
                    }
                    if (a.maxLength) {
                        b += " maxLength = " + a.maxLength;
                    }
                    if (a.value) {
                        b += " value = " + a.value;
                    }
                    if (a.placeHolder) {
                        b += " placeHolder = " + a.placeHolder.replaceAll(" ", "&nbsp;");
                    }
                    b += ">";
                    this.add(b);
                }
                select(a) {
                    let b = "<select";
                    if (a.id) {
                        b += " id = " + a.id;
                    }
                    if (a.style) {
                        b += " style = " + a.style.replaceAll(" ", "");
                    }
                    if (a.class) {
                        b += " class = " + a.class;
                    }
                    b += ">";
                    for (let c in a.option) {
                        b += "<option value = " + a.option[c].id;
                        if (a.option[c].selected) {
                            b += " selected";
                        }
                        b += ">" + c + "</option>";
                    }
                    b += "</select>";
                    this.add(b);
                }
                button(a) {
                    let b = "<button";
                    if (a.id) {
                        b += " id = " + a.id;
                    }
                    if (a.style) {
                        b += " style = " + a.style.replaceAll(" ", "");
                    }
                    if (a.class) {
                        b += " class = " + a.class;
                    }
                    if (a.onclick) {
                        b += " onclick = " + a.onclick;
                    }
                    b += ">";
                    if (a.innerHTML) {
                        b += a.innerHTML;
                    }
                    b += "</button>";
                    this.add(b);
                }
                selectMenu(a) {
                    let b = "<select";
                    if (!a.id) {
                        alert("please put id skid");
                        return;
                    }
                    window[a.id + "Func"] = function() {};
                    if (a.id) {
                        b += " id = " + a.id;
                    }
                    if (a.style) {
                        b += " style = " + a.style.replaceAll(" ", "");
                    }
                    if (a.class) {
                        b += " class = " + a.class;
                    }
                    b += " onchange = window." + (a.id + "Func") + "()";
                    b += ">";
                    let c;
                    let d = 0;
                    for (let c in a.menu) {
                        b += "<option value = " + ("option_" + c) + " id = " + ("O_" + c);
                        if (a.menu[c]) {
                            b += " checked";
                        }
                        b += " style = \"color: " + (a.menu[c] ? "#000" : "#fff") + "; background: " + (a.menu[c] ? "#8ecc51" : "#cc5151") + ";\">" + c + "</option>";
                        d++;
                    }
                    b += "</select>";
                    this.add(b);
                    d = 0;
                    for (let b in a.menu) {
                        window[b + "Func"] = function() {
                            a.menu[b] = t("check_" + b).checked ? true : false;
                            g(b, a.menu[b]);
                            t("O_" + b).style.color = a.menu[b] ? "#000" : "#fff";
                            t("O_" + b).style.background = a.menu[b] ? "#8ecc51" : "#cc5151";
                        };
                        this.checkBox({
                            id: "check_" + b,
                            style: "display: " + (d == 0 ? "inline-block" : "none") + ";",
                            class: "checkB",
                            onclick: "window." + (b + "Func") + "()",
                            checked: a.menu[b]
                        });
                        d++;
                    }
                    c = "check_" + t(a.id).value.split("_")[1];
                    window[a.id + "Func"] = function() {
                        t(c).style.display = "none";
                        c = "check_" + t(a.id).value.split("_")[1];
                        t(c).style.display = "inline-block";
                    };
                }
            };
            class u {
                constructor() {
                    this.element = null;
                    this.action = null;
                    this.divElement = null;
                    this.startDiv = function(a, b) {
                        let c = document.createElement("div");
                        if (a.id) {
                            c.id = a.id;
                        }
                        if (a.style) {
                            c.style = a.style;
                        }
                        if (a.class) {
                            c.className = a.class;
                        }
                        this.element.appendChild(c);
                        this.divElement = c;
                        let d = new q(c);
                        if (typeof b == "function") {
                            b(d);
                        }
                    };
                    this.addDiv = function(a, b) {
                        let c = document.createElement("div");
                        if (a.id) {
                            c.id = a.id;
                        }
                        if (a.style) {
                            c.style = a.style;
                        }
                        if (a.class) {
                            c.className = a.class;
                        }
                        if (a.appendID) {
                            t(a.appendID).appendChild(c);
                        }
                        this.divElement = c;
                        let d = new q(c);
                        if (typeof b == "function") {
                            b(d);
                        }
                    };
                }
                set(a) {
                    this.element = t(a);
                    this.action = new q(this.element);
                }
                resetHTML(a) {
                    if (a) {
                        this.element.innerHTML = "";
                    } else {
                        this.element.innerHTML = "";
                    }
                }
                setStyle(a) {
                    this.element.style = a;
                }
                setCSS(a) {
                    this.action.add("<style>" + a + "</style>");
                }
            };
            let w = new u();
            let x = document.createElement("div");
            x.id = "menuDiv";
            document.body.appendChild(x);
            w.set("menuDiv");
            w.setStyle("\n            position: absolute;\n            left: 20px;\n            top: 20px;\n            ");
            w.resetHTML();
            w.setCSS("\n            .menuClass{\n                color: #fff;\n                font-size: 31px;\n                text-align: left;\n                padding: 10px;\n                padding-top: 9px;\n                padding-bottom: 5px;\n                width: 215px;\n                background-color: rgba(0, 0, 0, 0.25);\n                -webkit-border-radius: 4px;\n                -moz-border-radius: 4px;\n                border-radius: 4px;\n            }\n            .menuC {\n                display: none;\n                font-family: \"Hammersmith One\";\n                font-size: 12px;\n                max-height: 180px;\n                overflow-y: scroll;\n                -webkit-touch-callout: none;\n                -webkit-user-select: none;\n                -khtml-user-select: none;\n                -moz-user-select: none;\n                -ms-user-select: none;\n                user-select: none;\n            }\n            .menuB {\n                text-align: center;\n                background-color: rgb(25, 25, 25);\n                color: #fff;\n                -webkit-border-radius: 4px;\n                -moz-border-radius: 4px;\n                border-radius: 4px;\n                border: 2px solid #000;\n                cursor: pointer;\n            }\n            .menuB:active {\n                color: rgb(25, 25, 25);\n                background-color: rgb(200, 200, 200);\n            }\n            .customText {\n                color: #000;\n                -webkit-border-radius: 4px;\n                -moz-border-radius: 4px;\n                border-radius: 4px;\n                border: 2px solid #000;\n            }\n            .customText:focus {\n                background-color: white;\n            }\n            ::-webkit-scrollbar {\n                width: 10px;\n            }\n            ::-webkit-scrollbar-track {\n                opacity: 0;\n            }\n            ::-webkit-scrollbar-thumb {\n                background-color: rgb(25, 25, 25);\n                -webkit-border-radius: 4px;\n                -moz-border-radius: 4px;\n                border-radius: 4px;\n            }\n            ::-webkit-scrollbar-thumb:active {\n                background-color: rgb(230, 230, 230);\n            }\n            ");
            w.startDiv({
                id: "menuHeadLine",
                class: "menuClass"
            }, a => {
                a.add("menu:");
                w.startDiv({
                    id: "menuHeadLine",
                    class: "menuClass"
                }, a => {});
                w.addDiv({
                    id: "menuMain",
                    style: "display: block",
                    class: "menuC",
                    appendID: "menuHeadLine"
                }, a => {
                    w.addDiv({
                        style: "font-size: 20px; color: #ffff;",
                        appendID: "menuMain"
                    }, a => {
                        a.add("BOT SETTINGS:");
                    });
                    a.newLine(1);
                    a.button({
                        class: "menuB",
                        innerHTML: "ON",
                        onclick: "window.tryConnectBots()"
                    });
                    a.add("=");
                    a.button({
                        class: "menuB",
                        innerHTML: "OFF",
                        onclick: "window.destroyBots()"
                    });
                    a.newLine();
                    a.add("Bot Mode: ");
                    a.select({
                        id: "mode",
                        class: "Cselect",
                        option: {
                            "bots places mills to grid": {
                                id: "clear",
                                selected: true
                            },
                            "all bots will come where u are": {
                                id: "zync"
                            },
                            "bot stays in the same place": {
                                id: "zearch"
                            },
                            "Bots Clear Everything": {
                                id: "fuckemup"
                            },
                            "go to bottem right": {
                                id: "flex"
                            }
                        }
                    });
                    a.newLine();
                    a.add("Bot Setup Type: ");
                    a.select({
                        id: "setup",
                        class: "Cselect",
                        option: {
                            "Dagger-Musket": {
                                id: "dm",
                                selected: true
                            },
                            "Katana-Hammer": {
                                id: "kh"
                            },
                            "Dagger-Repeater-Crossbow": {
                                id: "dr"
                            },
                            "Sword-Musket": {
                                id: "zd"
                            }
                        }
                    });
                    a.newLine(3);
                    a.add("AUTO GRIND:");
                    a.newLine(1);
                    a.add("Auto Ruby: ");
                    a.checkBox({
                        id: "weaponGrind",
                        class: "checkB",
                        onclick: "window.startGrind()"
                    });
                });
                w.addDiv({
                    style: "font-size: 13px; color: #ffff;",
                    appendID: "menuMain"
                }, a => {
                    a.newLine(1);
                    a.add("COMBAT Settings:");
                    a.newLine();
                    a.add("RV2 Combat : ");
                    a.checkBox({
                        id: "turretCombat",
                        class: "checkB",
                        checked: true
                    });
                    a.newLine();
                    a.add("pre placer: ");
                    a.checkBox({
                        id: "plc2",
                        class: "checkB",
                        checked: false
                    });
                    a.newLine();
                    a.add("pre placer 2: ");
                    a.checkBox({
                        id: "grind",
                        class: "checkB",
                        checked: false
                    });
                    a.newLine();
                    a.add("Trap Placers: ");
                    a.select({
                        id: "predictType",
                        class: "Cselect",
                        option: {
                            "Disable Render": {
                                id: "disableRender"
                            },
                            "Blimsa Smart Placer": {
                                id: "pre2",
                                selected: true
                            },
                            "Or1d Smart Placer": {
                                id: "pre3"
                            }
                        }
                    });
                });
                w.addDiv({
                    style: "font-size: 13px; color: #ffff;",
                    appendID: "menuMain"
                }, a => {
                    a.add("(Soldier) auto hit:");
                    a.checkBox({
                        id: "window.wasdMode()",
                        onclick: "window.wasdMode()"
                    });
                    a.newLine();
                    a.add("Anti Bull Tick: ");
                    a.checkBox({
                        id: "backupNobull",
                        class: "checkB",
                        checked: true
                    });
                    a.newLine();
                    a.add("Anti SpikeTick: ");
                    a.checkBox({
                        id: "safeAntiSpikeTick",
                        class: "checkB",
                        checked: true
                    });
                    a.newLine();
                    a.add("radom things: ");
                    a.selectMenu({
                        id: "configsChanger",
                        class: "Cselect",
                        menu: n
                    });
                    a.newLine();
                    a.add("AutoGG Chat: ");
                    a.checkBox({
                        id: "autogg",
                        class: "checkB",
                        checked: false
                    });
                    a.newLine(2);
                    a.add("VISUALS:");
                    a.newLine();
                    a.add("Hp Text");
                    a.checkBox({
                        id: "healthtext",
                        class: "checkB",
                        checked: false
                    });
                    a.newLine();
                    a.add("Placers Visuals: ");
                    a.checkBox({
                        id: "placeVis",
                        class: "checkB",
                        checked: false
                    });
                    a.newLine();
                    a.add("Tracers");
                    a.checkBox({
                        id: "tracers",
                        class: "checkB",
                        checked: true
                    });
                    a.newLine();
                    a.add("Weapon Range: ");
                    a.checkBox({
                        id: "weaponRange",
                        class: "checkB",
                        checked: false
                    });
                    a.newLine();
                    a.add("Visuals: ");
                    a.select({
                        id: "visualType",
                        class: "Cselect",
                        option: {
                            "Revival Mod V3": {
                                id: "ueh1",
                                selected: true
                            }
                        }
                    });
                    a.newLine(1);
                    a.newLine(1);
                    a.select({
                        id: "antiBullType",
                        maxLength: "0"
                    });
                    a.select({
                        id: "breakRange",
                        maxLength: "0"
                    });
                    a.select({
                        id: "autoPlaceTick",
                        maxLength: "0"
                    });
                    a.select({
                        id: "instaType",
                        maxLength: "0"
                    });
                    a.select({
                        id: "window.toggleBotsCircle()",
                        maxLength: "0"
                    });
                    a.select({
                        id: "circleRad",
                        maxLength: "0"
                    });
                    a.select({
                        id: "radSpeed",
                        maxLength: "0"
                    });
                    a.select({
                        id: "funni",
                        maxLength: "0"
                    });
                    a.select({
                        id: "antiBullType",
                        maxLength: "0"
                    });
                    a.select({
                        id: "antiBullType",
                        maxLength: "0"
                    });
                    a.newLine(1);
                    a.add("this mod is made for");
                    a.newLine(1);
                    a.add("combat |Kh|Sm|Ph| and more..");
                    a.newLine(2);
                    a.add("how to use mod keys");
                    a.newLine(1);
                    a.add("V = Spike");
                    a.newLine(1);
                    a.add("F = Trap");
                    a.newLine(1);
                    a.add("T = One Tick");
                    a.newLine();
                    a.add("For |One Tick| U Must Have Diamond Or Ruby Ph Or It Will Not Kill Players");
                    a.newLine();
                    a.add("MOD MADE BY GOD OF WAR");
                    a.newLine();
                });
            });
            let y = document.createElement("div");
            y.id = "menuChatDiv";
            document.body.appendChild(y);
            w.set("menuChatDiv");
            w.setStyle("\n            ");
            w.resetHTML();
            w.setCSS("\n            ");
            w.startDiv({
                id: "mChDiv",
                class: "chDiv"
            }, a => {
                w.addDiv({
                    id: "mChMain",
                    class: "chMainDiv",
                    appendID: "mChDiv"
                }, a => {});
                a.text({
                    id: "mChBox",
                    class: "chMainBox",
                    placeHolder: "To chat click here or press / key"
                });
            });
            let z = t("mChMain");
            let A = t("mChBox");
            let B = false;
            let C = 0;

            function D(a, b, c, d) {
                w.set("menuChatDiv");
                let e = document.getElementById("mChMain");
                const f = new Date();
                const g = f.getHours();
                const h = f.getMinutes();
                const i = g >= 12 ? "PM" : "AM";
                const j = (g % 12 || 12).toString();
                const k = h.toString().padStart(2, "0");
                let l = j + ":" + k + " " + i;
                let m = document.createElement("div");
                m.className = "chatEntry";
                let n = document.createElement("span");
                n.style.color = "rgba(255, 255, 255, 0.5)";
                n.innerText = "" + l;
                m.appendChild(n);
                let o = document.createElement("span");
                o.style.color = d;
                o.innerText = " " + c;
                m.appendChild(o);
                let p = document.createElement("span");
                p.style.color = b;
                p.innerText = " " + a;
                m.appendChild(p);
                e.appendChild(m);
                e.scrollTop = e.scrollHeight;
            }
            let E = 0;
            let F = ["menuMain", "menuConfig", "menuOther"];
            window.changeMenu = function() {
                t(F[E % F.length]).style.display = "none";
                E++;
                t(F[E % F.length]).style.display = "block";
            };
            let G = document.createElement("div");
            G.id = "status";
            t("gameUI").appendChild(G);
            w.set("status");
            w.setStyle("\n            display: block;\n            position: absolute;\n            color: #ddd;\n            font: 15px Hammersmith One;\n            bottom: 215px;\n            left: 20px;\n            ");
            w.resetHTML();
            w.setCSS("\n            .sizing {\n                font-size: 15px;\n            }\n            .mod {\n                font-size: 15px;\n                display: inline-block;\n            }\n            ");
            let H = false;
            let I = undefined;
            let J = undefined;
            let K = 0;
            let L = 120;
            let M = 120;
            let N = {
                sec: true
            };
            let O = {
                tick: 0,
                tickQueue: [],
                tickBase: function(a, b) {
                    if (this.tickQueue[this.tick + b]) {
                        this.tickQueue[this.tick + b].push(a);
                    } else {
                        this.tickQueue[this.tick + b] = [a];
                    }
                },
                tickRate: 1000 / a.serverUpdateRate,
                tickSpeed: 0,
                lastTick: performance.now()
            };
            let P = false;
            let Q = {
                last: 0,
                time: 0,
                ltime: 0
            };
            let R = undefined;
            let S = ["cc", 1, "__proto__"];
            WebSocket.prototype.nsend = WebSocket.prototype.send;
            WebSocket.prototype.send = function(a) {
                if (!I) {
                    I = this;
                    I.addEventListener("message", function(a) {
                        W(a);
                    });
                    I.addEventListener("close", a => {
                        if (a.code == 4001) {
                            window.location.reload();
                        }
                    });
                }
                if (I == this) {
                    P = false;
                    let b = new Uint8Array(a);
                    let c = window.msgpack.decode(b);
                    let d = c[0];
                    b = c[1];
                    if (d == "6") {
                        if (b[0]) {
                            let a;
                            b[0] = b[0].slice(0, 30);
                        }
                    } else if (d == "L") {
                        b[0] = b[0] + String.fromCharCode(0).repeat(7);
                        b[0] = b[0].slice(0, 7);
                    } else if (d == "M") {
                        b[0].name = b[0].name == "" ? "unknown" : b[0].name;
                        b[0].moofoll = true;
                        b[0].skin = b[0].skin == 10 ? "__proto__" : b[0].skin;
                        S = [b[0].name, b[0].moofoll, b[0].skin];
                    } else if (d == "D") {
                        if (la.lastDir == b[0] || [null, undefined].includes(b[0])) {
                            P = true;
                        } else {
                            la.lastDir = b[0];
                        }
                    } else if (d == "d") {
                        if (!b[2]) {
                            P = true;
                        } else if (![null, undefined].includes(b[1])) {
                            la.lastDir = b[1];
                        }
                    } else if (d == "K") {
                        if (!b[1]) {
                            P = true;
                        }
                    } else if (d == "S") {
                        Bc.wait = !Bc.wait;
                        P = true;
                    } else if (d == "a") {
                        if (b[1]) {
                            if (fa.moveDir == b[0]) {
                                P = true;
                                fa.randDIff = Math.random * Math.PI * 2;
                            }
                            fa.moveDir = b[0];
                        } else {
                            P = true;
                        }
                    }
                    if (!P) {
                        let a = window.msgpack.encode([d, b]);
                        this.nsend(a);
                        if (!N.sec) {
                            N.sec = true;
                            setTimeout(() => {
                                N.sec = false;
                                K = 0;
                            }, M);
                        }
                        K++;
                    }
                } else {
                    this.nsend(a);
                }
            };

            function T(a) {
                let b = Array.prototype.slice.call(arguments, 1);
                let c = window.msgpack.encode([a, b]);
                I.send(c);
            }

            function U(a) {
                let b = Array.prototype.slice.call(arguments, 1);
                let c = window.msgpack.encode([a, b]);
                I.nsend(c);
            }
            window.leave = function() {
                U("kys", {
                    "frvr is so bad": true,
                    "sidney is too good": true,
                    "dev are too weak": true
                });
            };
            let V = {
                send: T
            };

            function W(a) {
                let b = new Uint8Array(a.data);
                let c = window.msgpack.decode(b);
                let d = c[0];
                b = c[1];
                let e = {
                    A: Bd,
                    C: Md,
                    D: Nd,
                    E: Od,
                    a: oe,
                    G: pe,
                    H: qe,
                    I: re,
                    J: se,
                    K: te,
                    L: ve,
                    M: we,
                    N: xe,
                    O: Td,
                    P: Ud,
                    Q: be,
                    R: ce,
                    S: Vd,
                    T: Wd,
                    U: Xd,
                    V: ye,
                    X: ze,
                    Y: Ae,
                    2: Be,
                    3: Ce,
                    4: De,
                    5: Ee,
                    6: Fe,
                    7: Ge,
                    8: He,
                    9: Ef,
                    0: Jd
                };
                if (d == "io-init") {
                    J = b[0];
                } else if (e[d]) {
                    e[d].apply(undefined, b);
                }
            }
            Math.lerpAngle = function(a, b, c) {
                let d = Math.abs(b - a);
                if (d > Math.PI) {
                    if (a > b) {
                        b += Math.PI * 2;
                    } else {
                        a += Math.PI * 2;
                    }
                }
                let e = b + (a - b) * c;
                if (e >= 0 && e <= Math.PI * 2) {
                    return e;
                }
                return e % (Math.PI * 2);
            };
            CanvasRenderingContext2D.prototype.roundRect = function(a, b, c, d, e) {
                if (c < e * 2) {
                    e = c / 2;
                }
                if (d < e * 2) {
                    e = d / 2;
                }
                if (e < 0) {
                    e = 0;
                }
                this.beginPath();
                this.moveTo(a + e, b);
                this.arcTo(a + c, b, a + c, b + d, e);
                this.arcTo(a + c, b + d, a, b + d, e);
                this.arcTo(a, b + d, a, b, e);
                this.arcTo(a, b, a + c, b, e);
                this.closePath();
                return this;
            };
            let X = [];
            let Y = [];
            let Z = [];
            let _ = [];
            let aa = [];
            let ba = [];
            let ca = [];
            let da = [];
            let ea = [];
            let fa;
            let ga;
            let ha;
            let ia = [];
            let ja = [];
            let ka = [];
            let la = {
                reloaded: false,
                waitHit: 0,
                autoAim: false,
                revAim: false,
                ageInsta: true,
                reSync: false,
                bullTick: 0,
                anti0Tick: 0,
                antiSync: false,
                safePrimary: function(a) {
                    return [0, 8].includes(a.primaryIndex);
                },
                safeSecondary: function(a) {
                    return [10, 11, 14].includes(a.secondaryIndex);
                },
                lastDir: 0,
                autoPush: false,
                pushData: {}
            };

            function ma(a, b) {
                return a.find(a => a.id == b);
            }

            function na(a, b) {
                return a.find(a => a.sid == b);
            }

            function oa(a) {
                return ma(Z, a);
            }

            function pa(a) {
                return na(Z, a);
            }

            function qa(a) {
                return na(Y, a);
            }

            function ra(a) {
                return na(ba, a);
            }

            function sa(a) {
                return na(ba, a);
            }
            let ta = t("gameName");
            let ua = t("adCard");
            let va = t("chatButton");
            va.remove();
            let wa = t("gameCanvas");
            let xa = wa.getContext("2d");
            let ya = t("mapDisplay");
            let za = ya.getContext("2d");
            ya.width = 300;
            ya.height = 300;
            let Aa = t("storeMenu");
            let Ba = t("storeHolder");
            let Ca = t("upgradeHolder");
            let Da = t("upgradeCounter");
            let Ea = t("chatBox");
            Ea.autocomplete = "off";
            Ea.style.textAlign = "center";
            Ea.style.width = "18em";
            let Fa = t("chatHolder");
            let Ga = t("actionBar");
            let Ha = t("leaderboardData");
            let Ia = t("itemInfoHolder");
            let Ja = t("menuCardHolder");
            let Ka = t("mainMenu");
            let La = t("diedText");
            let Ma;
            let Na;
            let Oa = a.maxScreenWidth;
            let Pa = a.maxScreenHeight;
            let Qa = 1;
            let Ra;
            let Sa;
            let Ta = performance.now();
            let Ua;
            let Va;
            let Wa;
            let Xa = 0;
            let Ya = 0;
            let Za = t("allianceMenu");
            let $a = 1;
            let _a = 0;
            let ab = "#525252";
            let bb = "#3d3f42";
            let cb = 5.5;
            let db = false;
            let eb = true;
            let fb = {};
            let gb = {
                87: [0, -1],
                38: [0, -1],
                83: [0, 1],
                40: [0, 1],
                65: [-1, 0],
                37: [-1, 0],
                68: [1, 0],
                39: [1, 0]
            };

            function hb() {
                fb = {};
                V.send("e");
            }
            let ib = 0;
            let jb = false;
            let kb = {};
            let lb = {
                place: 0,
                placeSpawnPads: 0
            };
            let mb;
            let nb = true;
            window.onblur = function() {
                nb = false;
            };
            window.onfocus = function() {
                nb = true;
                if (fa && fa.alive) {
                    hb();
                }
            };
            let ob = [];
            class pb {
                constructor() {
                    let a = Math.abs;
                    let b = Math.cos;
                    let c = Math.sin;
                    let d = Math.pow;
                    let e = Math.sqrt;
                    let f = Math.atan2;
                    let g = Math.PI;
                    let h = this;
                    this.round = function(a, b) {
                        return Math.round(a * b) / b;
                    };
                    this.toRad = function(a) {
                        return a * (g / 180);
                    };
                    this.toAng = function(a) {
                        return a / (g / 180);
                    };
                    this.randInt = function(a, b) {
                        return Math.floor(Math.random() * (b - a + 1)) + a;
                    };
                    this.randFloat = function(a, b) {
                        return Math.random() * (b - a + 1) + a;
                    };
                    this.lerp = function(a, b, c) {
                        return a + (b - a) * c;
                    };
                    this.decel = function(a, b) {
                        if (a > 0) {
                            a = Math.max(0, a - b);
                        } else if (a < 0) {
                            a = Math.min(0, a + b);
                        }
                        return a;
                    };
                    this.getDistance = function(a, b, c, d) {
                        return e((c -= a) * c + (d -= b) * d);
                    };
                    this.getDist = function(a, b, c, d) {
                        let f = {
                            x: c == 0 ? a.x : c == 1 ? a.x1 : c == 2 ? a.x2 : c == 3 && a.x3,
                            y: c == 0 ? a.y : c == 1 ? a.y1 : c == 2 ? a.y2 : c == 3 && a.y3
                        };
                        let g = {
                            x: d == 0 ? b.x : d == 1 ? b.x1 : d == 2 ? b.x2 : d == 3 && b.x3,
                            y: d == 0 ? b.y : d == 1 ? b.y1 : d == 2 ? b.y2 : d == 3 && b.y3
                        };
                        return e((g.x -= f.x) * g.x + (g.y -= f.y) * g.y);
                    };
                    this.getDirection = function(a, b, c, d) {
                        return f(b - d, a - c);
                    };
                    this.getDirect = function(a, b, c, d) {
                        let e = {
                            x: c == 0 ? a.x : c == 1 ? a.x1 : c == 2 ? a.x2 : c == 3 && a.x3,
                            y: c == 0 ? a.y : c == 1 ? a.y1 : c == 2 ? a.y2 : c == 3 && a.y3
                        };
                        let g = {
                            x: d == 0 ? b.x : d == 1 ? b.x1 : d == 2 ? b.x2 : d == 3 && b.x3,
                            y: d == 0 ? b.y : d == 1 ? b.y1 : d == 2 ? b.y2 : d == 3 && b.y3
                        };
                        return f(e.y - g.y, e.x - g.x);
                    };
                    this.getAngleDist = function(b, c) {
                        let d = a(c - b) % (g * 2);
                        if (d > g) {
                            return g * 2 - d;
                        } else {
                            return d;
                        }
                    };
                    this.isNumber = function(a) {
                        return typeof a == "number" && !isNaN(a) && isFinite(a);
                    };
                    this.isString = function(a) {
                        return a && typeof a == "string";
                    };
                    this.kFormat = function(a) {
                        if (a > 999) {
                            return (a / 1000).toFixed(1) + "k";
                        } else {
                            return a;
                        }
                    };
                    this.sFormat = function(a) {
                        let b = [{
                            num: 1000,
                            string: "k"
                        }, {
                            num: 1000000,
                            string: "m"
                        }, {
                            num: 1000000000,
                            string: "b"
                        }, {
                            num: 1000000000000,
                            string: "q"
                        }].reverse();
                        let c = b.find(b => a >= b.num);
                        if (!c) {
                            return a;
                        }
                        return (a / c.num).toFixed(1) + c.string;
                    };
                    this.capitalizeFirst = function(a) {
                        return a.charAt(0).toUpperCase() + a.slice(1);
                    };
                    this.fixTo = function(a, b) {
                        return parseFloat(a.toFixed(b));
                    };
                    this.sortByPoints = function(a, b) {
                        return parseFloat(b.points) - parseFloat(a.points);
                    };
                    this.lineInRect = function(a, b, c, d, e, f, g, h) {
                        let i = e;
                        let j = g;
                        if (e > g) {
                            i = g;
                            j = e;
                        }
                        if (j > c) {
                            j = c;
                        }
                        if (i < a) {
                            i = a;
                        }
                        if (i > j) {
                            return false;
                        }
                        let k = f;
                        let l = h;
                        let m = g - e;
                        if (Math.abs(m) > 1e-7) {
                            let a = (h - f) / m;
                            let b = f - a * e;
                            k = a * i + b;
                            l = a * j + b;
                        }
                        if (k > l) {
                            let a = l;
                            l = k;
                            k = a;
                        }
                        if (l > d) {
                            l = d;
                        }
                        if (k < b) {
                            k = b;
                        }
                        if (k > l) {
                            return false;
                        }
                        return true;
                    };
                    this.containsPoint = function(a, b, c) {
                        let d = a.getBoundingClientRect();
                        let e = d.left + window.scrollX;
                        let f = d.top + window.scrollY;
                        let g = d.width;
                        let h = d.height;
                        let i = b > e && b < e + g;
                        let j = c > f && c < f + h;
                        return i && j;
                    };
                    this.mousifyTouchEvent = function(a) {
                        let b = a.changedTouches[0];
                        a.screenX = b.screenX;
                        a.screenY = b.screenY;
                        a.clientX = b.clientX;
                        a.clientY = b.clientY;
                        a.pageX = b.pageX;
                        a.pageY = b.pageY;
                    };
                    this.hookTouchEvents = function(a, b) {
                        let c = !b;
                        let d = false;
                        let e = false;
                        a.addEventListener("touchstart", this.checkTrusted(f), e);
                        a.addEventListener("touchmove", this.checkTrusted(g), e);
                        a.addEventListener("touchend", this.checkTrusted(i), e);
                        a.addEventListener("touchcancel", this.checkTrusted(i), e);
                        a.addEventListener("touchleave", this.checkTrusted(i), e);

                        function f(b) {
                            h.mousifyTouchEvent(b);
                            window.setUsingTouch(true);
                            if (c) {
                                b.preventDefault();
                                b.stopPropagation();
                            }
                            if (a.onmouseover) {
                                a.onmouseover(b);
                            }
                            d = true;
                        }

                        function g(b) {
                            h.mousifyTouchEvent(b);
                            window.setUsingTouch(true);
                            if (c) {
                                b.preventDefault();
                                b.stopPropagation();
                            }
                            if (h.containsPoint(a, b.pageX, b.pageY)) {
                                if (!d) {
                                    if (a.onmouseover) {
                                        a.onmouseover(b);
                                    }
                                    d = true;
                                }
                            } else if (d) {
                                if (a.onmouseout) {
                                    a.onmouseout(b);
                                }
                                d = false;
                            }
                        }

                        function i(b) {
                            h.mousifyTouchEvent(b);
                            window.setUsingTouch(true);
                            if (c) {
                                b.preventDefault();
                                b.stopPropagation();
                            }
                            if (d) {
                                if (a.onclick) {
                                    a.onclick(b);
                                }
                                if (a.onmouseout) {
                                    a.onmouseout(b);
                                }
                                d = false;
                            }
                        }
                    };
                    this.removeAllChildren = function(a) {
                        while (a.hasChildNodes()) {
                            a.removeChild(a.lastChild);
                        }
                    };
                    this.generateElement = function(a) {
                        let b = document.createElement(a.tag || "div");

                        function c(c, d) {
                            if (a[c]) {
                                b[d] = a[c];
                            }
                        }
                        c("text", "textContent");
                        c("html", "innerHTML");
                        c("class", "className");
                        for (let c in a) {
                            switch (c) {
                                case "tag":
                                case "text":
                                case "html":
                                case "class":
                                case "style":
                                case "hookTouch":
                                case "parent":
                                case "children":
                                    continue;
                                default:
                                    break;
                            }
                            b[c] = a[c];
                        }
                        if (b.onclick) {
                            b.onclick = this.checkTrusted(b.onclick);
                        }
                        if (b.onmouseover) {
                            b.onmouseover = this.checkTrusted(b.onmouseover);
                        }
                        if (b.onmouseout) {
                            b.onmouseout = this.checkTrusted(b.onmouseout);
                        }
                        if (a.style) {
                            b.style.cssText = a.style;
                        }
                        if (a.hookTouch) {
                            this.hookTouchEvents(b);
                        }
                        if (a.parent) {
                            a.parent.appendChild(b);
                        }
                        if (a.children) {
                            for (let c = 0; c < a.children.length; c++) {
                                b.appendChild(a.children[c]);
                            }
                        }
                        return b;
                    };
                    this.checkTrusted = function(a) {
                        return function(b) {
                            if (b && b instanceof Event && (b && typeof b.isTrusted == "boolean" ? b.isTrusted : true)) {
                                a(b);
                            } else {}
                        };
                    };
                    this.randomString = function(a) {
                        let b = "";
                        let c = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                        for (let d = 0; d < a; d++) {
                            b += c.charAt(Math.floor(Math.random() * c.length));
                        }
                        return b;
                    };
                    this.countInArray = function(a, b) {
                        let c = 0;
                        for (let d = 0; d < a.length; d++) {
                            if (a[d] === b) {
                                c++;
                            }
                        }
                        return c;
                    };
                    this.hexToRgb = function(a) {
                        return a.slice(1).match(/.{1,2}/g).map(a => parseInt(a, 16));
                    };
                    this.getRgb = function(a, b, c) {
                        return [a / 255, b / 255, c / 255].join(", ");
                    };
                }
            };
            class qb {
                constructor() {
                    this.init = function(a, b, c, d, e, f, g) {
                        this.x = a;
                        this.y = b;
                        this.color = g;
                        this.scale = c;
                        this.startScale = this.scale;
                        this.maxScale = c * 1.5;
                        this.scaleSpeed = 0.7;
                        this.speed = d;
                        this.life = e;
                        this.text = f;
                        this.acc = 1;
                        this.alpha = 0;
                        this.maxLife = e;
                        this.ranX = rc.randFloat(-1, 1);
                    };
                    this.update = function(b) {
                        if (this.life) {
                            this.life -= b;
                            if (a.anotherVisual) {
                                this.y -= this.speed * b * this.acc;
                                this.acc -= b / (this.maxLife / 2.5);
                                if (this.life <= 200) {
                                    if (this.alpha > 0) {
                                        this.alpha = Math.max(0, this.alpha - b / 300);
                                    }
                                } else if (this.alpha < 1) {
                                    this.alpha = Math.min(1, this.alpha + b / 100);
                                }
                                this.x += this.ranX;
                            } else {
                                this.y -= this.speed * b;
                            }
                            this.scale += this.scaleSpeed * b;
                            if (this.scale >= this.maxScale) {
                                this.scale = this.maxScale;
                                this.scaleSpeed *= -1;
                            } else if (this.scale <= this.startScale) {
                                this.scale = this.startScale;
                                this.scaleSpeed = 0;
                            }
                            if (this.life <= 0) {
                                this.life = 0;
                            }
                        }
                    };
                    this.render = function(b, c, d) {
                        b.lineWidth = 10;
                        b.fillStyle = this.color;
                        b.font = this.scale + "px Hammersmith One";
                        if (a.anotherVisual) {
                            b.globalAlpha = this.alpha;
                            b.strokeStyle = bb;
                            b.strokeText(this.text, this.x - c, this.y - d);
                        }
                        b.fillText(this.text, this.x - c, this.y - d);
                        b.globalAlpha = 1;
                    };
                }
            };
            class rb {
                constructor() {
                    this.texts = [];
                    this.stack = [];
                    this.update = function(a, b, c, d) {
                        b.textBaseline = "middle";
                        b.textAlign = "center";
                        for (let e = 0; e < this.texts.length; ++e) {
                            if (this.texts[e].life) {
                                this.texts[e].update(a);
                                this.texts[e].render(b, c, d);
                            }
                        }
                    };
                    this.showText = function(a, b, c, d, e, f, g) {
                        let h;
                        for (let i = 0; i < this.texts.length; ++i) {
                            if (!this.texts[i].life) {
                                h = this.texts[i];
                                break;
                            }
                        }
                        if (!h) {
                            h = new qb();
                            this.texts.push(h);
                        }
                        h.init(a, b, c, d, e, f, g);
                    };
                }
            }
            class sb {
                constructor(a) {
                    this.sid = a;
                    this.init = function(a, b, c, d, e, f, g) {
                        f = f || {};
                        this.sentTo = {};
                        this.gridLocations = [];
                        this.active = true;
                        this.alive = true;
                        this.doUpdate = f.doUpdate;
                        this.x = a;
                        this.y = b;
                        this.dir = c + Math.PI;
                        this.lastDir = c;
                        this.xWiggle = 0;
                        this.yWiggle = 0;
                        this.visScale = d;
                        this.scale = d;
                        this.type = e;
                        this.id = f.id;
                        this.owner = g;
                        this.name = f.name;
                        this.isItem = this.id != undefined;
                        this.group = f.group;
                        this.maxHealth = f.health;
                        this.health = this.maxHealth;
                        this.healthMov = 100;
                        this.layer = 2;
                        if (this.group != undefined) {
                            this.layer = this.group.layer;
                        } else if (this.type == 0) {
                            this.layer = 3;
                        } else if (this.type == 2) {
                            this.layer = 0;
                        } else if (this.type == 4) {
                            this.layer = -1;
                        }
                        this.colDiv = f.colDiv || 1;
                        this.blocker = f.blocker;
                        this.ignoreCollision = f.ignoreCollision;
                        this.dontGather = f.dontGather;
                        this.hideFromEnemy = f.hideFromEnemy;
                        this.friction = f.friction;
                        this.projDmg = f.projDmg;
                        this.dmg = f.dmg;
                        this.pDmg = f.pDmg;
                        this.pps = f.pps;
                        this.zIndex = f.zIndex || 0;
                        this.turnSpeed = f.turnSpeed;
                        this.req = f.req;
                        this.trap = f.trap;
                        this.healCol = f.healCol;
                        this.teleport = f.teleport;
                        this.boostSpeed = f.boostSpeed;
                        this.projectile = f.projectile;
                        this.shootRange = f.shootRange;
                        this.shootRate = f.shootRate;
                        this.shootCount = this.shootRate;
                        this.spawnPoint = f.spawnPoint;
                        this.onNear = 0;
                        this.breakObj = false;
                        this.alpha = f.alpha || 1;
                        this.maxAlpha = f.alpha || 1;
                        this.damaged = 0;
                    };
                    this.changeHealth = function(a, b) {
                        this.health += a;
                        return this.health <= 0;
                    };
                    this.getScale = function(a, b) {
                        a = a || 1;
                        return this.scale * (this.isItem || this.type == 2 || this.type == 3 || this.type == 4 ? 1 : a * 0.6) * (b ? 1 : this.colDiv);
                    };
                    this.visibleToPlayer = function(a) {
                        return !this.hideFromEnemy || this.owner && (this.owner == a || this.owner.team && a.team == this.owner.team);
                    };
                    this.update = function(a) {
                        if (this.health != this.healthMov) {
                            if (this.health < this.healthMov) {
                                this.healthMov -= 1.9;
                            } else {
                                this.healthMov += 1.9;
                            }
                            if (Math.abs(this.health - this.healthMov) < 1.9) {
                                this.healthMov = this.health;
                            }
                        };
                        if (this.active) {
                            if (this.xWiggle) {
                                this.xWiggle *= Math.pow(0.99, a);
                            }
                            if (this.yWiggle) {
                                this.yWiggle *= Math.pow(0.99, a);
                            }
                            let b = rc.getAngleDist(this.lastDir, this.dir);
                            if (b > 0.01) {
                                this.dir += b / 5;
                            } else {
                                this.dir = this.lastDir;
                            }
                        } else if (this.alive) {
                            this.alpha -= a / (200 / this.maxAlpha);
                            this.visScale += a / (this.scale / 2.5);
                            if (this.alpha <= 0) {
                                this.alpha = 0;
                                this.alive = false;
                            }
                        }
                    };
                    this.isTeamObject = function(a) {
                        if (this.owner == null) {
                            return true;
                        } else {
                            return this.owner && a.sid == this.owner.sid || a.findAllianceBySid(this.owner.sid);
                        }
                    };
                }
            }
            class tb {
                constructor() {
                    this.groups = [{
                        id: 0,
                        name: "food",
                        layer: 0
                    }, {
                        id: 1,
                        name: "walls",
                        place: true,
                        limit: 30,
                        layer: 0
                    }, {
                        id: 2,
                        name: "spikes",
                        place: true,
                        limit: 15,
                        layer: 0
                    }, {
                        id: 3,
                        name: "mill",
                        place: true,
                        limit: 7,
                        layer: 1
                    }, {
                        id: 4,
                        name: "mine",
                        place: true,
                        limit: 1,
                        layer: 0
                    }, {
                        id: 5,
                        name: "trap",
                        place: true,
                        limit: 6,
                        layer: -1
                    }, {
                        id: 6,
                        name: "booster",
                        place: true,
                        limit: 12,
                        layer: -1
                    }, {
                        id: 7,
                        name: "turret",
                        place: true,
                        limit: 2,
                        layer: 1
                    }, {
                        id: 8,
                        name: "watchtower",
                        place: true,
                        limit: 12,
                        layer: 1
                    }, {
                        id: 9,
                        name: "buff",
                        place: true,
                        limit: 4,
                        layer: -1
                    }, {
                        id: 10,
                        name: "spawn",
                        place: true,
                        limit: 1,
                        layer: -1
                    }, {
                        id: 11,
                        name: "sapling",
                        place: true,
                        limit: 2,
                        layer: 0
                    }, {
                        id: 12,
                        name: "blocker",
                        place: true,
                        limit: 3,
                        layer: -1
                    }, {
                        id: 13,
                        name: "teleporter",
                        place: true,
                        limit: 2,
                        layer: -1
                    }];
                    this.projectiles = [{
                        indx: 0,
                        layer: 0,
                        src: "arrow_1",
                        dmg: 25,
                        speed: 1.6,
                        scale: 103,
                        range: 1000
                    }, {
                        indx: 1,
                        layer: 1,
                        dmg: 25,
                        scale: 20
                    }, {
                        indx: 0,
                        layer: 0,
                        src: "arrow_1",
                        dmg: 35,
                        speed: 2.5,
                        scale: 103,
                        range: 1200
                    }, {
                        indx: 0,
                        layer: 0,
                        src: "arrow_1",
                        dmg: 30,
                        speed: 2,
                        scale: 103,
                        range: 1200
                    }, {
                        indx: 1,
                        layer: 1,
                        dmg: 16,
                        scale: 20
                    }, {
                        indx: 0,
                        layer: 0,
                        src: "bullet_1",
                        dmg: 50,
                        speed: 3.6,
                        scale: 160,
                        range: 1400
                    }];
                    this.weapons = [{
                        id: 0,
                        type: 0,
                        name: "tool hammer",
                        desc: "tool for gathering all resources",
                        src: "hammer_1",
                        length: 140,
                        width: 140,
                        xOff: -3,
                        yOff: 18,
                        dmg: 25,
                        range: 65,
                        gather: 1,
                        speed: 300
                    }, {
                        id: 1,
                        type: 0,
                        age: 2,
                        name: "hand axe",
                        desc: "gathers resources at a higher rate",
                        src: "axe_1",
                        length: 140,
                        width: 140,
                        xOff: 3,
                        yOff: 24,
                        dmg: 30,
                        spdMult: 1,
                        range: 70,
                        gather: 2,
                        speed: 400
                    }, {
                        id: 2,
                        type: 0,
                        age: 8,
                        pre: 1,
                        name: "great axe",
                        desc: "deal more damage and gather more resources",
                        src: "great_axe_1",
                        length: 140,
                        width: 140,
                        xOff: -8,
                        yOff: 25,
                        dmg: 35,
                        spdMult: 1,
                        range: 75,
                        gather: 4,
                        speed: 400
                    }, {
                        id: 3,
                        type: 0,
                        age: 2,
                        name: "short sword",
                        desc: "increased attack power but slower move speed",
                        src: "sword_1",
                        iPad: 1.3,
                        length: 130,
                        width: 210,
                        xOff: -8,
                        yOff: 46,
                        dmg: 35,
                        spdMult: 0.85,
                        range: 110,
                        gather: 1,
                        speed: 300
                    }, {
                        id: 4,
                        type: 0,
                        age: 8,
                        pre: 3,
                        name: "katana",
                        desc: "greater range and damage",
                        src: "samurai_1",
                        iPad: 1.3,
                        length: 130,
                        width: 210,
                        xOff: -8,
                        yOff: 59,
                        dmg: 40,
                        spdMult: 0.8,
                        range: 118,
                        gather: 1,
                        speed: 300
                    }, {
                        id: 5,
                        type: 0,
                        age: 2,
                        name: "polearm",
                        desc: "long range melee weapon",
                        src: "spear_1",
                        iPad: 1.3,
                        length: 130,
                        width: 210,
                        xOff: -8,
                        yOff: 53,
                        dmg: 45,
                        knock: 0.2,
                        spdMult: 0.82,
                        range: 142,
                        gather: 1,
                        speed: 700
                    }, {
                        id: 6,
                        type: 0,
                        age: 2,
                        name: "bat",
                        desc: "fast long range melee weapon",
                        src: "bat_1",
                        iPad: 1.3,
                        length: 110,
                        width: 180,
                        xOff: -8,
                        yOff: 53,
                        dmg: 20,
                        knock: 0.7,
                        range: 110,
                        gather: 1,
                        speed: 300
                    }, {
                        id: 7,
                        type: 0,
                        age: 2,
                        name: "daggers",
                        desc: "really fast short range weapon",
                        src: "dagger_1",
                        iPad: 0.8,
                        length: 110,
                        width: 110,
                        xOff: 18,
                        yOff: 0,
                        dmg: 20,
                        knock: 0.1,
                        range: 65,
                        gather: 1,
                        hitSlow: 0.1,
                        spdMult: 1.13,
                        speed: 100
                    }, {
                        id: 8,
                        type: 0,
                        age: 2,
                        name: "stick",
                        desc: "great for gathering but very weak",
                        src: "stick_1",
                        length: 140,
                        width: 140,
                        xOff: 3,
                        yOff: 24,
                        dmg: 1,
                        spdMult: 1,
                        range: 70,
                        gather: 7,
                        speed: 400
                    }, {
                        id: 9,
                        type: 1,
                        age: 6,
                        name: "hunting bow",
                        desc: "bow used for ranged combat and hunting",
                        src: "bow_1",
                        req: ["wood", 4],
                        length: 120,
                        width: 120,
                        xOff: -6,
                        yOff: 0,
                        Pdmg: 25,
                        projectile: 0,
                        spdMult: 0.75,
                        speed: 600
                    }, {
                        id: 10,
                        type: 1,
                        age: 6,
                        name: "great hammer",
                        desc: "hammer used for destroying structures",
                        src: "great_hammer_1",
                        length: 140,
                        width: 140,
                        xOff: -9,
                        yOff: 25,
                        dmg: 10,
                        Pdmg: 10,
                        spdMult: 0.88,
                        range: 75,
                        sDmg: 7.5,
                        gather: 1,
                        speed: 400
                    }, {
                        id: 11,
                        type: 1,
                        age: 6,
                        name: "wooden shield",
                        desc: "blocks projectiles and reduces melee damage",
                        src: "shield_1",
                        length: 120,
                        width: 120,
                        shield: 0.2,
                        xOff: 6,
                        yOff: 0,
                        Pdmg: 0,
                        spdMult: 0.7
                    }, {
                        id: 12,
                        type: 1,
                        age: 8,
                        pre: 9,
                        name: "crossbow",
                        desc: "deals more damage and has greater range",
                        src: "crossbow_1",
                        req: ["wood", 5],
                        aboveHand: true,
                        armS: 0.75,
                        length: 120,
                        width: 120,
                        xOff: -4,
                        yOff: 0,
                        Pdmg: 35,
                        projectile: 2,
                        spdMult: 0.7,
                        speed: 700
                    }, {
                        id: 13,
                        type: 1,
                        age: 9,
                        pre: 12,
                        name: "repeater crossbow",
                        desc: "high firerate crossbow with reduced damage",
                        src: "crossbow_2",
                        req: ["wood", 10],
                        aboveHand: true,
                        armS: 0.75,
                        length: 120,
                        width: 120,
                        xOff: -4,
                        yOff: 0,
                        Pdmg: 30,
                        projectile: 3,
                        spdMult: 0.7,
                        speed: 230
                    }, {
                        id: 14,
                        type: 1,
                        age: 6,
                        name: "mc grabby",
                        desc: "steals resources from enemies",
                        src: "grab_1",
                        length: 130,
                        width: 210,
                        xOff: -8,
                        yOff: 53,
                        dmg: 0,
                        Pdmg: 0,
                        steal: 250,
                        knock: 0.2,
                        spdMult: 1.05,
                        range: 125,
                        gather: 0,
                        speed: 700
                    }, {
                        id: 15,
                        type: 1,
                        age: 9,
                        pre: 12,
                        name: "musket",
                        desc: "slow firerate but high damage and range",
                        src: "musket_1",
                        req: ["stone", 10],
                        aboveHand: true,
                        rec: 0.35,
                        armS: 0.6,
                        hndS: 0.3,
                        hndD: 1.6,
                        length: 205,
                        width: 205,
                        xOff: 25,
                        yOff: 0,
                        Pdmg: 50,
                        projectile: 5,
                        hideProjectile: true,
                        spdMult: 0.6,
                        speed: 1500
                    }];
                    this.list = [{
                        group: this.groups[0],
                        name: "apple",
                        desc: "restores 20 health when consumed",
                        req: ["food", 10],
                        consume: function(a) {
                            return a.changeHealth(20, a);
                        },
                        scale: 22,
                        holdOffset: 15,
                        healing: 20,
                        itemID: 0,
                        itemAID: 16
                    }, {
                        age: 3,
                        group: this.groups[0],
                        name: "cookie",
                        desc: "restores 40 health when consumed",
                        req: ["food", 15],
                        consume: function(a) {
                            return a.changeHealth(40, a);
                        },
                        scale: 27,
                        holdOffset: 15,
                        healing: 40,
                        itemID: 1,
                        itemAID: 17
                    }, {
                        age: 7,
                        group: this.groups[0],
                        name: "cheese",
                        desc: "restores 30 health and another 50 over 5 seconds",
                        req: ["food", 25],
                        consume: function(a) {
                            if (a.changeHealth(30, a) || a.health < 100) {
                                a.dmgOverTime.dmg = -10;
                                a.dmgOverTime.doer = a;
                                a.dmgOverTime.time = 5;
                                return true;
                            }
                            return false;
                        },
                        scale: 27,
                        holdOffset: 15,
                        healing: 30,
                        itemID: 2,
                        itemAID: 18
                    }, {
                        group: this.groups[1],
                        name: "wood wall",
                        desc: "provides protection for your village",
                        req: ["wood", 10],
                        projDmg: true,
                        health: 380,
                        scale: 50,
                        holdOffset: 20,
                        placeOffset: -5,
                        itemID: 3,
                        itemAID: 19
                    }, {
                        age: 3,
                        group: this.groups[1],
                        name: "stone wall",
                        desc: "provides improved protection for your village",
                        req: ["stone", 25],
                        health: 900,
                        scale: 50,
                        holdOffset: 20,
                        placeOffset: -5,
                        itemID: 4,
                        itemAID: 20
                    }, {
                        age: 7,
                        group: this.groups[1],
                        name: "castle wall",
                        desc: "provides powerful protection for your village",
                        req: ["stone", 35],
                        health: 1500,
                        scale: 52,
                        holdOffset: 20,
                        placeOffset: -5,
                        itemID: 5,
                        itemAID: 21
                    }, {
                        group: this.groups[2],
                        name: "spikes",
                        desc: "damages enemies when they touch them",
                        req: ["wood", 20, "stone", 5],
                        health: 400,
                        dmg: 20,
                        scale: 49,
                        spritePadding: -23,
                        holdOffset: 8,
                        placeOffset: -5,
                        itemID: 6,
                        itemAID: 22
                    }, {
                        age: 5,
                        group: this.groups[2],
                        name: "greater spikes",
                        desc: "damages enemies when they touch them",
                        req: ["wood", 30, "stone", 10],
                        health: 500,
                        dmg: 35,
                        scale: 52,
                        spritePadding: -23,
                        holdOffset: 8,
                        placeOffset: -5,
                        itemID: 7,
                        itemAID: 23
                    }, {
                        age: 9,
                        group: this.groups[2],
                        name: "poison spikes",
                        desc: "poisons enemies when they touch them",
                        req: ["wood", 35, "stone", 15],
                        health: 600,
                        dmg: 30,
                        pDmg: 5,
                        scale: 52,
                        spritePadding: -23,
                        holdOffset: 8,
                        placeOffset: -5,
                        itemID: 8,
                        itemAID: 24
                    }, {
                        age: 9,
                        group: this.groups[2],
                        name: "spinning spikes",
                        desc: "damages enemies when they touch them",
                        req: ["wood", 30, "stone", 20],
                        health: 500,
                        dmg: 45,
                        turnSpeed: 0.003,
                        scale: 52,
                        spritePadding: -23,
                        holdOffset: 8,
                        placeOffset: -5,
                        itemID: 9,
                        itemAID: 25
                    }, {
                        group: this.groups[3],
                        name: "windmill",
                        desc: "generates gold over time",
                        req: ["wood", 50, "stone", 10],
                        health: 400,
                        pps: 1,
                        turnSpeed: 0.0016,
                        spritePadding: 25,
                        iconLineMult: 12,
                        scale: 45,
                        holdOffset: 20,
                        placeOffset: 5,
                        itemID: 10,
                        itemAID: 26
                    }, {
                        age: 5,
                        group: this.groups[3],
                        name: "faster windmill",
                        desc: "generates more gold over time",
                        req: ["wood", 60, "stone", 20],
                        health: 500,
                        pps: 1.5,
                        turnSpeed: 0.0025,
                        spritePadding: 25,
                        iconLineMult: 12,
                        scale: 47,
                        holdOffset: 20,
                        placeOffset: 5,
                        itemID: 11,
                        itemAID: 27
                    }, {
                        age: 8,
                        group: this.groups[3],
                        name: "power mill",
                        desc: "generates more gold over time",
                        req: ["wood", 100, "stone", 50],
                        health: 800,
                        pps: 2,
                        turnSpeed: 0.005,
                        spritePadding: 25,
                        iconLineMult: 12,
                        scale: 47,
                        holdOffset: 20,
                        placeOffset: 5,
                        itemID: 12,
                        itemAID: 28
                    }, {
                        age: 5,
                        group: this.groups[4],
                        type: 2,
                        name: "mine",
                        desc: "allows you to mine stone",
                        req: ["wood", 20, "stone", 100],
                        iconLineMult: 12,
                        scale: 65,
                        holdOffset: 20,
                        placeOffset: 0,
                        itemID: 13,
                        itemAID: 29
                    }, {
                        age: 5,
                        group: this.groups[11],
                        type: 0,
                        name: "sapling",
                        desc: "allows you to farm wood",
                        req: ["wood", 150],
                        iconLineMult: 12,
                        colDiv: 0.5,
                        scale: 110,
                        holdOffset: 50,
                        placeOffset: -15,
                        itemID: 14,
                        itemAID: 30
                    }, {
                        age: 4,
                        group: this.groups[5],
                        name: "pit trap",
                        desc: "pit that traps enemies if they walk over it",
                        req: ["wood", 30, "stone", 30],
                        trap: true,
                        ignoreCollision: true,
                        hideFromEnemy: true,
                        health: 500,
                        colDiv: 0.2,
                        scale: 50,
                        holdOffset: 20,
                        placeOffset: -5,
                        alpha: 0.6,
                        itemID: 15,
                        itemAID: 31
                    }, {
                        age: 4,
                        group: this.groups[6],
                        name: "boost pad",
                        desc: "provides boost when stepped on",
                        req: ["stone", 20, "wood", 5],
                        ignoreCollision: true,
                        boostSpeed: 1.5,
                        health: 150,
                        colDiv: 0.7,
                        scale: 45,
                        holdOffset: 20,
                        placeOffset: -5,
                        itemID: 16,
                        itemAID: 32
                    }, {
                        age: 7,
                        group: this.groups[7],
                        doUpdate: true,
                        name: "turret",
                        desc: "defensive structure that shoots at enemies",
                        req: ["wood", 200, "stone", 150],
                        health: 800,
                        projectile: 1,
                        shootRange: 700,
                        shootRate: 2200,
                        scale: 43,
                        holdOffset: 20,
                        placeOffset: -5,
                        itemID: 17,
                        itemAID: 33
                    }, {
                        age: 7,
                        group: this.groups[8],
                        name: "platform",
                        desc: "platform to shoot over walls and cross over water",
                        req: ["wood", 20],
                        ignoreCollision: true,
                        zIndex: 1,
                        health: 300,
                        scale: 43,
                        holdOffset: 20,
                        placeOffset: -5,
                        itemID: 18,
                        itemAID: 34
                    }, {
                        age: 7,
                        group: this.groups[9],
                        name: "healing pad",
                        desc: "standing on it will slowly heal you",
                        req: ["wood", 30, "food", 10],
                        ignoreCollision: true,
                        healCol: 15,
                        health: 400,
                        colDiv: 0.7,
                        scale: 45,
                        holdOffset: 20,
                        placeOffset: -5,
                        itemID: 19,
                        itemAID: 35
                    }, {
                        age: 9,
                        group: this.groups[10],
                        name: "spawn pad",
                        desc: "you will spawn here when you die but it will dissapear",
                        req: ["wood", 100, "stone", 100],
                        health: 400,
                        ignoreCollision: true,
                        spawnPoint: true,
                        scale: 45,
                        holdOffset: 20,
                        placeOffset: -5,
                        itemID: 20,
                        itemAID: 36
                    }, {
                        age: 7,
                        group: this.groups[12],
                        name: "blocker",
                        desc: "blocks building in radius",
                        req: ["wood", 30, "stone", 25],
                        ignoreCollision: true,
                        blocker: 300,
                        health: 400,
                        colDiv: 0.7,
                        scale: 45,
                        holdOffset: 20,
                        placeOffset: -5,
                        itemID: 21,
                        itemAID: 37
                    }, {
                        age: 7,
                        group: this.groups[13],
                        name: "teleporter",
                        desc: "teleports you to a random point on the map",
                        req: ["wood", 60, "stone", 60],
                        ignoreCollision: true,
                        teleport: true,
                        health: 200,
                        colDiv: 0.7,
                        scale: 45,
                        holdOffset: 20,
                        placeOffset: -5,
                        itemID: 22,
                        itemAID: 38
                    }];
                    this.checkItem = {
                        index: function(a, b) {
                            if ([0, 1, 2].includes(a)) {
                                return 0;
                            } else if ([3, 4, 5].includes(a)) {
                                return 1;
                            } else if ([6, 7, 8, 9].includes(a)) {
                                return 2;
                            } else if ([10, 11, 12].includes(a)) {
                                return 3;
                            } else if ([13, 14].includes(a)) {
                                return 5;
                            } else if ([15, 16].includes(a)) {
                                return 4;
                            } else if ([17, 18, 19, 21, 22].includes(a)) {
                                if ([13, 14].includes(b)) {
                                    return 6;
                                } else {
                                    return 5;
                                }
                            } else if (a == 20) {
                                if ([13, 14].includes(b)) {
                                    return 7;
                                } else {
                                    return 6;
                                }
                            } else {
                                return undefined;
                            }
                        }
                    };
                    for (let a = 0; a < this.list.length; ++a) {
                        this.list[a].id = a;
                        if (this.list[a].pre) {
                            this.list[a].pre = a - this.list[a].pre;
                        }
                    }
                    if (typeof window !== "undefined") {
                        function a(a) {
                            for (let b = a.length - 1; b > 0; b--) {
                                const c = Math.floor(Math.random() * (b + 1));
                                [a[b], a[c]] = [a[c], a[b]];
                            }
                            return a;
                        }
                    }
                }
            }
            class ub {
                constructor(a, b, c, d, e, f) {
                    let g = Math.floor;
                    let h = Math.abs;
                    let i = Math.cos;
                    let j = Math.sin;
                    let k = Math.pow;
                    let l = Math.sqrt;
                    this.ignoreAdd = false;
                    this.hitObj = [];
                    this.disableObj = function(a) {
                        a.active = false;
                    };
                    let m;
                    this.add = function(c, d, e, f, g, h, i, j, k) {
                        m = ra(c);
                        if (!m) {
                            m = b.find(a => !a.active);
                            if (!m) {
                                m = new a(c);
                                b.push(m);
                            }
                        }
                        if (j) {
                            m.sid = c;
                        }
                        m.init(d, e, f, g, h, i, k);
                    };
                    this.disableBySid = function(a) {
                        let b = ra(a);
                        if (b) {
                            this.disableObj(b);
                        }
                    };
                    this.removeAllItems = function(a, c) {
                        b.filter(b => b.active && b.owner && b.owner.sid == a).forEach(a => this.disableObj(a));
                    };
                    this.checkItemLocation = function(a, e, f, g, h, i, j) {
                        let k = b.find(b => b.active && c.getDistance(a, e, b.x, b.y) < f + (b.blocker ? b.blocker : b.getScale(g, b.isItem)));
                        if (k) {
                            return false;
                        }
                        if (!i && h != 18 && e >= d.mapScale / 2 - d.riverWidth / 2 && e <= d.mapScale / 2 + d.riverWidth / 2) {
                            return false;
                        }
                        return true;
                    };
                }
            }
            class vb {
                constructor(a, b, c, d, e, f, g) {
                    this.init = function(a, b, c, d, e, f, g, h, i) {
                        this.active = true;
                        this.tickActive = true;
                        this.indx = a;
                        this.x = b;
                        this.y = c;
                        this.x2 = b;
                        this.y2 = c;
                        this.dir = d;
                        this.skipMov = true;
                        this.speed = e;
                        this.dmg = f;
                        this.scale = h;
                        this.range = g;
                        this.r2 = g;
                        this.owner = i;
                    };
                    this.update = function(a) {
                        if (this.active) {
                            let b = this.speed * a;
                            if (!this.skipMov) {
                                this.x += b * Math.cos(this.dir);
                                this.y += b * Math.sin(this.dir);
                                this.range -= b;
                                if (this.range <= 0) {
                                    this.x += this.range * Math.cos(this.dir);
                                    this.y += this.range * Math.sin(this.dir);
                                    b = 1;
                                    this.range = 0;
                                    this.active = false;
                                }
                            } else {
                                this.skipMov = false;
                            }
                        }
                    };
                    this.tickUpdate = function(a) {
                        if (this.tickActive) {
                            let b = this.speed * a;
                            if (!this.skipMov) {
                                this.x2 += b * Math.cos(this.dir);
                                this.y2 += b * Math.sin(this.dir);
                                this.r2 -= b;
                                if (this.r2 <= 0) {
                                    this.x2 += this.r2 * Math.cos(this.dir);
                                    this.y2 += this.r2 * Math.sin(this.dir);
                                    b = 1;
                                    this.r2 = 0;
                                    this.tickActive = false;
                                }
                            } else {
                                this.skipMov = false;
                            }
                        }
                    };
                }
            };
            class wb {
                constructor() {
                    this.hats = [{
                        id: 45,
                        name: "Shame!",
                        dontSell: true,
                        price: 0,
                        scale: 120,
                        desc: "hacks are for winners"
                    }, {
                        id: 51,
                        name: "Moo Cap",
                        price: 0,
                        scale: 120,
                        desc: "coolest mooer around"
                    }, {
                        id: 50,
                        name: "Apple Cap",
                        price: 0,
                        scale: 120,
                        desc: "apple farms remembers"
                    }, {
                        id: 28,
                        name: "Moo Head",
                        price: 0,
                        scale: 120,
                        desc: "no effect"
                    }, {
                        id: 29,
                        name: "Pig Head",
                        price: 0,
                        scale: 120,
                        desc: "no effect"
                    }, {
                        id: 30,
                        name: "Fluff Head",
                        price: 0,
                        scale: 120,
                        desc: "no effect"
                    }, {
                        id: 36,
                        name: "Pandou Head",
                        price: 0,
                        scale: 120,
                        desc: "no effect"
                    }, {
                        id: 37,
                        name: "Bear Head",
                        price: 0,
                        scale: 120,
                        desc: "no effect"
                    }, {
                        id: 38,
                        name: "Monkey Head",
                        price: 0,
                        scale: 120,
                        desc: "no effect"
                    }, {
                        id: 44,
                        name: "Polar Head",
                        price: 0,
                        scale: 120,
                        desc: "no effect"
                    }, {
                        id: 35,
                        name: "Fez Hat",
                        price: 0,
                        scale: 120,
                        desc: "no effect"
                    }, {
                        id: 42,
                        name: "Enigma Hat",
                        price: 0,
                        scale: 120,
                        desc: "join the enigma army"
                    }, {
                        id: 43,
                        name: "Blitz Hat",
                        price: 0,
                        scale: 120,
                        desc: "hey everybody i'm blitz"
                    }, {
                        id: 49,
                        name: "Bob XIII Hat",
                        price: 0,
                        scale: 120,
                        desc: "like and subscribe"
                    }, {
                        id: 57,
                        name: "Pumpkin",
                        price: 50,
                        scale: 120,
                        desc: "Spooooky"
                    }, {
                        id: 8,
                        name: "Bummle Hat",
                        price: 100,
                        scale: 120,
                        desc: "no effect"
                    }, {
                        id: 2,
                        name: "Straw Hat",
                        price: 500,
                        scale: 120,
                        desc: "no effect"
                    }, {
                        id: 15,
                        name: "Winter Cap",
                        price: 600,
                        scale: 120,
                        desc: "allows you to move at normal speed in snow",
                        coldM: 1
                    }, {
                        id: 5,
                        name: "Cowboy Hat",
                        price: 1000,
                        scale: 120,
                        desc: "no effect"
                    }, {
                        id: 4,
                        name: "Ranger Hat",
                        price: 2000,
                        scale: 120,
                        desc: "no effect"
                    }, {
                        id: 18,
                        name: "Explorer Hat",
                        price: 2000,
                        scale: 120,
                        desc: "no effect"
                    }, {
                        id: 31,
                        name: "Flipper Hat",
                        price: 2500,
                        scale: 120,
                        desc: "have more control while in water",
                        watrImm: true
                    }, {
                        id: 1,
                        name: "Marksman Cap",
                        price: 3000,
                        scale: 120,
                        desc: "increases arrow speed and range",
                        aMlt: 1.3
                    }, {
                        id: 10,
                        name: "Bush Gear",
                        price: 3000,
                        scale: 160,
                        desc: "allows you to disguise yourself as a bush"
                    }, {
                        id: 48,
                        name: "Halo",
                        price: 3000,
                        scale: 120,
                        desc: "no effect"
                    }, {
                        id: 6,
                        name: "Soldier Helmet",
                        price: 4000,
                        scale: 120,
                        desc: "reduces damage taken but slows movement",
                        spdMult: 0.94,
                        dmgMult: 0.75
                    }, {
                        id: 23,
                        name: "Anti Venom Gear",
                        price: 4000,
                        scale: 120,
                        desc: "makes you immune to poison",
                        poisonRes: 1
                    }, {
                        id: 13,
                        name: "Medic Gear",
                        price: 5000,
                        scale: 110,
                        desc: "slowly regenerates health over time",
                        healthRegen: 3
                    }, {
                        id: 9,
                        name: "Miners Helmet",
                        price: 5000,
                        scale: 120,
                        desc: "earn 1 extra gold per resource",
                        extraGold: 1
                    }, {
                        id: 32,
                        name: "Musketeer Hat",
                        price: 5000,
                        scale: 120,
                        desc: "reduces cost of projectiles",
                        projCost: 0.5
                    }, {
                        id: 7,
                        name: "Bull Helmet",
                        price: 6000,
                        scale: 120,
                        desc: "increases damage done but drains health",
                        healthRegen: -5,
                        dmgMultO: 1.5,
                        spdMult: 0.96
                    }, {
                        id: 22,
                        name: "Emp Helmet",
                        price: 6000,
                        scale: 120,
                        desc: "turrets won't attack but you move slower",
                        antiTurret: 1,
                        spdMult: 0.7
                    }, {
                        id: 12,
                        name: "Booster Hat",
                        price: 6000,
                        scale: 120,
                        desc: "increases your movement speed",
                        spdMult: 1.16
                    }, {
                        id: 26,
                        name: "Barbarian Armor",
                        price: 8000,
                        scale: 120,
                        desc: "knocks back enemies that attack you",
                        dmgK: 0.6
                    }, {
                        id: 21,
                        name: "Plague Mask",
                        price: 10000,
                        scale: 120,
                        desc: "melee attacks deal poison damage",
                        poisonDmg: 5,
                        poisonTime: 6
                    }, {
                        id: 46,
                        name: "Bull Mask",
                        price: 10000,
                        scale: 120,
                        desc: "bulls won't target you unless you attack them",
                        bullRepel: 1
                    }, {
                        id: 14,
                        name: "Windmill Hat",
                        topSprite: true,
                        price: 10000,
                        scale: 120,
                        desc: "generates points while worn",
                        pps: 1.5
                    }, {
                        id: 11,
                        name: "Spike Gear",
                        topSprite: true,
                        price: 10000,
                        scale: 120,
                        desc: "deal damage to players that damage you",
                        dmg: 0.45
                    }, {
                        id: 53,
                        name: "Turret Gear",
                        topSprite: true,
                        price: 10000,
                        scale: 120,
                        desc: "you become a walking turret",
                        turret: {
                            proj: 1,
                            range: 700,
                            rate: 2500
                        },
                        spdMult: 0.7
                    }, {
                        id: 20,
                        name: "Samurai Armor",
                        price: 12000,
                        scale: 120,
                        desc: "increased attack speed and fire rate",
                        atkSpd: 0.78
                    }, {
                        id: 58,
                        name: "Dark Knight",
                        price: 12000,
                        scale: 120,
                        desc: "restores health when you deal damage",
                        healD: 0.4
                    }, {
                        id: 27,
                        name: "Scavenger Gear",
                        price: 15000,
                        scale: 120,
                        desc: "earn double points for each kill",
                        kScrM: 2
                    }, {
                        id: 40,
                        name: "Tank Gear",
                        price: 15000,
                        scale: 120,
                        desc: "increased damage to buildings but slower movement",
                        spdMult: 0.3,
                        bDmg: 3.3
                    }, {
                        id: 52,
                        name: "Thief Gear",
                        price: 15000,
                        scale: 120,
                        desc: "steal half of a players gold when you kill them",
                        goldSteal: 0.5
                    }, {
                        id: 55,
                        name: "Bloodthirster",
                        price: 20000,
                        scale: 120,
                        desc: "Restore Health when dealing damage. And increased damage",
                        healD: 0.25,
                        dmgMultO: 1.2
                    }, {
                        id: 56,
                        name: "Assassin Gear",
                        price: 20000,
                        scale: 120,
                        desc: "Go invisible when not moving. Can't eat. Increased speed",
                        noEat: true,
                        spdMult: 1.1,
                        invisTimer: 1000
                    }];
                    this.accessories = [{
                        id: 12,
                        name: "Snowball",
                        price: 1000,
                        scale: 105,
                        xOff: 18,
                        desc: "no effect"
                    }, {
                        id: 9,
                        name: "Tree Cape",
                        price: 1000,
                        scale: 90,
                        desc: "no effect"
                    }, {
                        id: 10,
                        name: "Stone Cape",
                        price: 1000,
                        scale: 90,
                        desc: "no effect"
                    }, {
                        id: 3,
                        name: "Cookie Cape",
                        price: 1500,
                        scale: 90,
                        desc: "no effect"
                    }, {
                        id: 8,
                        name: "Cow Cape",
                        price: 2000,
                        scale: 90,
                        desc: "no effect"
                    }, {
                        id: 11,
                        name: "Monkey Tail",
                        price: 2000,
                        scale: 97,
                        xOff: 25,
                        desc: "Super speed but reduced damage",
                        spdMult: 1.35,
                        dmgMultO: 0.2
                    }, {
                        id: 17,
                        name: "Apple Basket",
                        price: 3000,
                        scale: 80,
                        xOff: 12,
                        desc: "slowly regenerates health over time",
                        healthRegen: 1
                    }, {
                        id: 6,
                        name: "Winter Cape",
                        price: 3000,
                        scale: 90,
                        desc: "no effect"
                    }, {
                        id: 4,
                        name: "Skull Cape",
                        price: 4000,
                        scale: 90,
                        desc: "no effect"
                    }, {
                        id: 5,
                        name: "Dash Cape",
                        price: 5000,
                        scale: 90,
                        desc: "no effect"
                    }, {
                        id: 2,
                        name: "Dragon Cape",
                        price: 6000,
                        scale: 90,
                        desc: "no effect"
                    }, {
                        id: 1,
                        name: "Super Cape",
                        price: 8000,
                        scale: 90,
                        desc: "no effect"
                    }, {
                        id: 7,
                        name: "Troll Cape",
                        price: 8000,
                        scale: 90,
                        desc: "no effect"
                    }, {
                        id: 14,
                        name: "Thorns",
                        price: 10000,
                        scale: 115,
                        xOff: 20,
                        desc: "no effect"
                    }, {
                        id: 15,
                        name: "Blockades",
                        price: 10000,
                        scale: 95,
                        xOff: 15,
                        desc: "no effect"
                    }, {
                        id: 20,
                        name: "Devils Tail",
                        price: 10000,
                        scale: 95,
                        xOff: 20,
                        desc: "no effect"
                    }, {
                        id: 16,
                        name: "Sawblade",
                        price: 12000,
                        scale: 90,
                        spin: true,
                        xOff: 0,
                        desc: "deal damage to players that damage you",
                        dmg: 0.15
                    }, {
                        id: 13,
                        name: "Angel Wings",
                        price: 15000,
                        scale: 138,
                        xOff: 22,
                        desc: "slowly regenerates health over time",
                        healthRegen: 3
                    }, {
                        id: 19,
                        name: "Shadow Wings",
                        price: 15000,
                        scale: 138,
                        xOff: 22,
                        desc: "increased movement speed",
                        spdMult: 1.1
                    }, {
                        id: 18,
                        name: "Blood Wings",
                        price: 20000,
                        scale: 178,
                        xOff: 26,
                        desc: "restores health when you deal damage",
                        healD: 0.2
                    }, {
                        id: 21,
                        name: "Corrupt X Wings",
                        price: 20000,
                        scale: 178,
                        xOff: 26,
                        desc: "deal damage to players that damage you",
                        dmg: 0.25
                    }];
                }
            };
            class xb {
                constructor(a, b, c, d, e, f, g, h, i) {
                    this.addProjectile = function(j, k, l, m, n, o, p, q, r, s) {
                        let t = f.projectiles[o];
                        let u;
                        for (let a = 0; a < b.length; ++a) {
                            if (!b[a].active) {
                                u = b[a];
                                break;
                            }
                        }
                        if (!u) {
                            u = new a(c, d, e, f, g, h, i);
                            u.sid = b.length;
                            b.push(u);
                        }
                        u.init(o, j, k, l, n, t.dmg, m, t.scale, p);
                        u.ignoreObj = q;
                        u.layer = r || t.layer;
                        u.inWindow = s;
                        u.src = t.src;
                        return u;
                    };
                }
            };
            class yb {
                constructor(a, b, c, d, e, f, g, h, i) {
                    this.aiTypes = [{
                        id: 0,
                        src: "cow_1",
                        killScore: 150,
                        health: 500,
                        weightM: 0.8,
                        speed: 0.00095,
                        turnSpeed: 0.001,
                        scale: 72,
                        drop: ["food", 50]
                    }, {
                        id: 1,
                        src: "pig_1",
                        killScore: 200,
                        health: 800,
                        weightM: 0.6,
                        speed: 0.00085,
                        turnSpeed: 0.001,
                        scale: 72,
                        drop: ["food", 80]
                    }, {
                        id: 2,
                        name: "Bull",
                        src: "bull_2",
                        hostile: true,
                        dmg: 20,
                        killScore: 1000,
                        health: 1800,
                        weightM: 0.5,
                        speed: 0.00094,
                        turnSpeed: 0.00074,
                        scale: 78,
                        viewRange: 800,
                        chargePlayer: true,
                        drop: ["food", 100]
                    }, {
                        id: 3,
                        name: "Bully",
                        src: "bull_1",
                        hostile: true,
                        dmg: 20,
                        killScore: 2000,
                        health: 2800,
                        weightM: 0.45,
                        speed: 0.001,
                        turnSpeed: 0.0008,
                        scale: 90,
                        viewRange: 900,
                        chargePlayer: true,
                        drop: ["food", 400]
                    }, {
                        id: 4,
                        name: "Wolf",
                        src: "wolf_1",
                        hostile: true,
                        dmg: 8,
                        killScore: 500,
                        health: 300,
                        weightM: 0.45,
                        speed: 0.001,
                        turnSpeed: 0.002,
                        scale: 84,
                        viewRange: 800,
                        chargePlayer: true,
                        drop: ["food", 200]
                    }, {
                        id: 5,
                        name: "Quack",
                        src: "chicken_1",
                        dmg: 8,
                        killScore: 2000,
                        noTrap: true,
                        health: 300,
                        weightM: 0.2,
                        speed: 0.0018,
                        turnSpeed: 0.006,
                        scale: 70,
                        drop: ["food", 100]
                    }, {
                        id: 6,
                        name: "MOOSTAFA",
                        nameScale: 50,
                        src: "enemy",
                        hostile: true,
                        dontRun: true,
                        fixedSpawn: true,
                        spawnDelay: 60000,
                        noTrap: true,
                        colDmg: 100,
                        dmg: 40,
                        killScore: 8000,
                        health: 18000,
                        weightM: 0.4,
                        speed: 0.0007,
                        turnSpeed: 0.01,
                        scale: 80,
                        spriteMlt: 1.8,
                        leapForce: 0.9,
                        viewRange: 1000,
                        hitRange: 210,
                        hitDelay: 1000,
                        chargePlayer: true,
                        drop: ["food", 100]
                    }, {
                        id: 7,
                        name: "Treasure",
                        hostile: true,
                        nameScale: 35,
                        src: "crate_1",
                        fixedSpawn: true,
                        spawnDelay: 120000,
                        colDmg: 200,
                        killScore: 5000,
                        health: 20000,
                        weightM: 0.1,
                        speed: 0,
                        turnSpeed: 0,
                        scale: 70,
                        spriteMlt: 1
                    }, {
                        id: 8,
                        name: "MOOFIE",
                        src: "wolf_2",
                        hostile: true,
                        fixedSpawn: true,
                        dontRun: true,
                        hitScare: 4,
                        spawnDelay: 30000,
                        noTrap: true,
                        nameScale: 35,
                        dmg: 10,
                        colDmg: 100,
                        killScore: 3000,
                        health: 7000,
                        weightM: 0.45,
                        speed: 0.0015,
                        turnSpeed: 0.002,
                        scale: 90,
                        viewRange: 800,
                        chargePlayer: true,
                        drop: ["food", 1000]
                    }];
                    this.spawn = function(j, k, l, m) {
                        let n = a.find(a => !a.active);
                        if (!n) {
                            n = new b(a.length, e, c, d, g, f, h, i);
                            a.push(n);
                        }
                        n.init(j, k, l, m, this.aiTypes[m]);
                        return n;
                    };
                }
            };
            class zb {
                constructor(a, b, c, d, e, f, g, h) {
                    this.sid = a;
                    this.isAI = true;
                    this.nameIndex = e.randInt(0, f.cowNames.length - 1);
                    this.init = function(a, b, c, d, e) {
                        this.x = a;
                        this.y = b;
                        this.startX = e.fixedSpawn ? a : null;
                        this.startY = e.fixedSpawn ? b : null;
                        this.xVel = 0;
                        this.yVel = 0;
                        this.zIndex = 0;
                        this.dir = c;
                        this.dirPlus = 0;
                        this.index = d;
                        this.src = e.src;
                        if (e.name) {
                            this.name = e.name;
                        }
                        this.weightM = e.weightM;
                        this.speed = e.speed;
                        this.killScore = e.killScore;
                        this.turnSpeed = e.turnSpeed;
                        this.scale = e.scale;
                        this.maxHealth = e.health;
                        this.leapForce = e.leapForce;
                        this.health = this.maxHealth;
                        this.chargePlayer = e.chargePlayer;
                        this.viewRange = e.viewRange;
                        this.drop = e.drop;
                        this.dmg = e.dmg;
                        this.hostile = e.hostile;
                        this.dontRun = e.dontRun;
                        this.hitRange = e.hitRange;
                        this.hitDelay = e.hitDelay;
                        this.hitScare = e.hitScare;
                        this.spriteMlt = e.spriteMlt;
                        this.nameScale = e.nameScale;
                        this.colDmg = e.colDmg;
                        this.noTrap = e.noTrap;
                        this.spawnDelay = e.spawnDelay;
                        this.hitWait = 0;
                        this.waitCount = 1000;
                        this.moveCount = 0;
                        this.targetDir = 0;
                        this.active = true;
                        this.alive = true;
                        this.runFrom = null;
                        this.chargeTarget = null;
                        this.dmgOverTime = {};
                    };
                    let i = 0;
                    let j = 0;
                    this.animate = function(a) {
                        if (this.animTime > 0) {
                            this.animTime -= a;
                            if (this.animTime <= 0) {
                                this.animTime = 0;
                                this.dirPlus = 0;
                                i = 0;
                                j = 0;
                            } else if (j == 0) {
                                i += a / (this.animSpeed * f.hitReturnRatio);
                                this.dirPlus = e.lerp(0, this.targetAngle, Math.min(1, i));
                                if (i >= 1) {
                                    i = 1;
                                    j = 1;
                                }
                            } else {
                                i -= a / (this.animSpeed * (1 - f.hitReturnRatio));
                                this.dirPlus = e.lerp(0, this.targetAngle, Math.max(0, i));
                            }
                        }
                    };
                    this.startAnim = function() {
                        this.animTime = this.animSpeed = 600;
                        this.targetAngle = Math.PI * 0.8;
                        i = 0;
                        j = 0;
                    };
                }
            };
            class Ab {
                constructor(a, b, c, d) {
                    this.x = a;
                    this.y = b;
                    this.alpha = 0;
                    this.active = true;
                    this.alive = false;
                    this.chat = c;
                    this.owner = d;
                }
            };
            class Bb {
                constructor(a, b, c, d, e, f, g, h, i) {
                    this.x = a;
                    this.y = b;
                    this.lastDir = c;
                    this.dir = c + Math.PI;
                    this.buildIndex = d;
                    this.weaponIndex = e;
                    this.weaponVariant = f;
                    this.skinColor = g;
                    this.scale = h;
                    this.visScale = 0;
                    this.name = i;
                    this.alpha = 1;
                    this.active = true;
                    this.animate = function(a) {
                        let b = rc.getAngleDist(this.lastDir, this.dir);
                        if (b > 0.01) {
                            this.dir += b / 20;
                        } else {
                            this.dir = this.lastDir;
                        }
                        if (this.visScale < this.scale) {
                            this.visScale += a / (this.scale / 2);
                            if (this.visScale >= this.scale) {
                                this.visScale = this.scale;
                            }
                        }
                        this.alpha -= a / 30000;
                        if (this.alpha <= 0) {
                            this.alpha = 0;
                            this.active = false;
                        }
                    };
                }
            };
            class Cb {
                constructor(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
                    this.id = a;
                    this.sid = b;
                    this.tmpScore = 0;
                    this.team = null;
                    this.latestSkin = 0;
                    this.oldSkinIndex = 0;
                    this.skinIndex = 0;
                    this.latestTail = 0;
                    this.oldTailIndex = 0;
                    this.tailIndex = 0;
                    this.hitTime = 0;
                    this.lastHit = 0;
                    this.tails = {};
                    for (let o = 0; o < k.length; ++o) {
                        if (k[o].price <= 0) {
                            this.tails[k[o].id] = 1;
                        }
                    }
                    this.skins = {};
                    for (let o = 0; o < j.length; ++o) {
                        if (j[o].price <= 0) {
                            this.skins[j[o].id] = 1;
                        }
                    }
                    this.points = 0;
                    this.dt = 0;
                    this.hidden = false;
                    this.itemCounts = {};
                    this.isPlayer = true;
                    this.pps = 0;
                    this.moveDir = undefined;
                    this.randDIff = Math.random * Math.PI * 2;
                    this.skinRot = 0;
                    this.lastPing = 0;
                    this.iconIndex = 0;
                    this.skinColor = 0;
                    this.dist2 = 0;
                    this.aim2 = 0;
                    this.maxSpeed = 1;
                    this.chat = {
                        message: null,
                        count: 0
                    };
                    this.backupNobull = true;
                    this.circle = false;
                    this.circleRad = 200;
                    this.circleRadSpd = 0.1;
                    this.cAngle = 0;
                    this.spawn = function(a) {
                        this.attacked = false;
                        this.death = false;
                        this.spinDir = 0;
                        this.sync = false;
                        this.antiBull = 0;
                        this.bullTimer = 0;
                        this.poisonTimer = 0;
                        this.active = true;
                        this.alive = true;
                        this.lockMove = false;
                        this.lockDir = false;
                        this.minimapCounter = 0;
                        this.chatCountdown = 0;
                        this.shameCount = 0;
                        this.maxShameCount = 0;
                        this.deathDir = Math.random() * Math.PI * 2;
                        this.shameTimer = 0;
                        this.sentTo = {};
                        this.gathering = 0;
                        this.gatherIndex = 0;
                        this.shooting = {};
                        this.shootIndex = 9;
                        this.autoGather = 0;
                        this.animTime = 0;
                        this.animSpeed = 0;
                        this.mouseState = 0;
                        this.buildIndex = -1;
                        this.weaponIndex = 0;
                        this.weaponCode = 0;
                        this.weaponVariant = 0;
                        this.primaryIndex = undefined;
                        this.secondaryIndex = undefined;
                        this.dmgOverTime = {};
                        this.noMovTimer = 0;
                        this.maxXP = 300;
                        this.XP = 0;
                        this.age = 1;
                        this.kills = 0;
                        this.upgrAge = 2;
                        this.upgradePoints = 0;
                        this.x = 0;
                        this.y = 0;
                        this.oldXY = {
                            x: 0,
                            y: 0
                        };
                        this.zIndex = 0;
                        this.xVel = 0;
                        this.yVel = 0;
                        this.slowMult = 1;
                        this.dir = 0;
                        this.dirPlus = 0;
                        this.targetDir = 0;
                        this.targetAngle = 0;
                        this.maxHealth = 100;
                        this.health = this.maxHealth;
                        this.oldHealth = this.maxHealth;
                        this.damaged = 0;
                        this.scale = c.playerScale;
                        this.speed = c.playerSpeed;
                        this.resetMoveDir();
                        this.resetResources(a);
                        this.items = [0, 3, 6, 10];
                        this.weapons = [0];
                        this.shootCount = 0;
                        this.weaponXP = [];
                        this.reloads = {
                            0: 0,
                            1: 0,
                            2: 0,
                            3: 0,
                            4: 0,
                            5: 0,
                            6: 0,
                            7: 0,
                            8: 0,
                            9: 0,
                            10: 0,
                            11: 0,
                            12: 0,
                            13: 0,
                            14: 0,
                            15: 0,
                            53: 0
                        };
                        this.bowThreat = {
                            9: 0,
                            12: 0,
                            13: 0,
                            15: 0
                        };
                        this.damageThreat = 0;
                        this.inTrap = false;
                        this.canEmpAnti = false;
                        this.empAnti = false;
                        this.soldierAnti = false;
                        this.poisonTick = 0;
                        this.bullTick = 0;
                        this.setPoisonTick = false;
                        this.setBullTick = false;
                        this.antiTimer = 4;
                    };
                    this.resetMoveDir = function() {
                        this.moveDir = undefined;
                    };
                    this.resetResources = function(a) {
                        for (let b = 0; b < c.resourceTypes.length; ++b) {
                            this[c.resourceTypes[b]] = a ? 100 : 0;
                        }
                    };
                    this.getItemType = function(a) {
                        let b = this.items.findIndex(b => b == a);
                        if (b != -1) {
                            return b;
                        } else {
                            return i.checkItem.index(a, this.items);
                        }
                    };
                    this.setData = function(a) {
                        this.id = a[0];
                        this.sid = a[1];
                        this.name = a[2];
                        this.x = a[3];
                        this.y = a[4];
                        this.dir = a[5];
                        this.health = a[6];
                        this.maxHealth = a[7];
                        this.scale = a[8];
                        this.skinColor = a[9];
                    };
                    this.updateTimer = function() {
                        this.bullTimer -= 1;
                        if (this.bullTimer <= 0) {
                            this.setBullTick = false;
                            this.bullTick = O.tick - 1;
                            this.bullTimer = c.serverUpdateRate;
                        }
                        this.poisonTimer -= 1;
                        if (this.poisonTimer <= 0) {
                            this.setPoisonTick = false;
                            this.poisonTick = O.tick - 1;
                            this.poisonTimer = c.serverUpdateRate;
                        }
                    };
                    this.update = function(a) {
                        if (this.alive) {
                            if (this.health != this.healthMov) {
                                if (this.health < this.healthMov) {
                                    this.healthMov -= 2;
                                } else {
                                    this.healthMov += 2;
                                }
                                if (Math.abs(this.health - this.healthMov) < 2) {
                                    this.healthMov = this.health;
                                }
                            };
                            if (this.shameCount != this.shameMov) {
                                if (this.shameCount < this.shameMov) {
                                    this.shameMov -= 0.1;
                                } else {
                                    this.shameMov += 0.1;
                                }
                                if (Math.abs(this.shameCount - this.shameMov) < 0.1) {
                                    this.shameMov = this.shameCount;
                                }
                            }
                        }
                        if (this.sid == ga) {
                            this.circleRad = parseInt(t("circleRad").value) || 0;
                            this.circleRadSpd = parseFloat(t("radSpeed").value) || 0;
                            this.cAngle += this.circleRadSpd;
                        }
                        if (this.active) {
                            let a = {
                                skin: ma(j, this.skinIndex),
                                tail: ma(k, this.tailIndex)
                            };
                            let b = (this.buildIndex >= 0 ? 0.5 : 1) * (i.weapons[this.weaponIndex].spdMult || 1) * (a.skin ? a.skin.spdMult || 1 : 1) * (a.tail ? a.tail.spdMult || 1 : 1) * (this.y <= c.snowBiomeTop ? a.skin && a.skin.coldM ? 1 : c.snowSpeed : 1) * this.slowMult;
                            this.maxSpeed = b;
                        }
                    };
                    let o = 0;
                    let p = 0;
                    this.animate = function(a) {
                        if (this.animTime > 0) {
                            this.animTime -= a;
                            if (this.animTime <= 0) {
                                this.animTime = 0;
                                this.dirPlus = 0;
                                o = 0;
                                p = 0;
                            } else if (p == 0) {
                                o += a / (this.animSpeed * c.hitReturnRatio);
                                this.dirPlus = d.lerp(0, this.targetAngle, Math.min(1, o));
                                if (o >= 1) {
                                    o = 1;
                                    p = 1;
                                }
                            } else {
                                o -= a / (this.animSpeed * (1 - c.hitReturnRatio));
                                this.dirPlus = d.lerp(0, this.targetAngle, Math.max(0, o));
                            }
                        }
                    };
                    this.startAnim = function(a, b) {
                        this.animTime = this.animSpeed = i.weapons[b].speed;
                        this.targetAngle = a ? -c.hitAngle : -Math.PI;
                        o = 0;
                        p = 0;
                    };
                    this.canSee = function(a) {
                        if (!a) {
                            return false;
                        }
                        let b = Math.abs(a.x - this.x) - a.scale;
                        let d = Math.abs(a.y - this.y) - a.scale;
                        return b <= c.maxScreenWidth / 2 * 1.3 && d <= c.maxScreenHeight / 2 * 1.3;
                    };
                    this.judgeShame = function() {
                        if (this.oldHealth < this.health) {
                            if (this.hitTime) {
                                let a = Date.now() - this.hitTime;
                                this.lastHit = O.tick;
                                this.hitTime = 0;
                                if (a < 120) {
                                    this.shameCount++;
                                } else {
                                    this.shameCount = Math.max(0, this.shameCount - 2);
                                }
                            }
                        } else if (this.oldHealth > this.health) {
                            this.hitTime = Date.now();
                        }
                    };
                    this.addShameTimer = function() {
                        this.shameCount = 0;
                        this.shameTimer = 30;
                        let a = setInterval(() => {
                            this.shameTimer--;
                            if (this.shameTimer <= 0) {
                                clearInterval(a);
                            }
                        }, 1000);
                    };
                    this.isTeam = function(a) {
                        return this == a || this.team && this.team == a.team;
                    };
                    this.findAllianceBySid = function(a) {
                        if (this.team) {
                            return aa.find(b => b === a);
                        } else {
                            return null;
                        }
                    };
                    this.checkCanInsta = function(a) {
                        let b = 0;
                        if (this.alive && jb) {
                            let d = {
                                weapon: this.weapons[0],
                                variant: this.primaryVariant,
                                dmg: this.weapons[0] == undefined ? 0 : i.weapons[this.weapons[0]].dmg
                            };
                            let e = {
                                weapon: this.weapons[1],
                                variant: this.secondaryVariant,
                                dmg: this.weapons[1] == undefined ? 0 : i.weapons[this.weapons[1]].Pdmg
                            };
                            let f = this.skins[7] && !a ? 1.5 : 1;
                            let g = d.variant != undefined ? c.weaponVariants[d.variant].val : 1;
                            if (d.weapon != undefined && this.reloads[d.weapon] == 0) {
                                b += d.dmg * g * f;
                            }
                            if (e.weapon != undefined && this.reloads[e.weapon] == 0) {
                                b += e.dmg;
                            }
                            if (this.skins[53] && this.reloads[53] <= (fa.weapons[1] == 10 ? 0 : O.tickRate) && ka.skinIndex != 22) {
                                b += 25;
                            }
                            b *= ka.skinIndex == 6 ? 0.75 : 1;
                            return b;
                        }
                        return 0;
                    };
                    this.manageReload = function() {
                        if (this.shooting[53]) {
                            this.shooting[53] = 0;
                            this.reloads[53] = 2500 - O.tickRate;
                        } else if (this.reloads[53] > 0) {
                            this.reloads[53] = Math.max(0, this.reloads[53] - O.tickRate);
                        }
                        if (this.gathering || this.shooting[1]) {
                            if (this.gathering) {
                                this.gathering = 0;
                                this.reloads[this.gatherIndex] = i.weapons[this.gatherIndex].speed * (this.skinIndex == 20 ? 0.78 : 1);
                                this.attacked = true;
                            }
                            if (this.shooting[1]) {
                                this.shooting[1] = 0;
                                this.reloads[this.shootIndex] = i.weapons[this.shootIndex].speed * (this.skinIndex == 20 ? 0.78 : 1);
                                this.attacked = true;
                            }
                        } else {
                            this.attacked = false;
                            if (this.buildIndex < 0) {
                                if (this.reloads[this.weaponIndex] > 0) {
                                    this.reloads[this.weaponIndex] = Math.max(0, this.reloads[this.weaponIndex] - O.tickRate);
                                    if (this == fa) {
                                        if (t("weaponGrind").checked) {
                                            for (let a = 0; a < Math.PI * 2; a += Math.PI / 2) {
                                                Vb(fa.getItemType(22), a);
                                            }
                                        }
                                    }
                                    if (this.reloads[this.primaryIndex] == 0 && this.reloads[this.weaponIndex] == 0) {
                                        this.antiBull++;
                                        O.tickBase(() => {
                                            this.antiBull = 0;
                                        }, 1);
                                    }
                                }
                            }
                        }
                    };
                    this.addDamageThreat = function(a) {
                        let b = {
                            weapon: this.primaryIndex,
                            variant: this.primaryVariant
                        };
                        b.dmg = b.weapon == undefined ? 45 : i.weapons[b.weapon].dmg;
                        let d = {
                            weapon: this.secondaryIndex,
                            variant: this.secondaryVariant
                        };
                        d.dmg = d.weapon == undefined ? 50 : i.weapons[d.weapon].Pdmg;
                        let e = 1.5;
                        let f = b.variant != undefined ? c.weaponVariants[b.variant].val : 1.18;
                        let g = d.variant != undefined ? [9, 12, 13, 15].includes(d.weapon) ? 1 : c.weaponVariants[d.variant].val : 1.18;
                        if (b.weapon == undefined ? true : this.reloads[b.weapon] == 0) {
                            this.damageThreat += b.dmg * f * e;
                        }
                        if (d.weapon == undefined ? true : this.reloads[d.weapon] == 0) {
                            this.damageThreat += d.dmg * g;
                        }
                        if (this.reloads[53] <= O.tickRate) {
                            this.damageThreat += 25;
                        }
                        this.damageThreat *= a.skinIndex == 6 ? 0.75 : 1;
                        if (!this.isTeam(a)) {
                            if (this.dist2 <= 300) {
                                a.damageThreat += this.damageThreat;
                            }
                        }
                    };
                }
            };

            function Db(a) {
                fa.reloads[a] = 0;
                T("H", a);
            }

            function Eb(a, b) {
                T("c", 0, a, b);
            }

            function Fb(a, b) {
                T("c", 1, a, b);
            }

            function Gb(a, b) {
                let c = fa.skins[6] ? 6 : 0;
                if (fa.alive && jb) {
                    if (b == 0) {
                        if (fa.skins[a]) {
                            if (fa.latestSkin != a) {
                                T("c", 0, a, 0);
                            }
                        } else if (n.autoBuyEquip) {
                            let b = ma(vc, a);
                            if (b) {
                                if (fa.points >= b.price) {
                                    T("c", 1, a, 0);
                                    T("c", 0, a, 0);
                                } else if (fa.latestSkin != c) {
                                    T("c", 0, c, 0);
                                }
                            } else if (fa.latestSkin != c) {
                                T("c", 0, c, 0);
                            }
                        } else if (fa.latestSkin != c) {
                            T("c", 0, c, 0);
                        }
                    } else if (b == 1) {
                        if (t("visualType").value == "ae" && a != 11 && a != 0) {
                            if (fa.latestTail != 0) {
                                T("c", 0, 0, 1);
                            }
                            return;
                        }
                        if (fa.tails[a]) {
                            if (fa.latestTail != a) {
                                T("c", 0, a, 1);
                            }
                        } else if (n.autoBuyEquip) {
                            let b = ma(wc, a);
                            if (b) {
                                if (fa.points >= b.price) {
                                    T("c", 1, a, 1);
                                    T("c", 0, a, 1);
                                } else if (fa.latestTail != 0) {
                                    T("c", 0, 0, 1);
                                }
                            } else if (fa.latestTail != 0) {
                                T("c", 0, 0, 1);
                            }
                        } else if (fa.latestTail != 0) {
                            T("c", 0, 0, 1);
                        }
                    }
                }
            }

            function Hb(a, b) {
                T("G", a, b);
            }

            function Ib(a, b) {
                if (!b) {
                    fa.weaponCode = a;
                }
                T("G", a, 1);
            }

            function Jb() {
                T("K", 1, 1);
            }

            function Kb(a, b) {
                T("d", a, b, 1);
            }

            function Lb(a) {
                let b = a % 360 * (Math.PI / 180);
                if (b < 0) {
                    return Math.PI * 2 + b;
                } else {
                    return b;
                }
            }

            function Mb(b, c, d) {
                try {
                    if (b == undefined) {
                        return;
                    }
                    let e = sc.list[fa.items[b]];
                    let f = fa.scale + e.scale + (e.placeOffset || 0);
                    let g = fa.x2 + f * Math.cos(c);
                    let h = fa.y2 + f * Math.sin(c);
                    if (b === 0 || r || (fa.alive && jb && fa.itemCounts[e.group.id] == undefined ? true : fa.itemCounts[e.group.id] < (a.isSandbox ? b === 3 || b === 5 ? 299 : 99 : e.group.limit ? e.group.limit : 99))) {
                        Hb(fa.items[b]);
                        Kb(1, c);
                        Ib(fa.weaponCode, 1);
                        if (d && t("placeVis").checked) {
                            ob.push({
                                x: g,
                                y: h,
                                name: e.name,
                                scale: e.scale,
                                dir: c
                            });
                            O.tickBase(() => {
                                ob.shift();
                            }, 1);
                        }
                    }
                } catch (a) {}
            }

            function Nb(a, b) {
                try {
                    return Math.hypot((b.y2 || b.y) - (a.y2 || a.y), (b.x2 || b.x) - (a.x2 || a.x));
                } catch (a) {
                    return Infinity;
                }
            }

            function Ob(a, b) {
                try {
                    return Math.atan2((b.y2 || b.y) - (a.y2 || a.y), (b.x2 || b.x) - (a.x2 || a.x));
                } catch (a) {
                    return 0;
                }
            }

            function Pb(a, b) {
                b = typeof b == "function" ? b : a => {
                    return a;
                };
                return a.sort((a, c) => b(a) - b(c));
            }

            function Qb() {
                let a = [];
                let b = {};
                let c = tc.getGridArrays(fa.x, fa.y, 200);
                for (var d = 0; d < c.length; ++d) {
                    for (var e = 0; e < c[d].length; ++e) {
                        if (c[d][e].active) {
                            a.push(c[d][e]);
                        }
                    }
                }
                return a;
            }

            function Rb(b, c) {
                try {
                    let b = [];
                    let d = [];
                    for (let a = 0; a < 72; a++) {
                        b.push(Lb(a * 5));
                    }
                    let e = Pb(ba.filter(a => a.active && a.sid != fa.inTrap.sid && Nb(fa, a) <= 150), a => {
                        return Nb(fa, a);
                    });
                    let f = null;
                    for (let g of b) {
                        let b = fa.buildItemPosition(c, g);
                        let h = true;
                        if (c.id != 18 && b.y >= a.mapScale / 2 - a.riverWidth / 2 && b.y <= a.mapScale / 2 + a.riverWidth / 2) {
                            h = false;
                        } else if (f && Nb(f, b) < c.scale + (f.blocker ? f.blocker : f.getScale(0.6, f.isItem))) {
                            h = false;
                        } else {
                            for (let a of e) {
                                let d = a.blocker ? a.blocker : a.getScale(0.6, a.isItem);
                                if (Nb(a, b) < c.scale + d) {
                                    h = false;
                                    f = a;
                                    break;
                                }
                            }
                        }
                        if (h) {
                            d.push(g);
                        }
                    }
                    return d;
                } catch (a) {}
            }

            function Sb(b, c) {
                try {
                    let b = [];
                    let d = [];
                    for (let a = 0; a < 72; a++) {
                        b.push(Lb(a * 5));
                    }
                    let e = [];
                    if (!window.isMohMoh) {
                        e = Pb(ba.filter(a => a.active && Nb(fa, a) <= 150), a => {
                            return Nb(fa, a);
                        });
                    }
                    let f = null;
                    for (let g of b) {
                        let b = fa.buildItemPosition(c, g);
                        let h = true;
                        if (c.id != 18 && b.y >= a.mapScale / 2 - a.riverWidth / 2 && b.y <= a.mapScale / 2 + a.riverWidth / 2) {
                            h = true;
                        } else if (f && Nb(f, b) < c.scale + (f.blocker ? f.blocker : f.getScale(0.6, f.isItem))) {
                            h = true;
                        } else if (true) {
                            for (let a of e) {
                                let d = a.blocker ? a.blocker : a.getScale(0.6, a.isItem);
                                if (Nb(a, b) < c.scale + d) {
                                    h = false;
                                    f = a;
                                    break;
                                }
                            }
                        }
                        if (h) {
                            d.push(g);
                        }
                    }
                    return d;
                } catch (a) {}
            }
            let Tb = false;

            function Ub(a, b) {
                Vb(a, b);
            };

            function Vb(a, b) {
                try {
                    if (K.count >= 120) {
                        return;
                    }
                    let c = sc.list[fa.items[a]];
                    let d = fa.scale + c.scale + (c.placeOffset || 0);
                    let e = fa.x2 + d * Math.cos(b);
                    let f = fa.y2 + d * Math.sin(b);
                    if (tc.checkItemLocation(e, f, c.scale, 0.6, c.id, false, fa)) {
                        Mb(a, b, 1);
                    }
                } catch (a) {}
            }

            function Wb() {
                if (fa.latestSkin == 6) {
                    return 0.75;
                } else {
                    return 1;
                }
            }

            function Xb(a) {
                let b = ia.filter(b => {
                    let c = new pc(sc);
                    let d = c.weapons[b.weaponIndex];
                    let e = b.weaponIndex < 9 ? [d[0], d[1], d[2], d[3]] : [d[0], d[1]];
                    let f = {
                        one: b.dist2 <= 300,
                        two: e.includes(a),
                        three: b.attacked
                    };
                    return f.one && f.two && f.three;
                });
                return b;
            }

            function Yb() {
                for (let a = 0; a < $b(); a++) {
                    Mb(0, cd());
                }
            }

            function Zb(a) {
                if (fa.health == 100) {
                    return 0;
                }
                if (fa.skinIndex != 45 && fa.skinIndex != 56) {
                    return Math.ceil(a / sc.list[fa.items[0]].healing);
                    return Math.ceil(a / sc.list[fa.items[0]].healing);
                }
                return 0;
            }

            function $b() {
                if (fa.health == 100) {
                    return 0;
                }
                if (fa.skinIndex != 45 && fa.skinIndex != 56) {
                    return Math.ceil((100 - fa.health) / sc.list[fa.items[0]].healing);
                    return Math.ceil((100 - fa.health) / sc.list[fa.items[0]].healing);
                }
                return 0;
            }

            function _b(a) {
                if (a * fa.skinIndex == 6) {
                    return 0.75;
                } else {
                    return 1;
                }
            }

            function ac() {}

            function bc(a) {
                la.antiSync = true;
                let b = setInterval(() => {
                    if (fa.shameCount < 5) {
                        Mb(0, cd());
                    }
                }, 75);
                setTimeout(() => {
                    clearInterval(b);
                    setTimeout(() => {
                        la.antiSync = false;
                    }, O.tickRate);
                }, O.tickRate);
            }
            const cc = new Set();
            const dc = new Set();

            function ec(a) {
                const b = fa.x2;
                const c = fa.y2;
                const d = Math.hypot(a[0] - b, a[1] - c);
                return d > 35;
            }

            function fc(a) {
                if (fa.team) {
                    return aa.find(b => b === a);
                } else {
                    return null;
                }
            }

            function gc(a, b, c) {
                const d = [];
                const e = 16;
                for (let f = 0; f < e; f++) {
                    const g = Math.PI * 2 * f / e;
                    const h = a + c * Math.cos(g);
                    const i = b + c * Math.sin(g);
                    const j = [h, i];
                    if (!d.some(a => hc(j, a))) {
                        d.push(j);
                    }
                }
                return d;
            }

            function hc(a, b, c = 50) {
                const d = Math.hypot(a[0] - b[0], a[1] - b[1]);
                return d < c;
            }

            function ic(b, c) {
                if (fa.y2 >= a.mapScale / 2 - a.riverWidth / 2 && fa.y2 <= a.mapScale / 2 + a.riverWidth / 2) {
                    if (c) {
                        return 31;
                    }
                    Gb(31, 0);
                } else if (fa.y2 <= a.snowBiomeTop) {
                    if (c) {
                        if (b && fa.moveDir == undefined) {
                            return 22;
                        } else {
                            return 15;
                        }
                    }
                    Gb(b && fa.moveDir == undefined ? 22 : 15, 0);
                } else {
                    if (c) {
                        if (b && fa.moveDir == undefined) {
                            return 22;
                        } else {
                            return 6;
                        }
                    }
                    Gb(b && fa.moveDir == undefined ? 22 : 6, 0);
                }
                if (c) {
                    return 0;
                }
            }

            function jc(a) {
                Gb(a && fa.moveDir == undefined ? 0 : 11, 1);
            }
            let kc = [];
            class lc {
                constructor(b, c) {
                    this.dist = 0;
                    this.aim = 0;
                    this.inTrap = false;
                    this.replaced = false;
                    this.antiTrapped = false;
                    this.info = {};
                    this.notFast = function() {
                        return fa.weapons[1] == 10 && (this.info.health > c.weapons[fa.weapons[0]].dmg || fa.weapons[0] == 5);
                    };
                    this.testCanPlace = function(d, e = undefined, f = undefined, g = undefined, h, i, j) {
                        if (e === undefined) e = -(Math.PI / 2);
                        if (f === undefined) f = Math.PI / 2;
                        if (g === undefined) g = Math.PI / 18;
                        try {
                            let k = c.list[fa.items[d]];
                            let l = fa.scale + k.scale + (k.placeOffset || 0);
                            let m = {
                                attempts: 0,
                                placed: 0
                            };
                            let o = [];
                            ba.forEach(a => {
                                o.push({
                                    x: a.x,
                                    y: a.y,
                                    active: a.active,
                                    blocker: a.blocker,
                                    scale: a.scale,
                                    isItem: a.isItem,
                                    type: a.type,
                                    colDiv: a.colDiv,
                                    getScale: function(a, b) {
                                        a = a || 1;
                                        return this.scale * (this.isItem || this.type == 2 || this.type == 3 || this.type == 4 ? 1 : a * 0.6) * (b ? 1 : this.colDiv);
                                    }
                                });
                            });
                            for (let c = e; c < f; c += g) {
                                m.attempts++;
                                let e = h + c;
                                let f = fa.x2 + l * Math.cos(e);
                                let g = fa.y2 + l * Math.sin(e);
                                let n = o.find(a => a.active && b.getDistance(f, g, a.x, a.y) < k.scale + (a.blocker ? a.blocker : a.getScale(0.6, a.isItem)));
                                if (n) {
                                    continue;
                                }
                                if (k.id != 18 && g >= a.mapScale / 2 - a.riverWidth / 2 && g <= a.mapScale / 2 + a.riverWidth / 2) {
                                    continue;
                                }
                                if (!i && j || t("visualType").value == "ae") {
                                    if (j.inTrap) {
                                        if (b.getAngleDist(ka.aim2 + Math.PI, e + Math.PI) <= Math.PI) {
                                            Mb(4, e, 1);
                                        } else if (fa.items[4] == 15) {
                                            Mb(4, e, 1);
                                        }
                                    } else if (b.getAngleDist(ka.aim2, e) <= a.gatherAngle / 1.5) {
                                        Mb(2, e, 1);
                                    } else if (fa.items[4] == 15) {
                                        Mb(4, e, 1);
                                    }
                                } else {
                                    Mb(d, e, 1);
                                }
                                o.push({
                                    x: f,
                                    y: g,
                                    active: true,
                                    blocker: k.blocker,
                                    scale: k.scale,
                                    isItem: true,
                                    type: null,
                                    colDiv: k.colDiv,
                                    getScale: function() {
                                        return this.scale;
                                    }
                                });
                                if (b.getAngleDist(ka.aim2, e) <= 1) {
                                    m.placed++;
                                }
                            }
                            if (m.placed > 0 && i && k.dmg) {
                                if (ka.dist2 <= c.weapons[fa.weapons[0]].range + fa.scale * 1.8 && n.spikeTick) {
                                    Bc.canSpikeTick = true;
                                }
                            }
                        } catch (a) {}
                    };
                    this.checkSpikeTick = function() {
                        try {
                            if (![3, 4, 5].includes(ka.primaryIndex)) {
                                return false;
                            }
                            if (ka.primaryIndex == undefined ? true : ka.reloads[ka.primaryIndex] > O.tickRate) {
                                return false;
                            }
                            if (ka.dist2 <= c.weapons[ka.primaryIndex || 5].range + ka.scale * 1.8) {
                                let d = c.list[9];
                                let e = ka.scale + d.scale + (d.placeOffset || 0);
                                let f = 0;
                                let g = {
                                    attempts: 0,
                                    block: "unblocked"
                                };
                                for (let c = -1; c <= 1; c += 1 / 10) {
                                    g.attempts++;
                                    let h = b.getDirect(fa, ka, 2, 2) + c;
                                    let i = ka.x2 + e * Math.cos(h);
                                    let j = ka.y2 + e * Math.sin(h);
                                    let k = ba.find(a => a.active && b.getDistance(i, j, a.x, a.y) < d.scale + (a.blocker ? a.blocker : a.getScale(0.6, a.isItem)));
                                    if (k) {
                                        continue;
                                    }
                                    if (j >= a.mapScale / 2 - a.riverWidth / 2 && j <= a.mapScale / 2 + a.riverWidth / 2) {
                                        continue;
                                    }
                                    f++;
                                    g.block = "blocked";
                                    break;
                                }
                                if (f) {
                                    la.anti0Tick = 1;
                                    fa.chat.message = "Anti SpikeTick " + ka.sid;
                                    fa.chat.count = 2000;
                                    return true;
                                }
                            }
                        } catch (a) {
                            return null;
                        }
                        return false;
                    };
                    this.protect = function(a, b) {
                        if (!n.antiTrap) {
                            return;
                        }
                        console.log(b);
                        if (ja.length) {
                            if (Nb(ka, fa) > Nb(ka, b)) {
                                for (let a = -(Math.PI / 2); a < Math.PI / 2; a += Math.PI / 18) {
                                    Vb(2, ka.aim2 + a);
                                }
                            }
                            if (Nb(ka, b) > Nb(ka, fa)) {
                                if (fa.items[4]) {
                                    for (let a = -(Math.PI / 2); a < Math.PI / 2; a += Math.PI / 18) {
                                        Vb(4, ka.aim2 + a);
                                    }
                                } else {
                                    for (let a = -(Math.PI / 2); a < Math.PI / 2; a += Math.PI / 18) {
                                        Vb(2, ka.aim2 + a);
                                    }
                                }
                            }
                        }
                    };
                    this.autoPlace = function() {
                        try {
                            const a = ka.dist2;
                            const c = ba.filter(a => a.trap && a.active).sort((a, c) => b.getDist(a, ka, 0, 2) - b.getDist(c, ka, 0, 2)).find(a => {
                                const b = Math.hypot(a.y - ka.y2, a.x - ka.x2);
                                return a !== fa && (fa.sid === a.owner.sid || fc(a.owner.sid)) && b <= ka.scale * 1.8;
                            });
                            if (c && ka.dist2 <= 200) {
                                Vb(2, Math.atan2(fa.y - c.y, fa.x - c.x) + Math.PI);
                            } else if (!c && a <= 300) {
                                if (a < 200) {
                                    for (let a = -55; a < 55; a += 55) {
                                        Vb(2, ka.aim2 + _d(a));
                                    }
                                }
                                if (a >= 200) {
                                    for (let a = -90; a < 270; a += 90) {
                                        Vb(4, ka.aim2 + _d(a));
                                    }
                                }
                            }
                        } catch (a) {}
                    };

                    function d(a, b, c, d) {
                        return Math.atan2(d - b, c - a);
                    }

                    function e(a) {
                        const b = 20;
                        return a.health < 300;
                    }
                    this.replacer = function(a) {
                        if (!a || !n.autoReplace) {
                            return;
                        }
                        if (!jb) {
                            return;
                        }
                        if (this.antiTrapped) {
                            return;
                        }
                        O.tickBase(() => {
                            let f = b.getDirect(a, fa, 0, 2);
                            let g = b.getDist(a, fa, 0, 2);
                            let h = d(a.x, a.y, fa.x, fa.y);
                            if (t("weaponGrind").checked && g <= c.weapons[fa.weaponIndex].range + fa.scale) {
                                return;
                            }
                            if (g <= 300 && ka.dist2 <= 400) {
                                if (e(a)) {
                                    let a = this.checkSpikeTick();
                                    if (!a && ka.dist2 <= c.weapons[ka.primaryIndex || 5].range + ka.scale * 1.8) {
                                        this.testCanPlace(2, 0, Math.PI * 2, Math.PI / 24, h, 1);
                                    } else if (fa.items[4] == 15) {
                                        this.testCanPlace(ka.dist2 > 250 ? 4 : 2, 0, Math.PI * 2, Math.PI / 24, h, 1);
                                    }
                                    this.replaced = true;
                                }
                            }
                        }, 1);
                    };
                }
            }
            class mc {
                constructor() {
                    this.wait = false;
                    this.can = false;
                    this.isTrue = false;
                    this.nobull = false;
                    this.ticking = false;
                    this.canSpikeTick = false;
                    this.startTick = false;
                    this.readyTick = false;
                    this.canCounter = false;
                    this.revTick = false;
                    this.syncHit = false;
                    this.changeType = function(a) {
                        this.wait = false;
                        this.isTrue = true;
                        la.autoAim = true;
                        Gb(0, 1);
                        let b = [a];
                        let c = ka.backupNobull;
                        ka.backupNobull = false;
                        O.tickBase(() => {
                            b.push(fa.skinIndex);
                            O.tickBase(() => {
                                if (ka.skinIndex == 22 && t("backupNobull").checked) {
                                    ka.backupNobull = true;
                                }
                                b.push(fa.skinIndex);
                            }, 1);
                        }, 1);
                        if (a == "rev") {
                            Ib(fa.weapons[1]);
                            Jb();
                            Gb(0, 1);
                            O.tickBase(() => {
                                Gb(53, 0);
                                O.tickBase(() => {
                                    Ib(fa.weapons[0]);
                                    Gb(7, 0);
                                    O.tickBase(() => {
                                        Jb();
                                        this.isTrue = false;
                                        la.autoAim = false;
                                    }, 1);
                                }, 1);
                            }, 1);
                        } else if (a == "nobull") {
                            Ib(fa.weapons[0]);
                            if (t("backupNobull").checked && c) {
                                Gb(7, 0);
                            } else {
                                Gb(6, 0);
                            }
                            Gb(21, 1);
                            Jb();
                            O.tickBase(() => {
                                if (ka.skinIndex == 22) {
                                    if (t("backupNobull").checked) {
                                        ka.backupNobull = true;
                                    }
                                    Gb(6, 0);
                                } else {
                                    Gb(53, 0);
                                }
                                Ib(fa.weapons[1]);
                                Gb(21, 1);
                                O.tickBase(() => {
                                    Jb();
                                    this.isTrue = false;
                                    la.autoAim = false;
                                }, 1);
                            }, 1);
                        } else if (a == "normal") {
                            Ib(fa.weapons[0]);
                            Gb(7, 0);
                            Gb(21, 1);
                            Jb();
                            O.tickBase(() => {
                                Ib(fa.weapons[1]);
                                Gb(fa.reloads[53] == 0 ? 53 : 6, 0);
                                Gb(21, 1);
                                O.tickBase(() => {
                                    Jb();
                                    this.isTrue = false;
                                    la.autoAim = false;
                                }, 1);
                            }, 1);
                        } else {
                            setTimeout(() => {
                                this.isTrue = false;
                                la.autoAim = false;
                            }, 50);
                        }
                    };
                    this.spikeTickType = function() {
                        this.isTrue = true;
                        la.autoAim = true;
                        Ib(fa.weapons[0]);
                        Gb(7, 0);
                        Gb(21, 1);
                        Jb();
                        O.tickBase(() => {
                            Gb(53, 0);
                            Ib(fa.weapons[0]);
                            Gb(53, 0);
                            O.tickBase(() => {
                                Jb();
                                this.isTrue = false;
                                la.autoAim = false;
                                Gb(6, 0);
                            }, 3);
                        }, 1);
                    };
                    this.counterType = function() {
                        this.isTrue = true;
                        la.autoAim = true;
                        Ib(fa.weapons[0]);
                        Gb(7, 0);
                        Gb(21, 1);
                        Jb();
                        O.tickBase(() => {
                            if (fa.reloads[53] == 0 && t("turretCombat").checked) {
                                Ib(fa.weapons[0]);
                                Gb(53, 0);
                                Gb(21, 1);
                                O.tickBase(() => {
                                    Jb();
                                    this.isTrue = false;
                                    la.autoAim = false;
                                }, 1);
                            } else {
                                Jb();
                                this.isTrue = false;
                                la.autoAim = false;
                            }
                        }, 1);
                    };
                    this.antiCounterType = function() {
                        la.autoAim = true;
                        this.isTrue = true;
                        s = true;
                        Ib(fa.weapons[0]);
                        Gb(6, 0);
                        Gb(21, 1);
                        V.send("D", ka.aim2);
                        Jb();
                        O.tickBase(() => {
                            Gb(fa.reloads[53] == 0 ? fa.skins[53] ? 53 : 6 : 6, 0);
                            Gb(21, 1);
                            O.tickBase(() => {
                                Jb();
                                this.isTrue = false;
                                la.autoAim = false;
                                s = false;
                            }, 1);
                        }, 1);
                    };
                    this.rangeType = function(a) {
                        this.isTrue = true;
                        la.autoAim = true;
                        if (a == "ageInsta") {
                            la.ageInsta = false;
                            if (fa.items[5] == 18) {
                                Mb(5, ka.aim2);
                            }
                            T("a", undefined, 1);
                            Gb(22, 0);
                            Gb(21, 1);
                            O.tickBase(() => {
                                Ib(fa.weapons[1]);
                                Gb(53, 0);
                                Gb(21, 1);
                                Jb();
                                O.tickBase(() => {
                                    Db(12);
                                    Ib(fa.weapons[1]);
                                    Gb(53, 0);
                                    Gb(21, 1);
                                    O.tickBase(() => {
                                        Db(15);
                                        Ib(fa.weapons[1]);
                                        Gb(53, 0);
                                        Gb(21, 1);
                                        O.tickBase(() => {
                                            Jb();
                                            this.isTrue = false;
                                            la.autoAim = false;
                                        }, 1);
                                    }, 1);
                                }, 1);
                            }, 1);
                        } else {
                            Ib(fa.weapons[1]);
                            if (fa.reloads[53] == 0 && ka.dist2 <= 700 && ka.skinIndex != 22) {
                                Gb(53, 0);
                            } else {
                                Gb(20, 0);
                            }
                            Gb(11, 1);
                            Jb();
                            O.tickBase(() => {
                                Jb();
                                this.isTrue = false;
                                la.autoAim = false;
                            }, 1);
                        }
                    };
                    this.oneTickType = function() {
                        this.isTrue = true;
                        la.autoAim = true;
                        Ib(fa.weapons[1]);
                        Gb(53, 0);
                        Gb(11, 1);
                        T("a", ka.aim2, 1);
                        if (fa.weapons[1] == 15) {
                            la.revAim = true;
                            Jb();
                        }
                        O.tickBase(() => {
                            const a = ba.filter(a => a.trap && a.active).sort((a, b) => rc.getDist(a, ka, 0, 2) - rc.getDist(b, ka, 0, 2)).find(a => {
                                const b = Math.hypot(a.y - ka.y2, a.x - ka.x2);
                                return a !== fa && (fa.sid === a.owner.sid || fc(a.owner.sid)) && b <= 30;
                            });
                            if ([6, 22].includes(ka.skinIndex) && a) {
                                V.send("6", "p_OT [2/3]");
                            }
                            la.revAim = false;
                            Ib(fa.weapons[0]);
                            Gb(7, 0);
                            Gb(19, 1);
                            T("a", ka.aim2, 1);
                            if (fa.weapons[1] != 15) {
                                Jb();
                            }
                            O.tickBase(() => {
                                Jb();
                                this.isTrue = false;
                                la.autoAim = false;
                                T("a", undefined, 1);
                            }, 1);
                        }, 1);
                    };
                    this.threeOneTickType = function() {
                        this.isTrue = true;
                        la.autoAim = true;
                        Ib(fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0]);
                        ic();
                        Gb(11, 1);
                        T("a", ka.aim2, 1);
                        O.tickBase(() => {
                            Ib(fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0]);
                            Gb(53, 0);
                            Gb(11, 1);
                            T("a", ka.aim2, 1);
                            O.tickBase(() => {
                                Ib(fa.weapons[0]);
                                Gb(7, 0);
                                Gb(19, 1);
                                Jb();
                                T("a", ka.aim2, 1);
                                O.tickBase(() => {
                                    Jb();
                                    this.isTrue = false;
                                    la.autoAim = false;
                                    T("a", undefined, 1);
                                }, 1);
                            }, 1);
                        }, 1);
                    };
                    this.kmTickType = function() {
                        this.isTrue = true;
                        la.autoAim = true;
                        la.revAim = true;
                        Ib(fa.weapons[1]);
                        Gb(53, 0);
                        Gb(11, 1);
                        Jb();
                        T("a", ka.aim2, 1);
                        O.tickBase(() => {
                            la.revAim = false;
                            Ib(fa.weapons[0]);
                            Gb(7, 0);
                            Gb(19, 1);
                            T("a", ka.aim2, 1);
                            O.tickBase(() => {
                                Jb();
                                this.isTrue = false;
                                la.autoAim = false;
                                T("a", undefined, 1);
                            }, 1);
                        }, 1);
                    };
                    this.boostTickType = function() {
                        this.isTrue = true;
                        la.autoAim = true;
                        ic();
                        Gb(11, 1);
                        T("a", ka.aim2, 1);
                        O.tickBase(() => {
                            if (fa.weapons[1] == 15) {
                                la.revAim = true;
                            }
                            Ib(fa.weapons[[9, 12, 13, 15].includes(fa.weapons[1]) ? 1 : 0]);
                            Gb(53, 0);
                            Gb(11, 1);
                            if ([9, 12, 13, 15].includes(fa.weapons[1])) {
                                Jb();
                            }
                            T("a", ka.aim2, 1);
                            Mb(4, ka.aim2);
                            O.tickBase(() => {
                                la.revAim = false;
                                Ib(fa.weapons[0]);
                                Gb(7, 0);
                                Gb(19, 1);
                                if (![9, 12, 13, 15].includes(fa.weapons[1])) {
                                    Jb();
                                }
                                T("a", ka.aim2, 1);
                                O.tickBase(() => {
                                    Jb();
                                    this.isTrue = false;
                                    la.autoAim = false;
                                    T("a", undefined, 1);
                                }, 1);
                            }, 1);
                        }, 1);
                    };
                    this.gotoGoal = function(b, c) {
                        let d = b => b * a.playerScale;
                        let e = {
                            a: b - c,
                            b: b + c,
                            c: b - d(1),
                            d: b + d(1),
                            e: b - d(2),
                            f: b + d(2),
                            g: b - d(4),
                            h: b + d(4)
                        };
                        let f = function(b, c) {
                            if (fa.y2 >= a.mapScale / 2 - a.riverWidth / 2 && fa.y2 <= a.mapScale / 2 + a.riverWidth / 2 && c == 0) {
                                Gb(31, 0);
                            } else {
                                Gb(b, c);
                            }
                        };
                        if (ia.length) {
                            let a = ka.dist2;
                            this.ticking = true;
                            if (a >= e.a && a <= e.b) {
                                f(22, 0);
                                f(11, 1);
                                if (fa.weaponIndex != fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0] || fa.buildIndex > -1) {
                                    Ib(fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0]);
                                }
                                return {
                                    dir: undefined,
                                    action: 1
                                };
                            } else {
                                if (a < e.a) {
                                    if (a >= e.g) {
                                        if (a >= e.e) {
                                            if (a >= e.c) {
                                                f(40, 0);
                                                f(10, 1);
                                                if (n.slowOT) {
                                                    if (fa.buildIndex != fa.items[1]) {
                                                        Hb(fa.items[1]);
                                                    }
                                                } else if (fa.weaponIndex != fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0] || fa.buildIndex > -1) {
                                                    Ib(fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0]);
                                                }
                                            } else {
                                                f(22, 0);
                                                f(19, 1);
                                                if (fa.weaponIndex != fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0] || fa.buildIndex > -1) {
                                                    Ib(fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0]);
                                                }
                                            }
                                        } else {
                                            f(6, 0);
                                            f(12, 1);
                                            if (fa.weaponIndex != fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0] || fa.buildIndex > -1) {
                                                Ib(fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0]);
                                            }
                                        }
                                    } else {
                                        ic();
                                        f(11, 1);
                                        if (fa.weaponIndex != fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0] || fa.buildIndex > -1) {
                                            Ib(fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0]);
                                        }
                                    }
                                    return {
                                        dir: ka.aim2 + Math.PI,
                                        action: 0
                                    };
                                } else if (a > e.b) {
                                    if (a <= e.h) {
                                        if (a <= e.f) {
                                            if (a <= e.d) {
                                                f(40, 0);
                                                f(9, 1);
                                                if (n.slowOT) {
                                                    if (fa.buildIndex != fa.items[1]) {
                                                        Hb(fa.items[1]);
                                                    }
                                                } else if (fa.weaponIndex != fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0] || fa.buildIndex > -1) {
                                                    Ib(fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0]);
                                                }
                                            } else {
                                                f(22, 0);
                                                f(19, 1);
                                                if (fa.weaponIndex != fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0] || fa.buildIndex > -1) {
                                                    Ib(fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0]);
                                                }
                                            }
                                        } else {
                                            f(6, 0);
                                            f(12, 1);
                                            if (fa.weaponIndex != fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0] || fa.buildIndex > -1) {
                                                Ib(fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0]);
                                            }
                                        }
                                    } else {
                                        ic();
                                        f(11, 1);
                                        if (fa.weaponIndex != fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0] || fa.buildIndex > -1) {
                                            Ib(fa.weapons[[10, 14].includes(fa.weapons[1]) ? 1 : 0]);
                                        }
                                    }
                                    return {
                                        dir: ka.aim2,
                                        action: 0
                                    };
                                }
                                return {
                                    dir: undefined,
                                    action: 0
                                };
                            }
                        } else {
                            this.ticking = false;
                            return {
                                dir: undefined,
                                action: 0
                            };
                        }
                    };
                    this.bowMovement = function() {
                        let a = this.gotoGoal(685, 3);
                        if (a.action) {
                            if (fa.reloads[53] == 0 && !this.isTrue) {
                                this.rangeType("ageInsta");
                            } else {
                                T("a", a.dir, 1);
                            }
                        } else {
                            T("a", a.dir, 1);
                        }
                    };
                    this.tickMovement = function() {
                        const b = ba.filter(a => a.trap && a.active).sort((a, b) => rc.getDist(a, ka, 0, 2) - rc.getDist(b, ka, 0, 2)).find(a => {
                            const b = Math.hypot(a.y - ka.y2, a.x - ka.x2);
                            return a !== fa && (fa.sid === a.owner.sid || fc(a.owner.sid)) && b <= 50;
                        });
                        let c = this.gotoGoal([10, 14].includes(fa.weapons[1]) && fa.y2 > a.snowBiomeTop ? 200 : fa.weapons[1] == 15 ? 210 : fa.y2 <= a.snowBiomeTop ? [10, 14].includes(fa.weapons[1]) ? 230 : 225 : 235, 3);
                        if (c.action) {
                            if ((![6, 22].includes(ka.skinIndex) || [6, 22].includes(ka.skinIndex) && b) && fa.reloads[53] == 0 && !this.isTrue) {
                                if ([10, 14].includes(fa.weapons[1]) && fa.y2 > a.snowBiomeTop || fa.weapons[1] == 15) {
                                    this.oneTickType();
                                } else {
                                    this.threeOneTickType();
                                }
                                if ([6, 22].includes(ka.skinIndex) && b) {
                                    V.send("6", "p_OT [1/3]");
                                }
                            } else {
                                T("a", c.dir, 1);
                            }
                        } else {
                            T("a", c.dir, 1);
                        }
                    };
                    this.kmTickMovement = function() {
                        let b = this.gotoGoal(240, 3);
                        if (b.action) {
                            if (ka.skinIndex != 22 && fa.reloads[53] == 0 && !this.isTrue && (O.tick - ka.poisonTick) % a.serverUpdateRate == 8) {
                                this.kmTickType();
                            } else {
                                T("a", b.dir, 1);
                            }
                        } else {
                            T("a", b.dir, 1);
                        }
                    };
                    this.boostTickMovement = function() {
                        let a = fa.weapons[1] == 9 ? 365 : fa.weapons[1] == 12 ? 380 : fa.weapons[1] == 13 ? 390 : fa.weapons[1] == 15 ? 365 : 370;
                        let b = fa.weapons[1] == 9 ? 2 : fa.weapons[1] == 12 ? 1.5 : fa.weapons[1] == 13 ? 1.5 : fa.weapons[1] == 15 ? 2 : 3;
                        let c = this.gotoGoal(a, b);
                        if (c.action) {
                            if (fa.reloads[53] == 0 && !this.isTrue) {
                                this.boostTickType();
                            } else {
                                T("a", c.dir, 1);
                            }
                        } else {
                            T("a", c.dir, 1);
                        }
                    };
                    this.perfCheck = function(b, c) {
                        if (c.weaponIndex == 11 && rc.getAngleDist(c.aim2 + Math.PI, c.d2) <= a.shieldAngle) {
                            return false;
                        }
                        if (![9, 12, 13, 15].includes(fa.weapons[1])) {
                            return true;
                        }
                        let d = {
                            x: c.x2 + Math.cos(c.aim2 + Math.PI) * 70,
                            y: c.y2 + Math.sin(c.aim2 + Math.PI) * 70
                        };
                        if (rc.lineInRect(b.x2 - b.scale, b.y2 - b.scale, b.x2 + b.scale, b.y2 + b.scale, d.x, d.y, d.x, d.y)) {
                            return true;
                        }
                        let e = Y.filter(a => a.visible).find(a => {
                            if (rc.lineInRect(a.x2 - a.scale, a.y2 - a.scale, a.x2 + a.scale, a.y2 + a.scale, d.x, d.y, d.x, d.y)) {
                                return true;
                            }
                        });
                        if (e) {
                            return false;
                        }
                        e = ba.filter(a => a.active).find(a => {
                            let b = a.getScale();
                            if (!a.ignoreCollision && rc.lineInRect(a.x - b, a.y - b, a.x + b, a.y + b, d.x, d.y, d.x, d.y)) {
                                return true;
                            }
                        });
                        if (e) {
                            return false;
                        }
                        return true;
                    };
                }
            };
            class nc {
                constructor(a, b) {
                    this.hat = function() {
                        a.forEach(a => {
                            let b = ma(vc, a);
                            if (b && !fa.skins[a] && fa.points >= b.price) {
                                T("c", 1, a, 0);
                            }
                        });
                    };
                    this.acc = function() {
                        b.forEach(a => {
                            let b = ma(wc, a);
                            if (b && !fa.tails[a] && fa.points >= b.price) {
                                T("c", 1, a, 1);
                            }
                        });
                    };
                }
            };
            class oc {
                constructor() {
                    this.sb = function(a) {
                        a(3);
                        a(17);
                        a(31);
                        a(23);
                        a(9);
                        a(38);
                    };
                    this.kh = function(a) {
                        a(3);
                        a(17);
                        a(31);
                        a(23);
                        a(10);
                        a(38);
                        a(4);
                        a(25);
                    };
                    this.pb = function(a) {
                        a(5);
                        a(17);
                        a(32);
                        a(23);
                        a(9);
                        a(38);
                    };
                    this.ph = function(a) {
                        a(5);
                        a(17);
                        a(32);
                        a(23);
                        a(10);
                        a(38);
                        a(28);
                        a(25);
                    };
                    this.db = function(a) {
                        a(7);
                        a(17);
                        a(31);
                        a(23);
                        a(9);
                        a(34);
                    };
                    this.km = function(a) {
                        a(7);
                        a(17);
                        a(31);
                        a(23);
                        a(10);
                        a(38);
                        a(4);
                        a(15);
                    };
                }
            };
            class pc {
                constructor(a) {
                    this.calcDmg = function(a, b) {
                        return a * b;
                    };
                    this.getAllDamage = function(a) {
                        return [this.calcDmg(a, 0.75), a, this.calcDmg(a, 1.125), this.calcDmg(a, 1.5)];
                    };
                    this.weapons = [];
                    for (let b = 0; b < a.weapons.length; b++) {
                        let c = a.weapons[b];
                        let d = c.name.split(" ").length <= 1 ? c.name : c.name.split(" ")[0] + "_" + c.name.split(" ")[1];
                        this.weapons.push(this.getAllDamage(b > 8 ? c.Pdmg : c.dmg));
                        this[d] = this.weapons[b];
                    }
                }
            }
            let qc = [];
            let rc = new pb();
            let sc = new tb();
            let tc = new ub(sb, ba, rc, a);
            let uc = new wb();
            let vc = uc.hats;
            let wc = uc.accessories;
            let xc = new xb(vb, ca, Z, Y, tc, sc, a, rc);
            let yc = new yb(Y, zb, Z, sc, null, a, rc);
            let zc = new rb();
            let Ac = new lc(rc, sc);
            let Bc = new mc();
            let Cc = new nc([15, 31, 6, 7, 22, 12, 53, 20, 40], [11, 13, 19, 18, 21]);
            let Dc = new oc();
            let Ec;
            let Fc;
            let Gc = {};
            let Hc = [];
            let Ic;
            let Jc = [];
            let Kc = 0;
            let Lc = [];
            let Mc = {
                active: true,
                grid: 1440,
                scale: 40,
                x: 14400,
                y: 14400,
                chaseNear: false,
                array: [],
                lastX: this.grid / 2,
                lastY: this.grid / 2
            };

            function Nc(a) {
                T("6", a.slice(0, 30));
            }
            let Oc = [];

            function Pc(b, c, d, e, f, g, h, i) {
                let j = g == 0 ? 9 : g == 2 ? 12 : g == 3 ? 13 : g == 5 && 15;
                let k = a.playerScale * 2;
                let l = {
                    x: g == 1 ? b : b - k * Math.cos(d),
                    y: g == 1 ? c : c - k * Math.sin(d)
                };
                let m = Z.filter(a => a.visible && rc.getDist(l, a, 0, 2) <= a.scale).sort(function(a, b) {
                    return rc.getDist(l, a, 0, 2) - rc.getDist(l, b, 0, 2);
                })[0];
                if (m) {
                    if (g == 1) {
                        m.shooting[53] = 1;
                    } else {
                        m.shootIndex = j;
                        m.shooting[1] = 1;
                        Rc(m, d, e, f, g, j);
                    }
                }
            }
            let Qc = 0;

            function Rc(a, b, c, d, e, f) {
                if (!a.isTeam(fa)) {
                    Wa = rc.getDirect(fa, a, 2, 2);
                    if (rc.getAngleDist(Wa, b) <= 0.2) {
                        a.bowThreat[f]++;
                        if (e == 5) {
                            Qc++;
                        }
                        setTimeout(() => {
                            a.bowThreat[f]--;
                            if (e == 5) {
                                Qc--;
                            }
                        }, c / d);
                        if (a.bowThreat[9] >= 1 && (a.bowThreat[12] >= 1 || a.bowThreat[15] >= 1)) {
                            Mb(1, a.aim2);
                            la.anti0Tick = 4;
                            if (!la.antiSync) {
                                bc(4);
                            }
                        } else if (Qc >= 2) {
                            Mb(1, a.aim2);
                            la.anti0Tick = 4;
                            if (!la.antiSync) {
                                bc(4);
                            }
                        }
                    }
                }
            }

            function Sc(b, c, d) {
                if (fa && b) {
                    rc.removeAllChildren(Ia);
                    Ia.classList.add("visible");
                    rc.generateElement({
                        id: "itemInfoName",
                        text: rc.capitalizeFirst(b.name),
                        parent: Ia
                    });
                    rc.generateElement({
                        id: "itemInfoDesc",
                        text: b.desc,
                        parent: Ia
                    });
                    if (d) {} else if (c) {
                        rc.generateElement({
                            class: "itemInfoReq",
                            text: !b.type ? "primary" : "secondary",
                            parent: Ia
                        });
                    } else {
                        for (let a = 0; a < b.req.length; a += 2) {
                            rc.generateElement({
                                class: "itemInfoReq",
                                html: b.req[a] + "<span class='itemInfoReqVal'> x" + b.req[a + 1] + "</span>",
                                parent: Ia
                            });
                        }
                        if (b.group.limit) {
                            rc.generateElement({
                                class: "itemInfoLmt",
                                text: (fa.itemCounts[b.group.id] || 0) + "/" + (a.isSandbox ? 99 : b.group.limit),
                                parent: Ia
                            });
                        }
                    }
                } else {
                    Ia.classList.remove("visible");
                }
            }
            window.addEventListener("resize", rc.checkTrusted(Tc));

            function Tc() {
                Ma = window.innerWidth;
                Na = window.innerHeight;
            }
            Tc();
            const Uc = document.getElementById("touch-controls-fullscreen");
            Uc.style.display = "block";
            Uc.addEventListener("mousemove", Vc, false);

            function Vc(a) {
                Xa = a.clientX;
                Ya = a.clientY;
            }
            let Wc = {
                left: false,
                middle: false,
                right: false
            };
            Uc.addEventListener("mousedown", Xc, false);

            function Xc(a) {
                if (ib != 1) {
                    ib = 1;
                    if (a.button == 0) {
                        Wc.left = true;
                    } else if (a.button == 1) {
                        Wc.middle = true;
                    } else if (a.button == 2) {
                        Wc.right = true;
                    }
                }
            }
            Uc.addEventListener("mouseup", rc.checkTrusted(Yc));

            function Yc(a) {
                if (ib != 0) {
                    ib = 0;
                    if (a.button == 0) {
                        Wc.left = false;
                    } else if (a.button == 1) {
                        Wc.middle = false;
                    } else if (a.button == 2) {
                        Wc.right = false;
                    }
                }
            }
            Uc.addEventListener("wheel", Zc, false);

            function Zc(a) {
                if (a.deltaY < 0) {
                    la.reSync = true;
                } else {
                    la.reSync = false;
                }
            }

            function $c() {
                let a = 0;
                let b = 0;
                for (let c in gb) {
                    let d = gb[c];
                    a += !!fb[c] * d[0];
                    b += !!fb[c] * d[1];
                }
                if (a == 0 && b == 0) {
                    return undefined;
                } else {
                    return Math.atan2(b, a);
                }
            }

            function _c() {
                if (!fa) {
                    return 0;
                }
                if (!fa.lockDir) {
                    mb = Math.atan2(Ya - Na / 2, Xa - Ma / 2);
                }
                return mb || 0;
            }
            let ad = 0;
            let bd = Date.now();

            function cd(a) {
                if (a) {
                    if (!fa) {
                        return "0";
                    }
                    if (la.autoAim || Wc.left && ka.length) {
                        mb = "near.aim2";
                    } else if (Wc.right && fa.reloads[fa.weapons[1] == 10 ? fa.weapons[1] : fa.weapons[0]] == 0) {
                        mb = "getSafeDir()";
                    } else if (Ac.inTrap) {
                        mb = "traps.aim";
                    } else if (!fa.lockDir) {
                        if (n.noDir) {
                            return "undefined";
                        }
                        if (t("visualType").value == "ae") {
                            mb = "player.moveDir";
                        } else {
                            mb = "getSafeDir()";
                        }
                    }
                    return mb;
                } else {
                    if (fa && Date.now() - bd >= 200) {
                        ad += rc.fixTo(Math.random() * (Math.PI * 2), 1);
                        bd = Date.now();
                    }
                    if (!fa) {
                        return 0;
                    }
                    if (la.autoAim) {
                        mb = ka.aim2;
                    } else if ((Wc.right || Wc.left) && fa.reloads[fa.weapons[1] == 10 ? fa.weapons[1] : fa.weapons[0]] == 0) {
                        mb = _c();
                    } else if (Ac.inTrap) {
                        mb = Ac.aim;
                    } else if (true) {
                        if (t("visualType").value == "ae" && !me.stopspin) {
                            mb = ad;
                        }
                        if (!fa.lockDir && me.stopspin) {
                            if (n.noDir) {
                                return undefined;
                            }
                            if (t("visualType").value == "ae") {
                                mb = mb;
                            } else {
                                mb = _c();
                            }
                        }
                    }
                    return mb || 0;
                }
            }

            function dd() {
                if (!fa) {
                    return 0;
                }
                if (la.autoAim || Wc.left || t("visualType").value == "ae" && ka.dist2 <= sc.weapons[fa.weapons[0]].range + ka.scale * 1.8 && !Ac.inTrap) {
                    mb = ka.aim2;
                } else if (Wc.right && fa.reloads[fa.weapons[1] == 10 ? fa.weapons[1] : fa.weapons[0]] == 0) {
                    mb = _c();
                } else if (Ac.inTrap && fa.reloads[Ac.notFast() ? fa.weapons[1] : fa.weapons[0]] == 0) {
                    mb = Ac.aim;
                } else if (true) {
                    if (t("visualType").value == "ae" && !me.stopspin) {
                        mb = ad;
                    }
                    if (!fa.lockDir && me.stopspin) {
                        if (n.noDir) {
                            return undefined;
                        }
                        if (t("visualType").value == "ae") {
                            mb = mb;
                        } else {
                            mb = _c();
                        }
                    }
                }
                return mb || 0;
            }

            function ed() {
                return Za.style.display != "block" && Fa.style.display != "block" && !B;
            }

            function fd() {
                if (y.style.display != "none") {
                    Fa.style.display = "none";
                    if (A.value != "") {
                        let a = function(a) {
                            return {
                                found: a.startsWith("/") && commands[a.slice(1).split(" ")[0]],
                                fv: commands[a.slice(1).split(" ")[0]]
                            };
                        };
                        let b = a(A.value);
                        if (b.found) {
                            if (typeof b.fv.action === "function") {
                                b.fv.action(A.value);
                            }
                        } else {
                            Nc(A.value);
                        }
                        A.value = "";
                        A.blur();
                    } else if (B) {
                        A.blur();
                    } else {
                        A.focus();
                    }
                }
            }

            function gd(a) {
                let b = a.which || a.keyCode || 0;
                if (fa && fa.alive && ed()) {
                    if (!fb[b]) {
                        fb[b] = 1;
                        kb[a.key] = 1;
                        if (b == 27) {
                            H = !H;
                            $("#menuDiv").toggle();
                            $("#menuChatDiv").toggle();
                        } else if (b == 69) {
                            Jb();
                        } else if (b == 82 && t("visualType").value == "ae") {
                            me.insta.count = Math.floor(Math.random() * 8);
                            if (me.insta.count <= 0) {
                                me.insta.todo = true;
                            }
                        } else if (b == 67) {
                            Ff();
                        } else if (fa.weapons[b - 49] != undefined) {
                            fa.weaponCode = fa.weapons[b - 49];
                        } else if (gb[b]) {
                            id();
                        } else if (a.key == "m") {
                            lb.placeSpawnPads = !lb.placeSpawnPads;
                        } else if (a.key == "z") {
                            lb.place = !lb.place;
                        } else if (a.key == "Z") {
                            if (typeof window.debug == "function") {
                                window.debug();
                            }
                        } else if (b == 32) {
                            T("d", 1, _c(), 1);
                            T("d", 0, _c(), 1);
                        } else if (a.key == ",") {
                            fa.sync = true;
                        } else if (a.key == "") {
                            for (let a = 0; a < 34; a++) {
                                Mb(2, _c());
                            }
                        }
                    }
                }
            }
            addEventListener("keydown", rc.checkTrusted(gd));

            function hd(a) {
                if (fa && fa.alive) {
                    let b = a.which || a.keyCode || 0;
                    if (b == 13) {} else if (ed()) {
                        if (fb[b]) {
                            fb[b] = 0;
                            kb[a.key] = 0;
                            if (gb[b]) {
                                id();
                            } else if (a.key == ",") {
                                fa.sync = false;
                            }
                        }
                    }
                }
            }
            window.addEventListener("keyup", rc.checkTrusted(hd));

            function id() {
                let a = $c();
                if (R == undefined || a == undefined || Math.abs(a - R) > 0.3) {
                    if (!la.autoPush) {
                        T("a", a, 1);
                    }
                    R = a;
                    fa.randDIff = Math.random * Math.PI * 2;
                }
            }

            function jd() {}
            jd();

            function kd(a) {
                return (fa.scale + a.getScale()) / (fa.maxSpeed * sc.weapons[fa.weaponIndex].spdMult) + (a.dmg && !a.isTeamObject(fa) ? 35 : 0);
                if (a.colDiv == 0.5) {
                    return a.scale * a.colDiv;
                } else if (!a.isTeamObject(fa) && a.dmg) {
                    return a.scale + fa.scale;
                } else if (a.isTeamObject(fa) && a.trap) {
                    return 0;
                } else {
                    return a.scale;
                }
            }

            function ld() {
                let a = ba.filter(a => fa.canSee(a) && a.active);
                for (let b = 0; b < Mc.grid; b++) {
                    Lc[b] = [];
                    for (let c = 0; c < Mc.grid; c++) {
                        let d = {
                            x: fa.x2 - Mc.scale / 2 + Mc.scale / Mc.grid * c,
                            y: fa.y2 - Mc.scale / 2 + Mc.scale / Mc.grid * b
                        };
                        if (rc.getDist(Mc.chaseNear ? ka : Mc, d, Mc.chaseNear ? 2 : 0, 0) <= (Mc.chaseNear ? 35 : 60)) {
                            Mc.lastX = c;
                            Mc.lastY = b;
                            Lc[b][c] = 0;
                            continue;
                        }
                        let e = a.find(a => rc.getDist(a, d, 0, 0) <= kd(a));
                        if (e) {
                            if (e.trap) {
                                Lc[b][c] = 0;
                                continue;
                            }
                            Lc[b][c] = 1;
                        } else {
                            Lc[b][c] = 0;
                        }
                    }
                }
            }

            function md(a) {
                let b = ~~(a % 3600 / 60);
                let c = ~~a % 60;
                if (c <= 9) {
                    c = "0" + c;
                }
                return b + ":" + c;
            }
            let nd = {
                sync: {
                    "10:639": "Oh, where am I going now",
                    "12:163": "just falling over trees?",
                    "16:299": "Now I'm just so far gone",
                    "18:439": "this isn't what it seems",
                    "21:785": "I'm taking this so d*mn long",
                    "23:317": "it's fading from believe",
                    "27:178": "I need to slow this down",
                    "28:828": "it's burning from beneath",
                    "32:909": "Come break this line",
                    "36:175": "Before tomorrow dies,",
                    "38:805": "Holding on for what",
                    "40:547": "is worth my life",
                    "44:175": "I know in time",
                    "47:214": "I'll make it up the vine",
                    "49:802": "Find my way to",
                    "51:71": "giants in the sky",
                    "53:974": "Tonight it comes to life.",
                    "1:16:17": "Tonight it comes to life..",
                    "1:38:829": "Oh, where am I going now",
                    "1:40:450": "just falling over trees?",
                    "1:44:520": "Now I'm just so far gone",
                    "1:46:391": "this isn't what it seems",
                    "1:49:974": "I'm taking this so d*mn long",
                    "1:51:652": "it's fading from believe",
                    "1:55:509": "I need to slow this down",
                    "1:57:142": "it's burning from beneath",
                    "2:1:269": "Come break this light",
                    "2:4:52": "Before tomorrow dies,",
                    "2:7:97": "Holding on for what",
                    "2:8:785": "is worth my life",
                    "2:12:322": "I know in time",
                    "2:15:315": "I'll make it up the vine",
                    "2:18:221": "Find my way to",
                    "2:19:582": "giants in the sky",
                    "2:21:175": "Tonight it comes to life.",
                    "2:32:969": "Tonight it comes to life..",
                    "2:56:461": "Come break this line",
                    "2:59:450": "Before tomorrow dies,",
                    "3:2:601": "Holding on for what",
                    "3:3:853": "is worth my life",
                    "3:7:617": "I know in time",
                    "3:10:701": "I'll make it up the vine",
                    "3:13:195": "Find my way to",
                    "3:14:591": "giants in the sky",
                    "3:17:446": "Tonight it comes to life."
                }
            };
            var od = a => {
                let b = a.split(":").reverse();
                a = 0;
                let c = [3600000, 60000, 1000, 1].reverse();
                b.forEach((b, d) => {
                    a += b * c[d];
                });
                return a;
            };
            let pd = nd;
            let qd = pd.sync;
            pd.sync = {};
            for (let a in qd) {
                pd.sync[od(a)] = qd[a];
            }
            const rd = new Audio("https://cdn.discordapp.com/attachments/1065969963644506152/1079719316074790953/V_O_E_-_Giants_Extended_Mix_NCS_Release_1.mp3");
            let sd = false;
            let td = {
                timeouts: []
            };

            function ud() {
                if (!sd) {
                    rd.play();
                    for (let a in nd.sync) {
                        let b = nd.sync[a];
                        td.timeouts.push(setTimeout(() => {
                            V.send("6", b);
                        }, a));
                    }
                    sd = true;
                } else {
                    rd.pause();
                    sd = false;
                }
            }
            document.addEventListener("keypress", function(a) {
                if (a.key === "C") {
                    ud();
                }
            });

            function vd() {
                Lc = [];
                ld();
            }

            function wd() {
                Mc.scale = a.maxScreenWidth / 2 * 1.3;
                if (!Ac.inTrap && (Mc.chaseNear ? ia.length : true)) {
                    if (ka.dist2 <= sc.weapons[fa.weapons[0]].range) {
                        T("a", undefined, 1);
                    } else {
                        vd();
                        v.setGrid(Lc);
                        v.setAcceptableTiles([0]);
                        v.enableDiagonals();
                        let a = ba.filter(a => a.dmg && a.active && a.isTeamObject(fa)).sort(function(a, b) {
                            return rc.getDist(a, ka, 0, 2) - rc.getDist(b, ka, 0, 2);
                        })[0];
                        v.findPath(a.x, a.y, Mc.lastX, Mc.lastY, function(a) {
                            if (a === null) {
                                Mc.array = [];
                                if (ka.dist2 <= sc.weapons[fa.weapons[0]].range) {
                                    T("a", undefined, 1);
                                } else {
                                    T("a", ka.aim2, 1);
                                }
                            } else {
                                Mc.array = a;
                                if (Mc.array.length > 1) {
                                    let b = {
                                        x: fa.x2 - Mc.scale / 2 + Mc.scale / Mc.grid * a[1].x,
                                        y: fa.y2 - Mc.scale / 2 + Mc.scale / Mc.grid * a[1].y
                                    };
                                    T("a", rc.getDirect(b, fa, 0, 2), 1);
                                }
                            }
                        });
                        v.calculate();
                        console.warn(v);
                    }
                }
            }
            let xd = [];

            function yd(a = undefined) {
                if (a === undefined) a = undefined;
                for (let b = 3; b < sc.list.length; ++b) {
                    let c = sc.list[b].group.id;
                    let d = sc.weapons.length + b;
                    if (!xd[d]) {
                        xd[d] = document.createElement("div");
                        xd[d].id = "itemCount" + d;
                        t("actionBarItem" + d).appendChild(xd[d]);
                        xd[d].style = "\n                        display: block;\n                        position: absolute;\n                        padding-left: 5px;\n                        font-size: 2em;\n                        color: #fff;\n                        ";
                        xd[d].innerHTML = fa.itemCounts[c] || 0;
                    } else if (a == c) {
                        xd[d].innerHTML = fa.itemCounts[a] || 0;
                    }
                }
            }

            function zd() {
                let a = ba.filter(a => a.trap && a.active && a.isTeamObject(fa) && rc.getDist(a, ka, 0, 2) <= ka.scale + a.getScale() + 5).sort(function(a, b) {
                    return rc.getDist(a, ka, 0, 2) - rc.getDist(b, ka, 0, 2);
                })[0];
                if (a) {
                    let b = ba.filter(b => b.dmg && b.active && b.isTeamObject(fa) && rc.getDist(b, a, 0, 0) <= ka.scale + a.scale + b.scale).sort(function(a, b) {
                        return rc.getDist(a, ka, 0, 2) - rc.getDist(b, ka, 0, 2);
                    })[0];
                    if (b) {
                        let a = {
                            x: b.x + Math.cos(rc.getDirect(ka, b, 2, 0)) * 250,
                            y: b.y + Math.sin(rc.getDirect(ka, b, 2, 0)) * 250,
                            x2: b.x + (rc.getDist(ka, b, 2, 0) + fa.scale) * Math.cos(rc.getDirect(ka, b, 2, 0)),
                            y2: b.y + (rc.getDist(ka, b, 2, 0) + fa.scale) * Math.sin(rc.getDirect(ka, b, 2, 0))
                        };
                        let c = ba.filter(a => a.active).find(b => {
                            let c = b.getScale();
                            if (!b.ignoreCollision && rc.lineInRect(b.x - c, b.y - c, b.x + c, b.y + c, fa.x2, fa.y2, a.x2, a.y2)) {
                                return true;
                            }
                        });
                        if (c && rc.getDist(ka, b, 0, 2) < 70) {
                            if (la.autoPush) {
                                la.autoPush = false;
                                T("a", R || undefined, 1);
                            }
                        } else {
                            la.autoPush = true;
                            la.pushData = {
                                x: b.x,
                                y: b.y,
                                x2: a.x2 + Math.cos(30),
                                y2: a.y2 + Math.sin(30)
                            };
                            let c = fa.scale / 10;
                            let d = rc.getDirect(ka, b, 2, 0) > 70 ? ka.aim2 : undefined;
                            if (rc.lineInRect(fa.x2 - c, fa.y2 - c, fa.x2 + c, fa.y2 + c, ka.x2, ka.y2, a.x, a.y)) {
                                T("a", d, 1);
                            } else {
                                T("a", rc.getDirect(a, fa, 2, 2), 1);
                            }
                        }
                    } else if (la.autoPush) {
                        la.autoPush = false;
                        T("a", R || undefined, 1);
                    }
                } else if (la.autoPush) {
                    la.autoPush = false;
                    T("a", R || undefined, 1);
                }
            }

            function Ad(a) {
                da.push(new Bb(a.x, a.y, a.dir, a.buildIndex, a.weaponIndex, a.weaponVariant, a.skinColor, a.scale, a.name));
            }

            function Bd(a) {
                _ = a.teams;
            }

            function Cd() {
                let a = Date.now();
                const c = a - b;
                window.pingTime = c;
            }
            const Dd = document.getElementById("pingDisplay");
            var Ed = -1;
            var Fd = NaN;
            var Gd = NaN;
            var Hd = 0;
            var Id = false;

            function Jd() {
                let a = window.pingTime;
                Hd++;
                if (a > Mf.max || isNaN(Mf.max)) {
                    Mf.max = a;
                }
                if (a < Mf.min || isNaN(Mf.min)) {
                    Mf.min = a;
                }
            }

            function Kd() {
                Ed = Date.now();
                V.send("0");
            }
            var Ld = false;

            function Md(a) {
                fb = {};
                kb = {};
                ga = a;
                ib = 0;
                jb = true;
                Ld = true;
                T("d", 0, cd(), 1);
                la.ageInsta = true;
                if (eb) {
                    eb = false;
                    ba.length = 0;
                }
            }

            function Nd(b, c) {
                let d = oa(b[0]);
                if (!d) {
                    d = new Cb(b[0], b[1], a, rc, xc, tc, Z, Y, sc, vc, wc);
                    Z.push(d);
                    if (b[1] != ga) {
                        D("Player Near " + b[2], "#24ff03", "", "#ff0303");
                    }
                } else if (b[1] != ga) {
                    D("Play Near " + b[2], "#24ff03", "", "#ff0303");
                }
                d.spawn(c ? true : null);
                d.visible = false;
                d.oldPos = {
                    x2: undefined,
                    y2: undefined
                };
                d.x2 = undefined;
                d.y2 = undefined;
                d.x3 = undefined;
                d.y3 = undefined;
                d.setData(b);
                if (c) {
                    if (!fa) {
                        window.prepareUI(d);
                    }
                    fa = d;
                    Ua = fa.x;
                    Va = fa.y;
                    la.lastDir = 0;
                    ye();
                    Wd();
                    yd();
                    if (fa.skins[7]) {
                        la.reSync = true;
                    }
                }
            }

            function Od(a) {
                for (let b = 0; b < Z.length; b++) {
                    if (Z[b].id == a) {
                        let a = Z[b];
                        D(a.name + " has left", "red", "", "red");
                        Z.splice(b, 1);
                        break;
                    }
                }
            }
            let Pd = undefined;
            let Qd = false;
            let Rd = false;
            let Sd = false;

            function Td(a, b) {
                ha = pa(a);
                if (ha) {
                    ha.oldHealth = ha.health;
                    ha.health = b;
                    ha.judgeShame();
                    if (ha.oldHealth > ha.health) {
                        ha.damaged = ha.oldHealth - ha.health;
                        kc.push([a, b, ha.damaged]);
                    } else {}
                    if (ha.health <= 0) {}
                }
            }

            function Ud() {
                petals = [];
                jb = false;
                Ec = {
                    x: fa.x,
                    y: fa.y
                };
                if (n.autoRespawn) {
                    t("ot-sdk-btn-floating").style.display = "none";
                    T("M", {
                        name: S[0],
                        moofoll: S[1],
                        skin: S[2]
                    });
                }
            }

            function Vd(a, b) {
                if (fa) {
                    fa.itemCounts[a] = b;
                    yd(a);
                }
            }

            function Wd(a, b, c) {
                if (a != undefined) {
                    fa.XP = a;
                }
                if (b != undefined) {
                    fa.maxXP = b;
                }
                if (c != undefined) {
                    fa.age = c;
                }
            }

            function Xd(a, b) {
                fa.upgradePoints = a;
                fa.upgrAge = b;
                if (a > 0) {
                    qc.length = 0;
                    rc.removeAllChildren(Ca);
                    for (let a = 0; a < sc.weapons.length; ++a) {
                        if (sc.weapons[a].age == b && (r || sc.weapons[a].pre == undefined || fa.weapons.indexOf(sc.weapons[a].pre) >= 0)) {
                            let b = rc.generateElement({
                                id: "upgradeItem" + a,
                                class: "actionBarItem",
                                onmouseout: function() {
                                    Sc();
                                },
                                parent: Ca
                            });
                            b.style.backgroundImage = t("actionBarItem" + a).style.backgroundImage;
                            qc.push(a);
                        }
                    }
                    for (let a = 0; a < sc.list.length; ++a) {
                        if (sc.list[a].age == b && (r || sc.list[a].pre == undefined || fa.items.indexOf(sc.list[a].pre) >= 0)) {
                            let b = sc.weapons.length + a;
                            let c = rc.generateElement({
                                id: "upgradeItem" + b,
                                class: "actionBarItem",
                                onmouseout: function() {
                                    Sc();
                                },
                                parent: Ca
                            });
                            c.style.backgroundImage = t("actionBarItem" + b).style.backgroundImage;
                            qc.push(b);
                        }
                    }
                    for (let a = 0; a < qc.length; a++) {
                        (function(a) {
                            let b = t("upgradeItem" + a);
                            b.onmouseover = function() {
                                if (sc.weapons[a]) {
                                    Sc(sc.weapons[a], true);
                                } else {
                                    Sc(sc.list[a - sc.weapons.length]);
                                }
                            };
                            b.onclick = rc.checkTrusted(function() {
                                T("H", a);
                            });
                            rc.hookTouchEvents(b);
                        })(qc[a]);
                    }
                    if (qc.length) {
                        Ca.style.display = "block";
                        Da.style.display = "block";
                        Da.style.borderRadius = "4px";
                        Da.innerHTML = "SELECT ITEMS (" + a + ")";
                    } else {
                        Ca.style.display = "none";
                        Da.style.display = "none";
                        Sc();
                    }
                } else {
                    Ca.style.display = "none";
                    Da.style.display = "none";
                    Sc();
                }
            }

            function Yd(a, b) {
                try {
                    return Math.hypot((b.y2 || b.y) - (a.y2 || a.y), (b.x2 || b.x) - (a.x2 || a.x));
                } catch (a) {
                    return Infinity;
                }
            }

            function Zd(a, b) {
                try {
                    return Math.atan2((b.y2 || b.y) - (a.y2 || a.y), (b.x2 || b.x) - (a.x2 || a.x));
                } catch (a) {
                    return 0;
                }
            }

            function $d(a = 0, b = 1, c, d = 1) {
                let e = [];
                for (let f = a; f < b; f += d) {
                    e.push(f);
                    if (typeof c == "function") {
                        c(f);
                    }
                }
                return e;
            }

            function _d(a) {
                var b = a * Math.PI / 180 % (Math.PI * 2);
                if (b > Math.PI) {
                    return Math.PI - b;
                } else {
                    return b;
                }
            }

            function ae(a) {
                var b = a / Math.PI * 360 % 360;
                if (b >= 360) {
                    return b - 360;
                } else {
                    return b;
                }
            }

            function be(a) {
                let b = ra(a);
                tc.disableBySid(a);
                let c = b;
                if (c && Yd(fa, c) < 200) {
                    if (ja.length) {
                        let a = ka;
                        let b = fa;
                        let c = Yd(b, a);
                        let d = Zd(b, a);
                        let e = Zd(fa, d + _d(180));
                        let f = [0, 0];
                        let g = function(a, b) {
                            Vb(a, b);
                        };
                        if (c < 500) {
                            for (let a = 0; a != 2; a++) {
                                if (c < 200) {
                                    for (let a = 0; a < Math.PI; a += _d(sc.list[b.items[2]].scale)) {
                                        let c;
                                        if (f[0]) {
                                            c = false;
                                            f[0]--;
                                        } else if (g(2, (d || e) + a)) {
                                            if (ae(a) < sc.list[b.items[2]].scale) {
                                                f[1] = Math.ceil(sc.list[b.items[2]].scale / ae(Math.PI / 12));
                                            }
                                            c = true;
                                        }
                                        if (c) {
                                            f[0] = Math.ceil(sc.list[b.items[2]].scale / ae(Math.PI / 12));
                                        }
                                        if (!c || rc.getAngleDist(d + a, d - a) > _d(sc.list[b.items[2]].scale)) {
                                            if (f[1]) {
                                                f[1]--;
                                            } else if (g(2, d - a)) {
                                                f[1] = Math.ceil(sc.list[b.items[2]].scale / ae(Math.PI / 12));
                                            }
                                        }
                                    }
                                    g(4, _d(ae(d) - 180));
                                } else {
                                    let a = 0;
                                    if (a) {
                                        a--;
                                    } else {
                                        for (let b = 0; b < Math.PI / 2; b += Math.PI / 3) {
                                            if (Vb(4, d + b)) {
                                                a = Math.ceil(50 / Math.PI / 6);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            function ce(a) {
                if (fa) {
                    tc.removeAllItems(a);
                }
            }

            function de(a, b) {
                return Math.sqrt(Math.pow(b.y - a.y, 2) + Math.pow(b.x - a.x, 2));
            }

            function ee() {
                let b = sc.weapons[fa.weapons[0]].range + 70;
                ba.forEach(b => {
                    let c = rc.getDist(b, fa, 0, 2);
                    let d = rc.getDirect(b, fa, 0, 2);
                    if (b.health <= 300 && de(b, fa) <= 300 && ka.dist2 <= 300 || ka.length && ka.reloads[ka.weaponIndex] <= a.tickRate * (window.pingTime >= 200 ? 2 : 1) || fa.reloads[fa.weaponIndex] * 1000 <= a.tickRate * (window.pingTime >= 200 ? 2 : 1)) {
                        console.log("preplace");
                        Mb(2, d);
                    }
                });
            }
            let fe = {
                tick: 0,
                delay: 0,
                time: [],
                manage: []
            };

            function ge(a, b) {
                if (!fe.manage[fe.tick + b]) {
                    fe.manage[fe.tick + b] = [a];
                } else {
                    fe.manage[fe.tick + b].push(a);
                }
            }

            function he(a) {
                ie.push(a);
            }
            let ie = [];
            let je;
            let ke = [];
            let le = [];
            let me = {
                insta: {
                    todo: false,
                    wait: false,
                    count: 4,
                    shame: 5
                },
                bull: false,
                antibull: 0,
                reloaded: false,
                stopspin: true
            };
            let ne = false;

            function oe(a) {
                O.tick++;
                ia = [];
                ja = [];
                ka = [];
                O.tickSpeed = performance.now() - O.lastTick;
                O.lastTick = performance.now();
                fe.tick++;
                fe.time.push(Date.now() - fe.delay <= 50 || Date.now() - fe.delay >= 175 ? "lag" : 1);
                if (fe.tick % 10 === 0) {
                    fe.time = [];
                }
                if (fe.tick % 300 === 0) {
                    if (t("visualType").value == "fz") {
                        Fd = window.pingTime;
                        Gd = window.pingTime;
                    }
                }
                fe.delay = Date.now();
                Z.forEach(a => {
                    a.forcePos = !a.visible;
                    a.visible = false;
                });
                for (let b = 0; b < a.length;) {
                    ha = pa(a[b]);
                    if (ha) {
                        ha.t1 = ha.t2 === undefined ? O.lastTick : ha.t2;
                        ha.t2 = O.lastTick;
                        ha.oldPos.x2 = ha.x2;
                        ha.oldPos.y2 = ha.y2;
                        ha.x1 = ha.x;
                        ha.y1 = ha.y;
                        ha.x2 = a[b + 1];
                        ha.y2 = a[b + 2];
                        ha.x3 = ha.x2 + (ha.x2 - ha.oldPos.x2);
                        ha.y3 = ha.y2 + (ha.y2 - ha.oldPos.y2);
                        ha.d1 = ha.d2 === undefined ? a[b + 3] : ha.d2;
                        ha.d2 = a[b + 3];
                        ha.dt = 0;
                        ha.buildIndex = a[b + 4];
                        ha.weaponIndex = a[b + 5];
                        ha.weaponVariant = a[b + 6];
                        ha.team = a[b + 7];
                        ha.isLeader = a[b + 8];
                        ha.oldSkinIndex = ha.skinIndex;
                        ha.oldTailIndex = ha.tailIndex;
                        ha.skinIndex = a[b + 9];
                        ha.tailIndex = a[b + 10];
                        ha.iconIndex = a[b + 11];
                        ha.zIndex = a[b + 12];
                        ha.visible = true;
                        ha.update(O.tickSpeed);
                        ha.dist2 = rc.getDist(ha, fa, 2, 2);
                        ha.aim2 = rc.getDirect(ha, fa, 2, 2);
                        ha.dist3 = rc.getDist(ha, fa, 3, 3);
                        ha.aim3 = rc.getDirect(ha, fa, 3, 3);
                        ha.damageThreat = 0;
                        if (ha.skinIndex == 45 && ha.shameTimer <= 0) {
                            ha.addShameTimer();
                        }
                        if (ha.oldSkinIndex == 45 && ha.skinIndex != 45) {
                            ha.shameTimer = 0;
                            ha.shameCount = 0;
                            if (ha == fa) {
                                Yb();
                            }
                        }
                        je = ha;
                        if (ha == fa) {
                            if (ba.length) {
                                ba.forEach(a => {
                                    a.onNear = false;
                                    if (a.active) {
                                        if (!a.onNear && rc.getDist(a, ha, 0, 2) <= a.scale + sc.weapons[ha.weapons[0]].range) {
                                            a.onNear = true;
                                        }
                                        if (a.isItem && a.owner) {
                                            if (!a.pps && ha.sid == a.owner.sid && rc.getDist(a, ha, 0, 2) > (parseInt(t("breakRange").value) || 0) && !a.breakObj && ![13, 14, 20].includes(a.id)) {
                                                a.breakObj = true;
                                                ea.push({
                                                    x: a.x,
                                                    y: a.y,
                                                    sid: a.sid
                                                });
                                            }
                                        }
                                    }
                                });
                                let a = ba.filter(a => a.trap && a.active && rc.getDist(a, ha, 0, 2) <= ha.scale + a.getScale() + 5 && !a.isTeamObject(ha)).sort(function(a, b) {
                                    return rc.getDist(a, ha, 0, 2) - rc.getDist(b, ha, 0, 2);
                                })[0];
                                if (a) {
                                    Ac.dist = rc.getDist(a, ha, 0, 2);
                                    Ac.aim = rc.getDirect(a, ha, 0, 2);
                                    if (!Ac.inTrap) {
                                        Ac.protect(Ac.aim, a);
                                    }
                                    Ac.inTrap = true;
                                    Ac.info = a;
                                } else {
                                    Ac.inTrap = false;
                                    Ac.info = {};
                                }
                            } else {
                                Ac.inTrap = false;
                            }
                        }
                        if (ha.weaponIndex < 9) {
                            ha.primaryIndex = ha.weaponIndex;
                            ha.primaryVariant = ha.weaponVariant;
                        } else if (ha.weaponIndex > 8) {
                            ha.secondaryIndex = ha.weaponIndex;
                            ha.secondaryVariant = ha.weaponVariant;
                        }
                    }
                    b += 13;
                }
                if (ie.length) {
                    ie.forEach(a => {
                        a();
                    });
                    ie = [];
                }
                if (Oc.length) {
                    Oc.forEach(a => {
                        Pc(...a);
                    });
                    Oc = [];
                }
                if (zc.stack.length) {
                    let a = 0;
                    let b = 0;
                    let c = {
                        x: null,
                        y: null
                    };
                    let d = {
                        x: null,
                        y: null
                    };
                    zc.stack.forEach(e => {
                        if (e.value >= 0) {
                            if (a == 0) {
                                c = {
                                    x: e.x,
                                    y: e.y
                                };
                            }
                            a += Math.abs(e.value);
                        } else {
                            if (b == 0) {
                                d = {
                                    x: e.x,
                                    y: e.y
                                };
                            }
                            b += Math.abs(e.value);
                        }
                    });
                    if (b > 0) {
                        zc.showText(d.x, d.y, Math.max(43, Math.min(50, b)), 0.18, 500, b, l);
                    }
                    if (a > 0) {
                        zc.showText(c.x, c.y, Math.max(43, Math.min(50, a)), 0.18, 500, a, k);
                    }
                    zc.stack = [];
                }
                if (Oc.length) {
                    Oc.forEach(a => {
                        Pc(...a);
                    });
                    Oc = [];
                }
                for (let b = 0; b < a.length;) {
                    ha = pa(a[b]);
                    if (ha) {
                        if (!ha.isTeam(fa)) {
                            ia.push(ha);
                            if (ha.dist2 <= sc.weapons[ha.primaryIndex == undefined ? 5 : ha.primaryIndex].range + fa.scale * 2) {
                                ja.push(ha);
                            }
                        }
                        ha.manageReload();
                        if (ha != fa) {
                            ha.addDamageThreat(fa);
                        }
                    }
                    b += 13;
                }
                if (fa && fa.alive) {
                    if (ia.length) {
                        if (fa && fa.alive) {
                            ke = Sb(fa, sc.list[fa.items[2]]);
                            le = fa.items[4] == 15 ? Sb(fa, sc.list[fa.items[4]]) : [];
                        }
                        ka = ia.sort(function(a, b) {
                            return a.dist2 - b.dist2;
                        })[0];
                    } else {}
                    if (O.tickQueue[O.tick]) {
                        O.tickQueue[O.tick].forEach(a => {
                            a();
                        });
                        O.tickQueue[O.tick] = null;
                    }
                    if (kc.length) {
                        kc.forEach(a => {
                            let b = a[0];
                            let c = a[1];
                            let d = a[2];
                            ha = pa(b);
                            let e = false;
                            if (ha && ha.health <= 0) {
                                if (!ha.death) {
                                    ha.death = true;
                                    if (ha != fa) {
                                        D(ha.name + " has died" + (Xb(d)[0] != "" ? "by " + Xb(d)[0] + "/" + Xb(d)[0].name : ""), "#db2727", "", "#db2727");
                                    }
                                    Ad(ha);
                                }
                            }
                            if (ha == fa) {
                                if (ha.skinIndex == 7 && (d == 5 || ha.latestTail == 13 && d == 2)) {
                                    if (la.reSync) {
                                        la.reSync = false;
                                        ha.setBullTick = true;
                                    }
                                    e = true;
                                }
                                if (jb) {
                                    let a = Xb(d);
                                    let b = [0.25, 0.45].map(a => a * sc.weapons[fa.weapons[0]].dmg * Wb());
                                    let c = !e && b.includes(d);
                                    let f = 1000 / 9;
                                    let g = function(a) {
                                        setTimeout(() => {
                                            Yb();
                                        }, a);
                                    };
                                    if (d >= (c ? 8 : 20) && ha.damageThreat >= 25 && O.tick - ha.antiTimer > 1) {
                                        ha.canEmpAnti = true;
                                        ha.antiTimer = O.tick;
                                        let a = 5;
                                        if (ha.shameCount < a) {
                                            Yb();
                                        } else {
                                            g(f);
                                        }
                                    } else {
                                        g(f);
                                    }
                                    if (d >= 20 && fa.skinIndex == 11) {
                                        Bc.canCounter = true;
                                    }
                                }
                            } else if (!ha.setPoisonTick && (ha.damaged == 5 || ha.latestTail == 13 && ha.damaged == 2)) {
                                ha.setPoisonTick = true;
                            }
                        });
                        kc = [];
                    }
                    Z.forEach(a => {
                        if (!a.visible && fa != a) {
                            a.reloads = {
                                0: 0,
                                1: 0,
                                2: 0,
                                3: 0,
                                4: 0,
                                5: 0,
                                6: 0,
                                7: 0,
                                8: 0,
                                9: 0,
                                10: 0,
                                11: 0,
                                12: 0,
                                13: 0,
                                14: 0,
                                15: 0,
                                53: 0
                            };
                        }
                        if (a.setBullTick) {
                            a.bullTimer = 0;
                        }
                        if (a.setPoisonTick) {
                            a.poisonTimer = 0;
                        }
                        a.updateTimer();
                    });
                    if (jb) {
                        if (ia.length) {
                            if (fa.canEmpAnti) {
                                fa.canEmpAnti = false;
                                if (ka.dist2 <= 300) {
                                    if (ka.reloads[53] == 0 && !la.safePrimary(ka) && !la.safeSecondary(ka)) {
                                        fa.empAnti = true;
                                        fa.soldierAnti = false;
                                    } else {
                                        fa.empAnti = false;
                                        fa.soldierAnti = true;
                                    }
                                }
                            }
                            let a = ba.filter(a => a.dmg && a.active && a.isTeamObject(fa) && rc.getDist(a, ka, 0, 3) <= a.scale + ka.scale).sort(function(a, b) {
                                return rc.getDist(a, ka, 0, 2) - rc.getDist(b, ka, 0, 2);
                            })[0];
                            if (a) {
                                if (ka.dist2 <= sc.weapons[fa.weapons[0]].range + fa.scale * 1.8 && n.predictTick) {
                                    Bc.canSpikeTick = true;
                                    Bc.syncHit = true;
                                    if (n.revTick && fa.weapons[1] == 15 && fa.reloads[53] == 0 && Bc.perfCheck(fa, ka)) {
                                        Bc.revTick = true;
                                    }
                                }
                            }
                            let b = ba.filter(a => a.dmg && a.active && !a.isTeamObject(fa) && rc.getDist(a, fa, 0, 3) < a.scale + fa.scale).sort(function(a, b) {
                                return rc.getDist(a, fa, 0, 2) - rc.getDist(b, fa, 0, 2);
                            })[0];
                            if (b && !Ac.inTrap) {
                                if (ka.dist2 <= sc.weapons[5].range + ka.scale * 1.8) {
                                    la.anti0Tick = 1;
                                }
                            }
                        }
                        if ((t("visualType").value == "ae" ? true : (fa.checkCanInsta(true) >= 100 ? fa.checkCanInsta(true) : fa.checkCanInsta(false)) >= (fa.weapons[1] == 10 ? 95 : 100)) && ka.dist2 <= sc.weapons[fa.weapons[1] == 10 ? fa.weapons[1] : fa.weapons[0]].range + ka.scale * 1.8 && (Bc.wait || t("visualType").value == "ae" && Math.floor(Math.random() * 2) == 0) && (t("visualType").value == "ae" && ka.shameCount >= ka.maxShameCount || t("visualType").value != "ae" && true) && !Bc.isTrue && !la.waitHit && fa.reloads[fa.weapons[0]] == 0 && fa.reloads[fa.weapons[1]] == 0 && (t("visualType").value == "ae" ? true : t("instaType").value == "oneShot" ? fa.reloads[53] <= (fa.weapons[1] == 10 ? 0 : O.tickRate) : true) && Bc.perfCheck(fa, ka)) {
                            if (fa.checkCanInsta(true) >= 100) {
                                Bc.nobull = t("visualType").value == "ae" ? false : Bc.canSpikeTick ? false : true;
                            } else {
                                Bc.nobull = false;
                            }
                            Bc.can = true;
                        } else {
                            Bc.can = false;
                        }
                        if ((O.tick - ka.bullTick) % 9 == 0 && ka.skinIndex == 7) {
                            D("anti bull: " + ka.name + "[" + ka.sid + "]", "#03ff0b", "", "#ff0303");
                        }
                        if (kb.q) {
                            Mb(0, cd());
                        }
                        if (kb.f) {
                            Mb(4, _c());
                        }
                        if (kb.v) {
                            Mb(2, _c());
                        }
                        if (kb.y) {
                            Mb(5, _c());
                        }
                        if (kb.h) {
                            Mb(fa.getItemType(22), _c());
                        }
                        if (kb.n) {
                            Mb(3, _c());
                        }
                        if (O.tick % 2 == 0) {
                            if (lb.place) {
                                let a = 1.25;
                                for (let b = -a; b <= a; b += a) {
                                    Vb(3, rc.getDirect(fa.oldPos, fa, 2, 2) + b);
                                }
                            } else if (lb.placeSpawnPads) {
                                for (let a = 0; a < Math.PI * 2; a += Math.PI / 2) {
                                    Vb(fa.getItemType(20), rc.getDirect(fa.oldPos, fa, 2, 2) + a);
                                }
                            }
                        }
                        if (Bc.can) {
                            Bc.changeType(fa.weapons[1] == 10 ? "rev" : Bc.nobull ? "nobull" : "normal");
                        }
                        if (Bc.canCounter) {
                            Bc.canCounter = false;
                            if (fa.reloads[fa.weapons[0]] == 0 && !Bc.isTrue) {
                                Bc.counterType();
                            }
                        }
                        if (Bc.canSpikeTick) {
                            Bc.canSpikeTick = false;
                            if (Bc.revTick) {
                                Bc.revTick = false;
                                if ([1, 2, 3, 4, 5, 6].includes(fa.weapons[0]) && fa.reloads[fa.weapons[1]] == 0 && !Bc.isTrue) {
                                    Bc.changeType("rev");
                                }
                            } else if ([1, 2, 3, 4, 5, 6].includes(fa.weapons[0]) && fa.reloads[fa.weapons[0]] == 0 && !Bc.isTrue) {
                                Bc.spikeTickType();
                                if (Bc.syncHit) {}
                            }
                        }
                        if (!Wc.middle && (Wc.left || Wc.right) && !Bc.isTrue) {
                            if (fa.weaponIndex != (Wc.right && fa.weapons[1] == 10 ? fa.weapons[1] : fa.weapons[0]) || fa.buildIndex > -1) {
                                Ib(Wc.right && fa.weapons[1] == 10 ? fa.weapons[1] : fa.weapons[0]);
                            }
                            if (fa.reloads[Wc.right && fa.weapons[1] == 10 ? fa.weapons[1] : fa.weapons[0]] == 0 && !la.waitHit) {
                                Jb();
                                la.waitHit = 1;
                                O.tickBase(() => {
                                    Jb();
                                    la.waitHit = 0;
                                }, 1);
                            }
                        }
                        if (t("visualType").value == "ae" && !Wc.left && !Wc.right && !Bc.isTrue && ka.dist2 <= sc.weapons[fa.weapons[0]].range + ka.scale * 1.8 && !Ac.inTrap) {
                            if (fa.weaponIndex != fa.weapons[0] || fa.buildIndex > -1) {
                                Ib(fa.weapons[0]);
                            }
                            if (fa.reloads[fa.weapons[0]] == 0 && !la.waitHit) {
                                la.autoAim = true;
                                Gb(0, 1);
                                Jb();
                                la.waitHit = 1;
                                O.tickBase(() => {
                                    la.autoAim = false;
                                    Jb();
                                    la.waitHit = 0;
                                }, 1);
                            }
                        }
                        if (Ac.inTrap) {
                            if (!Wc.left && !Wc.right && !Bc.isTrue) {
                                if (fa.weaponIndex != (Ac.notFast() ? fa.weapons[1] : fa.weapons[0]) || fa.buildIndex > -1) {
                                    Ib(Ac.notFast() ? fa.weapons[1] : fa.weapons[0]);
                                }
                                if (fa.reloads[Ac.notFast() ? fa.weapons[1] : fa.weapons[0]] == 0 && !la.waitHit) {
                                    Jb();
                                    la.waitHit = 1;
                                    O.tickBase(() => {
                                        Jb();
                                        la.waitHit = 0;
                                    }, 1);
                                }
                            }
                        }
                        if (Wc.middle && !Ac.inTrap) {
                            if (!Bc.isTrue && fa.reloads[fa.weapons[1]] == 0) {
                                if (la.ageInsta && fa.weapons[0] != 4 && fa.weapons[1] == 9 && fa.age >= 9 && ia.length) {
                                    Bc.bowMovement();
                                } else {
                                    Bc.rangeType();
                                }
                            }
                        }
                        if (kb.t && !Ac.inTrap) {
                            if (!Bc.isTrue && fa.reloads[fa.weapons[0]] == 0 && (fa.weapons[1] == 15 ? fa.reloads[fa.weapons[1]] == 0 : true) && (fa.weapons[0] == 5 || fa.weapons[0] == 4 && fa.weapons[1] == 15)) {
                                Bc[fa.weapons[0] == 4 && fa.weapons[1] == 15 ? "kmTickMovement" : "tickMovement"]();
                            }
                        }
                        if (kb["."] && !Ac.inTrap) {
                            if (!Bc.isTrue && fa.reloads[fa.weapons[0]] == 0 && ([9, 12, 13, 15].includes(fa.weapons[1]) ? fa.reloads[fa.weapons[1]] == 0 : true)) {
                                Bc.boostTickMovement();
                            }
                        }
                        if (fa.weapons[1] && !Wc.left && !Wc.right && !Ac.inTrap && !Bc.isTrue && (t("visualType").value != "ae" || ka.dist2 > sc.weapons[fa.weapons[0]].range + ka.scale * 1.8)) {
                            if (fa.reloads[fa.weapons[0]] == 0 && fa.reloads[fa.weapons[1]] == 0) {
                                if (!la.reloaded) {
                                    la.reloaded = true;
                                    let a = sc.weapons[fa.weapons[0]].spdMult < sc.weapons[fa.weapons[1]].spdMult ? 1 : 0;
                                    if (fa.weaponIndex != fa.weapons[a] || fa.buildIndex > -1) {
                                        Ib(fa.weapons[a]);
                                    }
                                }
                                if (t("visualType").value == "ae") {
                                    if (!me.stopspin) {
                                        setTimeout(() => {
                                            me.stopspin = true;
                                        }, 500);
                                    }
                                }
                            } else {
                                la.reloaded = false;
                                if (t("visualType").value == "ae") {
                                    me.stopspin = false;
                                }
                                if (fa.reloads[fa.weapons[0]] > 0) {
                                    if (fa.weaponIndex != fa.weapons[0] || fa.buildIndex > -1) {
                                        Ib(fa.weapons[0]);
                                    }
                                } else if (fa.reloads[fa.weapons[0]] == 0 && fa.reloads[fa.weapons[1]] > 0) {
                                    if (fa.weaponIndex != fa.weapons[1] || fa.buildIndex > -1) {
                                        Ib(fa.weapons[1]);
                                    }
                                    if (t("visualType").value == "ae") {
                                        if (!me.stopspin) {
                                            setTimeout(() => {
                                                me.stopspin = true;
                                            }, 500);
                                        }
                                    }
                                }
                            }
                        }
                        if (!Ac.inTrap && !Ac.replaced) {
                            Ac.autoPlace();
                        }
                        if (!kb.q && !kb.f && !kb.v && !kb.h && !kb.n) {
                            T("D", cd());
                        }
                        let a = function() {
                            if (la.anti0Tick > 0) {
                                Gb(6, 0);
                            } else {
                                if (Wc.left || Wc.right) {
                                    if (fa.shameCount > 0 && (O.tick - fa.bullTick) % 9 == 0 && fa.skinIndex != 45 || la.reSync) {
                                        Gb(7, 0);
                                    } else {
                                        if (!Wc.left) {
                                            la.autoAim = false;
                                        }
                                        if (Wc.left) {
                                            Gb(21, 1);
                                            if (ka.length && !la.autoAim) {
                                                la.autoAim = true;
                                            }
                                            Gb(fa.reloads[fa.weapons[0]] == 0 ? t("weaponGrind").checked ? 40 : 7 : fa.empAnti ? 22 : fa.soldierAnti ? 6 : t("antiBullType").value == "abreload" && ka.antiBull > 0 ? 11 : ka.dist2 <= 300 ? t("antiBullType").value == "abalway" && ka.reloads[ka.primaryIndex] == 0 ? 11 : 6 : ic(1, 1), 0);
                                        } else if (Wc.right) {
                                            Gb(fa.reloads[Wc.right && fa.weapons[1] == 10 ? fa.weapons[1] : fa.weapons[0]] == 0 ? 40 : fa.empAnti ? 22 : 6, 0);
                                        }
                                    }
                                } else if (Ac.inTrap) {
                                    if (Ac.info.health <= sc.weapons[fa.weaponIndex].dmg ? false : fa.reloads[fa.weapons[1] == 10 ? fa.weapons[1] : fa.weapons[0]] == 0) {
                                        Gb(40, 0);
                                    } else if (fa.shameCount > 0 && (O.tick - fa.bullTick) % 9 == 0 && fa.skinIndex != 45 || la.reSync) {
                                        Gb(7, 0);
                                    } else {
                                        Gb(fa.empAnti || ka.dist2 > 300 || !ia.length ? 22 : 6, 0);
                                    }
                                } else if (fa.empAnti || fa.soldierAnti) {
                                    Gb(fa.empAnti ? 22 : 6, 0);
                                } else if (fa.shameCount > 0 && (O.tick - fa.bullTick) % 9 == 0 && fa.skinIndex != 45 || la.reSync) {
                                    Gb(7, 0);
                                } else if (ka.dist2 <= 300) {
                                    Gb(t("antiBullType").value == "abreload" && ka.antiBull > 0 ? 11 : t("antiBullType").value == "abalway" && ka.reloads[ka.primaryIndex] == 0 ? 11 : 6, 0);
                                } else {
                                    ic(1);
                                }
                                if (ka.antiBull > 0 || fa.reloads[fa.weaponIndex] != 0 && fa.reloads[fa.weaponIndex] != 1) {
                                    for (let a = _d(-30); a < _d(30); a += _d(30)) {
                                        let b = ba.filter(a => a.active && rc.getDist(a, fa, 0, 2) < 300);
                                        if (b) {
                                            b.forEach(c => {
                                                if (b.health <= sc.weapons[fa.weaponIndex].dmg || ka.length && b.health <= sc.weapons[ka.weaponIndex].dmg) {
                                                    Mb(2, rc.getDirect(c, fa, 0, 2) + a);
                                                }
                                            });
                                        }
                                    }
                                }
                            }
                        };
                        let b = function() {
                            if (Wc.left || Wc.right || me.bull) {
                                Gb(21, 1);
                            } else if (Ac.inTrap) {
                                Gb(21, 1);
                            } else {
                                Gb(11, 1);
                            }
                        };
                        if (Aa.style.display != "block" && !Bc.ticking) {
                            a();
                            b();
                        }
                        if (ia.length && !Ac.inTrap) {
                            zd();
                        } else if (la.autoPush) {
                            la.autoPush = false;
                            T("a", R || undefined, 1);
                        }
                        if (!la.autoPush && Mc.active && ia.length && !Ac.inTrap && !Bc.ticking) {}
                        Bc.ticking &&= false;
                        Bc.syncHit &&= false;
                        fa.empAnti &&= false;
                        fa.soldierAnti &&= false;
                        if (la.anti0Tick > 0) {
                            la.anti0Tick--;
                        }
                        Ac.replaced &&= false;
                        Ac.antiTrapped &&= false;
                    }
                }
                if (e.length) {
                    e.forEach(a => {
                        if (true) {
                            a[0].ssend("player", fa, ka, botIDS);
                        }
                    });
                }
            }

            function pe(a) {
                rc.removeAllChildren(Ha);
                var b = 1;
                for (var c = 0; c < a.length; c += 3) {
                    (function(b) {
                        rc.generateElement({
                            class: "leaderHolder",
                            parent: Ha,
                            children: [rc.generateElement({
                                class: "leaderboardItem",
                                style: a[b] == fa.sid ? "color: rgba(255,255,255,1); font-size: 18px;" : "color: rgba(255,255,255,0.6); font-size: 18px; padding: 2px;",
                                text: (a[b + 1] != "" ? a[b + 1] : "unknown") + " [" + a[b] + "]"
                            }), rc.generateElement({
                                class: "a",
                                style: a[b] == fa.sid ? "color: rgba(255,255,255,1); font-size: 18px;" : "color: rgba(255,255,255,0.6); font-size: 18px; padding: 2px;",
                                text: " " + rc.kFormat(a[b + 2]) || "â€Ž 0"
                            })]
                        });
                    })(c);
                    b++;
                }
            }

            function qe(a) {
                for (let b = 0; b < a.length;) {
                    tc.add(a[b], a[b + 1], a[b + 2], a[b + 3], a[b + 4], a[b + 5], sc.list[a[b + 6]], true, a[b + 7] >= 0 ? {
                        sid: a[b + 7]
                    } : null);
                    b += 8;
                }
            }

            function re(b) {
                for (let a = 0; a < Y.length; ++a) {
                    Y[a].forcePos = !Y[a].visible;
                    Y[a].visible = false;
                }
                if (b) {
                    let c = performance.now();
                    for (let d = 0; d < b.length;) {
                        ha = qa(b[d]);
                        if (ha) {
                            ha.index = b[d + 1];
                            ha.t1 = ha.t2 === undefined ? c : ha.t2;
                            ha.t2 = c;
                            ha.x1 = ha.x;
                            ha.y1 = ha.y;
                            ha.x2 = b[d + 2];
                            ha.y2 = b[d + 3];
                            ha.d1 = ha.d2 === undefined ? b[d + 4] : ha.d2;
                            ha.d2 = b[d + 4];
                            ha.health = b[d + 5];
                            ha.dt = 0;
                            ha.visible = true;
                        } else {
                            ha = yc.spawn(b[d + 2], b[d + 3], b[d + 4], b[d + 1]);
                            ha.x2 = ha.x;
                            ha.y2 = ha.y;
                            ha.d2 = ha.dir;
                            ha.health = b[d + 5];
                            if (!yc.aiTypes[b[d + 1]].name) {
                                ha.name = a.cowNames[b[d + 6]];
                            }
                            ha.forcePos = true;
                            ha.sid = b[d];
                            ha.visible = true;
                        }
                        d += 7;
                    }
                }
            }

            function se(a) {
                ha = qa(a);
                if (ha) {
                    ha.startAnim();
                }
            }

            function te(b, c, d) {
                ha = pa(b);
                console.log(sc.weapons[ha.weaponIndex].speed);
                if (ha) {
                    ha.startAnim(c, d);
                    ha.gatherIndex = d;
                    ha.gathering = 1;
                    if (c) {
                        let c = tc.hitObj;
                        tc.hitObj = [];
                        O.tickBase(() => {
                            ha = pa(b);
                            let e = sc.weapons[d].dmg * a.weaponVariants[ha[(d < 9 ? "prima" : "seconda") + "ryVariant"]].val * (sc.weapons[d].sDmg || 1) * (ha.skinIndex == 40 ? 3.3 : 1);
                            c.forEach(a => {
                                a.healthMov = a.health - e / 2;
                                a.health -= e;
                                if (t("visualType").value == "pacifist") {
                                    let b;
                                    let c;
                                    let d;
                                    let f = (() => {
                                        const a = (a, b) => {
                                            return Math.floor(Math.random() * (b - a + 1)) + a;
                                        };
                                        b = a(0, 360);
                                        c = a(42, 98);
                                        d = a(40, 90);
                                    })();

                                    function g(a, b, c) {
                                        c /= 100;
                                        const d = b * Math.min(c, 1 - c) / 100;
                                        const e = b => {
                                            const e = (b + a / 30) % 12;
                                            const f = c - d * Math.max(Math.min(e - 3, 9 - e, 1), -1);
                                            return Math.round(f * 255).toString(16).padStart(2, "0");
                                        };
                                        return "#" + e(0) + e(8) + e(4);
                                    }
                                    console.log(g(b, c, d));
                                    ue(a.x, a.y, e, g(b, c, d));
                                }
                            });
                        }, 1);
                    }
                }
            }

            function ue(a, b, c, d) {
                zc.showText(a, b, 30, 0.15, 550, Math.round(c), d);
            }

            function ve(b, c) {
                ha = ra(c);
                if (ha) {
                    ha.xWiggle += a.gatherWiggle * Math.cos(b);
                    ha.yWiggle += a.gatherWiggle * Math.sin(b);
                    if (ha.health) {
                        tc.hitObj.push(ha);
                    }
                }
            }

            function we(b, c) {
                ha = ra(b);
                if (ha) {
                    if (a.anotherVisual) {
                        ha.lastDir = c;
                    } else {
                        ha.dir = c;
                    }
                    ha.xWiggle += a.gatherWiggle * Math.cos(c + Math.PI);
                    ha.yWiggle += a.gatherWiggle * Math.sin(c + Math.PI);
                }
            }

            function xe(a, b, c) {
                if (fa) {
                    fa[a] = b;
                    if (a == "points") {
                        if (n.autoBuy) {
                            Cc.hat();
                            Cc.acc();
                        }
                    }
                }
            }

            function ye(a, b) {
                if (a) {
                    if (b) {
                        fa.weapons = a;
                        fa.primaryIndex = fa.weapons[0];
                        fa.secondaryIndex = fa.weapons[1];
                        if (!Bc.isTrue) {
                            Ib(fa.weapons[0]);
                        }
                    } else {
                        fa.items = a;
                    }
                }
                for (let c = 0; c < sc.list.length; c++) {
                    let a = sc.weapons.length + c;
                    t("actionBarItem" + a).style.display = fa.items.indexOf(sc.list[c].id) >= 0 ? "inline-block" : "none";
                }
                for (let c = 0; c < sc.weapons.length; c++) {
                    t("actionBarItem" + c).style.display = fa.weapons[sc.weapons[c].type] == sc.weapons[c].id ? "inline-block" : "none";
                }
                let c = fa.weapons[0] == 3 && fa.weapons[1] == 15;
                if (c) {
                    t("actionBarItem3").style.display = "none";
                    t("actionBarItem4").style.display = "inline-block";
                }
            }

            function ze(a, b, c, d, e, f, g, h) {
                xc.addProjectile(a, b, c, d, e, f, null, null, g, nb).sid = h;
                Oc.push(Array.prototype.slice.call(arguments));
            }

            function Ae(a, b) {
                for (let c = 0; c < ca.length; ++c) {
                    if (ca[c].sid == a) {
                        ca[c].range = b;
                        let a = tc.hitObj;
                        tc.hitObj = [];
                        O.tickBase(() => {
                            let b = ca[c].dmg;
                            a.forEach(a => {
                                if (a.projDmg) {
                                    a.health -= b;
                                }
                            });
                        }, 1);
                    }
                }
            }

            function Be(a, b) {
                let c = na(bots, a);
                if (c) {}
            }

            function Ce(a, b) {
                if (fa) {
                    fa.team = a;
                    fa.isOwner = b;
                    if (a == null) {
                        aa = [];
                    }
                }
            }

            function De(a) {
                aa = a;
            }

            function Ee(a, b, c) {
                if (c) {
                    if (!a) {
                        fa.tails[b] = 1;
                    } else {
                        fa.latestTail = b;
                    }
                } else if (!a) {
                    fa.skins[b] = 1;
                    if (b == 7) {
                        la.reSync = true;
                    }
                } else {
                    fa.latestSkin = b;
                }
            }

            function Fe(b, c) {
                let d = pa(b);
                let e = 0;
                let f = false;
                D(c, "#fff", d.name + "[" + d.sid + "]:", d == fa || d.team && d.team == fa.team ? "#279df1" : "#fff");
                if (d) {
                    if (a.anotherVisual) {
                        X.push(new Ab(d.x, d.y, c, d));
                    } else {
                        d.chatMessage = (a => {
                            return a;
                        })(c);
                        d.chatCountdown = a.chatCountdown;
                    }
                } else {}
            }

            function Ge(a) {
                Fc = a;
            }

            function He(b, c, d, e, f) {
                if (a.anotherVisual) {
                    zc.stack.push({
                        x: b,
                        y: c,
                        value: d
                    });
                } else {
                    zc.showText(b, c, 50, 0.18, 500, Math.abs(d), f);
                }
            }

            function Ie(a, b, c, d, e) {
                let f = a + c * Math.cos(d);
                let g = b + c * Math.sin(d);
                let h = c * 0.4;
                e.moveTo(a, b);
                e.beginPath();
                e.quadraticCurveTo((a + f) / 2 + h * Math.cos(d + Math.PI / 2), (b + g) / 2 + h * Math.sin(d + Math.PI / 2), f, g);
                e.quadraticCurveTo((a + f) / 2 - h * Math.cos(d + Math.PI / 2), (b + g) / 2 - h * Math.sin(d + Math.PI / 2), a, b);
                e.closePath();
                e.fill();
                e.stroke();
            }

            function Je(a, b, c, d, e, f) {
                d = d || xa;
                d.beginPath();
                d.arc(a, b, c, 0, Math.PI * 2);
                if (!f) {
                    d.fill();
                }
                if (!e) {
                    d.stroke();
                }
            }

            function Ke(a, b, c, d, e, f) {
                d = d || xa;
                d.beginPath();
                d.arc(a, b, c, 0, Math.PI * 2);
                if (!f) {
                    d.fill();
                }
                if (!e) {
                    d.stroke();
                }
            }

            function Le(a, b, c, d) {
                let e = Math.PI / 2 * 3;
                let f;
                let g;
                let h = Math.PI / b;
                a.beginPath();
                a.moveTo(0, -c);
                for (let i = 0; i < b; i++) {
                    f = Math.cos(e) * c;
                    g = Math.sin(e) * c;
                    a.lineTo(f, g);
                    e += h;
                    f = Math.cos(e) * d;
                    g = Math.sin(e) * d;
                    a.lineTo(f, g);
                    e += h;
                }
                a.lineTo(0, -c);
                a.closePath();
            }

            function Me(a, b, c, d) {
                let e = Math.PI / 2 * 3;
                let f;
                let g;
                let h = Math.PI / b;
                a.beginPath();
                a.moveTo(0, -c);
                for (let i = 0; i < b; i++) {
                    f = Math.cos(e) * c;
                    g = Math.sin(e) * c;
                    a.lineTo(f, g);
                    e += h;
                    f = Math.cos(e) * d;
                    g = Math.sin(e) * d;
                    a.lineTo(f, g);
                    e += h;
                }
                a.lineTo(0, -c);
                a.closePath();
            }

            function Ne(a, b, c, d, e, f, g) {
                if (!g) {
                    e.fillRect(a - c / 2, b - d / 2, c, d);
                }
                if (!f) {
                    e.strokeRect(a - c / 2, b - d / 2, c, d);
                }
            }

            function Oe(a, b, c, d, e, f, g) {
                if (!g) {
                    e.fillRect(a - c / 2, b - d / 2, c, d);
                }
                if (!f) {
                    e.strokeRect(a - c / 2, b - d / 2, c, d);
                }
            }

            function Pe(a, b, c, d, e, f, g, h) {
                f.save();
                f.translate(a, b);
                e = Math.ceil(e / 2);
                for (let i = 0; i < e; i++) {
                    Ne(0, 0, c * 2, d, f, g, h);
                    f.rotate(Math.PI / e);
                }
                f.restore();
            }

            function Qe(a, b, c, d) {
                let e = Math.PI / 2 * 3;
                let f;
                let g;
                let h = Math.PI / b;
                let i;
                a.beginPath();
                a.moveTo(0, -d);
                for (let f = 0; f < b; f++) {
                    i = rc.randInt(c + 0.9, c * 1.2);
                    a.quadraticCurveTo(Math.cos(e + h) * i, Math.sin(e + h) * i, Math.cos(e + h * 2) * d, Math.sin(e + h * 2) * d);
                    e += h * 2;
                }
                a.lineTo(0, -d);
                a.closePath();
            }

            function Re(a, b) {
                b = b || xa;
                let c = a * (Math.sqrt(3) / 2);
                b.beginPath();
                b.moveTo(0, -c / 2);
                b.lineTo(-a / 2, c / 2);
                b.lineTo(a / 2, c / 2);
                b.lineTo(0, -c / 2);
                b.fill();
                b.closePath();
            }

            function Se() {
                var b = a.mapScale / 2;
                tc.add(0, b, b + 200, 0, a.treeScales[3], 0);
                tc.add(1, b, b - 480, 0, a.treeScales[3], 0);
                tc.add(2, b + 300, b + 450, 0, a.treeScales[3], 0);
                tc.add(3, b - 950, b - 130, 0, a.treeScales[2], 0);
                tc.add(4, b - 750, b - 400, 0, a.treeScales[3], 0);
                tc.add(5, b - 700, b + 400, 0, a.treeScales[2], 0);
                tc.add(6, b + 800, b - 200, 0, a.treeScales[3], 0);
                tc.add(7, b - 260, b + 340, 0, a.bushScales[3], 1);
                tc.add(8, b + 760, b + 310, 0, a.bushScales[3], 1);
                tc.add(9, b - 800, b + 100, 0, a.bushScales[3], 1);
                tc.add(10, b - 800, b + 300, 0, sc.list[4].scale, sc.list[4].id, sc.list[10]);
                tc.add(11, b + 650, b - 390, 0, sc.list[4].scale, sc.list[4].id, sc.list[10]);
                tc.add(12, b - 400, b - 450, 0, a.rockScales[2], 2);
            }
            let Te = 0;

            function Ue(a, b) {
                xa.fillStyle = "#bf8f54";
                const c = Date.now();
                da.filter(a => a.active).forEach(d => {
                    const e = d.angle;
                    if (!d.startTime) {
                        d.startTime = c;
                        d.angle = 0;
                        d.radius = 0.1;
                        Te = 0.1;
                    }
                    const f = c - d.startTime;
                    const g = 1;
                    d.alpha = Math.max(0, g - f / 1500);
                    d.animate(Ra);
                    xa.globalAlpha = d.alpha;
                    xa.strokeStyle = ab;
                    xa.save();
                    xa.translate(d.x - a, d.y - b);
                    d.radius -= 0.001;
                    Te -= 0.0001;
                    d.angle += Lb(3);
                    d.x += Te * 20;
                    d.y += Te * 20;
                    xa.rotate(d.angle);
                    We(d, xa);
                    xa.restore();
                    if (f > 1500) {
                        d.active = false;
                        d.startTime = null;
                    }
                });
            }

            function Ve(a, b, c) {
                xa.globalAlpha = 1;
                xa.fillStyle = "#91b2db";
                for (var d = 0; d < Z.length; ++d) {
                    ha = Z[d];
                    if (ha.zIndex == c) {
                        ha.animate(Ra);
                        if (ha.visible) {
                            ha.skinRot += Ra * 0.002;
                            Wa = !n.showDir && !t("visualType").value == "ae" && ha == fa ? n.attackDir ? dd() : _c() : ha.dir || 0;
                            xa.save();
                            xa.translate(ha.x - a, ha.y - b);
                            xa.rotate(Wa + ha.dirPlus);
                            Xe(ha, xa);
                            xa.restore();
                        }
                    }
                }
            }

            function We(b, c) {
                c = c || xa;
                c.lineWidth = cb;
                c.lineJoin = "miter";
                let d = Math.PI / 4 * (sc.weapons[b.weaponIndex].armS || 1);
                let e = b.buildIndex < 0 ? sc.weapons[b.weaponIndex].hndS || 1 : 1;
                let f = b.buildIndex < 0 ? sc.weapons[b.weaponIndex].hndD || 1 : 1;
                jf(13, c, b);
                if (b.buildIndex < 0 && !sc.weapons[10].aboveHand) {
                    lf(sc.weapons[10], a.weaponVariants[1].src || "", b.scale, 0, c);
                    if (sc.weapons[b.weaponIndex].projectile != undefined && !sc.weapons[b.weaponIndex].hideProjectile) {
                        of(b.scale, 0, sc.projectiles[sc.weapons[b.weaponIndex].projectile], xa);
                    }
                }
                c.fillStyle = "#ececec";
                Je(b.scale * Math.cos(d), b.scale * Math.sin(d), 14);
                Je(b.scale * f * Math.cos(-d * e), b.scale * f * Math.sin(-d * e), 14);
                if (b.buildIndex < 0 && sc.weapons[10].aboveHand) {
                    lf(sc.weapons[10], a.weaponVariants[1].src || "", b.scale, 0, c);
                    if (sc.weapons[b.weaponIndex].projectile != undefined && !sc.weapons[b.weaponIndex].hideProjectile) {
                        of(b.scale, 0, sc.projectiles[sc.weapons[b.weaponIndex].projectile], xa);
                    }
                }
                if (b.buildIndex >= 0) {
                    var g = vf(sc.list[b.buildIndex]);
                    c.drawImage(g, b.scale - sc.list[b.buildIndex].holdOffset, -g.width / 2);
                }
                Je(0, 0, b.scale, c);
                $e(48, c, null, b);
            }

            function Xe(b, c) {
                c = c || xa;
                c.lineWidth = cb;
                c.lineJoin = "miter";
                if (t("visualType").value == "pacifist") {
                    c.shadowColor = "rgba(0, 0, 0, 0.5)";
                    c.shadowBlur = 10;
                    c.shadowOffsetY = 5;
                }
                c.strokeStyle = bb;
                let d = Math.PI / 4 * (sc.weapons[b.weaponIndex].armS || 1);
                let e = b.buildIndex < 0 ? sc.weapons[b.weaponIndex].hndS || 1 : 1;
                let f = b.buildIndex < 0 ? sc.weapons[b.weaponIndex].hndD || 1 : 1;
                let g = b == fa && b.weapons[0] == 3 && b.weapons[1] == 15;
                if (b.tailIndex > 0) {
                    ff(b.tailIndex, c, b);
                }
                if (b.buildIndex < 0 && !sc.weapons[b.weaponIndex].aboveHand) {
                    lf(sc.weapons[g ? 4 : b.weaponIndex], a.weaponVariants[b.weaponVariant].src, b.scale, 0, c);
                    if (sc.weapons[b.weaponIndex].projectile != undefined && !sc.weapons[b.weaponIndex].hideProjectile) {
                        of(b.scale, 0, sc.projectiles[sc.weapons[b.weaponIndex].projectile], xa);
                    }
                }
                c.fillStyle = a.skinColors[b.skinColor];
                Je(b.scale * Math.cos(d), b.scale * Math.sin(d), 14);
                Je(b.scale * f * Math.cos(-d * e), b.scale * f * Math.sin(-d * e), 14);
                if (b.buildIndex < 0 && sc.weapons[b.weaponIndex].aboveHand) {
                    lf(sc.weapons[b.weaponIndex], a.weaponVariants[b.weaponVariant].src, b.scale, 0, c);
                    if (sc.weapons[b.weaponIndex].projectile != undefined && !sc.weapons[b.weaponIndex].hideProjectile) {
                        of(b.scale, 0, sc.projectiles[sc.weapons[b.weaponIndex].projectile], xa);
                    }
                }
                if (b.buildIndex >= 0) {
                    var h = vf(sc.list[b.buildIndex]);
                    c.drawImage(h, b.scale - sc.list[b.buildIndex].holdOffset, -h.width / 2);
                }
                Je(0, 0, b.scale, c);
                if (b.skinIndex > 0) {
                    c.rotate(Math.PI / 2);
                    cf(b.skinIndex, c, null, b);
                }
            }
            var Ye = {};
            var Ze = {};

            function $e(a, b, c, d) {
                bf = Ye[a];
                if (!bf) {
                    var e = new Image();
                    e.onload = function() {
                        this.isLoaded = true;
                        this.onload = null;
                    };
                    e.src = "https://moomoo.io/img/hats/hat_" + a + ".png";
                    Ye[a] = e;
                    bf = e;
                }
                var f = c || Ze[a];
                if (!f) {
                    for (var g = 0; g < vc.length; ++g) {
                        if (vc[g].id == a) {
                            f = vc[g];
                            break;
                        }
                    }
                    Ze[a] = f;
                }
                if (bf.isLoaded) {
                    b.drawImage(bf, -f.scale / 2, -f.scale / 2, f.scale, f.scale);
                }
                if (!c && f.topSprite) {
                    b.save();
                    b.rotate(d.skinRot);
                    $e(a + "_top", b, f, d);
                    b.restore();
                }
            }
            let _e = {};
            let af = {};
            let bf;

            function cf(a, b, c, d) {
                bf = _e[a];
                if (!bf) {
                    let b = new Image();
                    b.onload = function() {
                        this.isLoaded = true;
                        this.onload = null;
                    };
                    b.src = "https://moomoo.io/img/hats/hat_" + a + ".png";
                    _e[a] = b;
                    bf = b;
                }
                let e = c || af[a];
                if (!e) {
                    for (let b = 0; b < vc.length; ++b) {
                        if (vc[b].id == a) {
                            e = vc[b];
                            break;
                        }
                    }
                    af[a] = e;
                }
                if (bf.isLoaded) {
                    b.drawImage(bf, -e.scale / 2, -e.scale / 2, e.scale, e.scale);
                }
                if (!c && e.topSprite) {
                    b.save();
                    b.rotate(d.skinRot);
                    cf(a + "_top", b, e, d);
                    b.restore();
                }
            }
            let df = {};
            let ef = {};

            function ff(a, b, c) {
                bf = df[a];
                if (!bf) {
                    let b = new Image();
                    b.onload = function() {
                        this.isLoaded = true;
                        this.onload = null;
                    };
                    b.src = "https://moomoo.io/img/accessories/access_" + a + ".png";
                    df[a] = b;
                    bf = b;
                }
                let d = ef[a];
                if (!d) {
                    for (let b = 0; b < wc.length; ++b) {
                        if (wc[b].id == a) {
                            d = wc[b];
                            break;
                        }
                    }
                    ef[a] = d;
                }
                if (bf.isLoaded) {
                    b.save();
                    b.translate(-20 - (d.xOff || 0), 0);
                    if (d.spin) {
                        b.rotate(c.skinRot);
                    }
                    b.drawImage(bf, -(d.scale / 2), -(d.scale / 2), d.scale, d.scale);
                    b.restore();
                }
            }
            var gf = {};
            var hf = {};

            function jf(a, b, c) {
                bf = gf[a];
                if (!bf) {
                    var d = new Image();
                    d.onload = function() {
                        this.isLoaded = true;
                        this.onload = null;
                    };
                    d.src = "https://moomoo.io/img/accessories/access_" + a + ".png";
                    gf[a] = d;
                    bf = d;
                }
                var e = hf[a];
                if (!e) {
                    for (var f = 0; f < wc.length; ++f) {
                        if (wc[f].id == a) {
                            e = wc[f];
                            break;
                        }
                    }
                    hf[a] = e;
                }
                if (bf.isLoaded) {
                    b.save();
                    b.translate(-20 - (e.xOff || 0), 0);
                    if (e.spin) {
                        b.rotate(c.skinRot);
                    }
                    b.drawImage(bf, -(e.scale / 2), -(e.scale / 2), e.scale, e.scale);
                    b.restore();
                }
            }
            let kf = {};

            function lf(a, b, c, d, e) {
                let f = a.src + (b || "");
                let g = kf[f];
                if (!g) {
                    g = new Image();
                    g.onload = function() {
                        this.isLoaded = true;
                    };
                    g.src = "https://moomoo.io/img/weapons/" + f + ".png";
                    kf[f] = g;
                }
                if (g.isLoaded) {
                    e.drawImage(g, c + a.xOff - a.length / 2, d + a.yOff - a.width / 2, a.length, a.width);
                }
            }

            function mf(a, b, c) {
                for (let d = 0; d < ca.length; d++) {
                    ha = ca[d];
                    if (ha.active && ha.layer == a && ha.inWindow) {
                        ha.update(Ra);
                        if (ha.active && Af(ha.x - b, ha.y - c, ha.scale)) {
                            xa.save();
                            xa.translate(ha.x - b, ha.y - c);
                            xa.rotate(ha.dir);
                            of(0, 0, ha, xa, 1);
                            xa.restore();
                        }
                    }
                };
            }
            let nf = {};

            function of(a, b, c, d, e) {
                if (c.src) {
                    let e = sc.projectiles[c.indx].src;
                    let f = nf[e];
                    if (!f) {
                        f = new Image();
                        f.onload = function() {
                            this.isLoaded = true;
                        };
                        f.src = "https://moomoo.io/img/weapons/" + e + ".png";
                        nf[e] = f;
                    }
                    if (f.isLoaded) {
                        d.drawImage(f, a - c.scale / 2, b - c.scale / 2, c.scale, c.scale);
                    }
                } else if (c.indx == 1) {
                    d.fillStyle = "#939393";
                    Je(a, b, c.scale, d);
                }
            }
            let pf = {};

            function qf(a, b) {
                let c = a.index;
                let d = pf[c];
                if (!d) {
                    let b = new Image();
                    b.onload = function() {
                        this.isLoaded = true;
                        this.onload = null;
                    };
                    b.src = "https://moomoo.io/img/animals/" + a.src + ".png";
                    d = b;
                    pf[c] = d;
                }
                if (d.isLoaded) {
                    let c = a.scale * 1.2 * (a.spriteMlt || 1);
                    b.drawImage(d, -c, -c, c * 2, c * 2);
                }
            }

            function rf(b, c, d, e) {
                let f = a.riverWidth + e;
                let g = a.mapScale / 2 - c - f / 2;
                if (g < Pa && g + f > 0) {
                    d.fillRect(0, g, Oa, f);
                }
            }
            let sf = {};

            function tf(b) {
                let c = b.y >= a.mapScale - a.snowBiomeTop ? 2 : b.y <= a.snowBiomeTop ? 1 : 0;
                let d = b.type + "_" + b.scale + "_" + c;
                let e = sf[d];
                if (!e) {
                    let a = 15;
                    let f = document.createElement("canvas");
                    f.width = f.height = b.scale * 2.1 + cb;
                    let g = f.getContext("2d");
                    g.translate(f.width / 2, f.height / 2);
                    g.rotate(rc.randFloat(0, Math.PI));
                    g.strokeStyle = ab;
                    g.lineWidth = cb;
                    if (b.type == 0) {
                        let a;
                        let b = rc.randInt(5, 7);
                        g.globalAlpha = 0.8;
                        for (let d = 0; d < 2; ++d) {
                            a = ha.scale * (!d ? 1 : 0.5);
                            Le(g, b, a, a * 0.7);
                            g.fillStyle = !c ? !d ? "#9ebf57" : "#b4db62" : !d ? "#e3f1f4" : "#fff";
                            g.fill();
                            if (!d) {
                                g.stroke();
                                g.shadowBlur = null;
                                g.shadowColor = null;
                                g.globalAlpha = 1;
                            }
                        }
                    } else if (b.type == 1) {
                        if (c == 2) {
                            g.fillStyle = "#606060";
                            Le(g, 6, b.scale * 0.3, b.scale * 0.71);
                            g.fill();
                            g.stroke();
                            g.fillStyle = "#89a54c";
                            Je(0, 0, b.scale * 0.55, g);
                            g.fillStyle = "#a5c65b";
                            Je(0, 0, b.scale * 0.3, g, true);
                        } else {
                            Qe(g, 6, ha.scale, ha.scale * 0.7);
                            g.fillStyle = c ? "#e3f1f4" : "#89a54c";
                            g.fill();
                            g.stroke();
                            g.fillStyle = c ? "#6a64af" : "#c15555";
                            let a;
                            let b = 4;
                            let d = Math.PI * 2 / b;
                            for (let c = 0; c < b; ++c) {
                                a = rc.randInt(ha.scale / 3.5, ha.scale / 2.3);
                                Je(a * Math.cos(d * c), a * Math.sin(d * c), rc.randInt(10, 12), g);
                            }
                        }
                    } else if (b.type == 2 || b.type == 3) {
                        g.fillStyle = b.type == 2 ? c == 2 ? "#938d77" : "#939393" : "#e0c655";
                        Le(g, 3, b.scale, b.scale);
                        g.fill();
                        g.stroke();
                        g.shadowBlur = null;
                        g.shadowColor = null;
                        g.fillStyle = b.type == 2 ? c == 2 ? "#b2ab90" : "#bcbcbc" : "#ebdca3";
                        Le(g, 3, b.scale * 0.55, b.scale * 0.65);
                        g.fill();
                    }
                    e = f;
                    sf[d] = e;
                }
                return e;
            }
            let uf = [];

            function vf(b, c) {
                let d = uf[b.id];
                if (!d || c) {
                    let e = 0;
                    let f = document.createElement("canvas");
                    f.width = f.height = b.scale * 2.5 + cb + (sc.list[b.id].spritePadding || 0) + e;
                    if (a.useWebGl) {
                        let a = f.getContext("webgl");
                        a.clearColor(0, 0, 0, 0);
                        a.clear(a.COLOR_BUFFER_BIT);
                        let b = a.createBuffer();
                        a.bindBuffer(a.ARRAY_BUFFER, b);

                        function c(b, c, d, e) {
                            let f = a.createShader(a.VERTEX_SHADER);
                            a.shaderSource(f, b);
                            a.compileShader(f);
                            a.getShaderParameter(f, a.COMPILE_STATUS);
                            let g = a.createShader(a.FRAGMENT_SHADER);
                            a.shaderSource(g, c);
                            a.compileShader(g);
                            a.getShaderParameter(g, a.COMPILE_STATUS);
                            let h = a.createProgram();
                            a.attachShader(h, f);
                            a.attachShader(h, g);
                            a.linkProgram(h);
                            a.getProgramParameter(h, a.LINK_STATUS);
                            a.useProgram(h);
                            let i = a.getAttribLocation(h, "vertex");
                            a.enableVertexAttribArray(i);
                            a.vertexAttribPointer(i, 2, a.FLOAT, false, 0, 0);
                            let j = d.length / 2;
                            a.bufferData(a.ARRAY_BUFFER, new Float32Array(d), a.DYNAMIC_DRAW);
                            a.drawArrays(e, 0, j);
                        }

                        function d(a) {
                            return a.slice(1).match(/.{1,2}/g).map(a => parseInt(a, 16));
                        }

                        function e(a, b, c) {
                            return [a / 255, b / 255, c / 255].join(", ");
                        }
                        let g = 100;
                        for (let b = 0; b < g; b++) {
                            let f = Math.PI * (b / (g / 2));
                            c("\n                            precision mediump float;\n                            attribute vec2 vertex;\n                            void main(void) {\n                                gl_Position = vec4(vertex, 0, 1);\n                            }\n                            ", "\n                            precision mediump float;\n                            void main(void) {\n                                gl_FragColor = vec4(" + e(...d("#fff")) + ", 1);\n                            }\n                            ", [0 + Math.cos(f) * 0.5, 0 + Math.sin(f) * 0.5, 0, 0], a.LINE_LOOP);
                        }
                    } else {
                        let a = f.getContext("2d");
                        a.translate(f.width / 2, f.height / 2);
                        a.rotate(c ? 0 : Math.PI / 2);
                        a.strokeStyle = ab;
                        a.lineWidth = cb * (c ? f.width / 81 : 1);
                        if (b.name == "apple") {
                            a.fillStyle = "#c15555";
                            Je(0, 0, b.scale, a);
                            a.fillStyle = "#89a54c";
                            let c = -(Math.PI / 2);
                            Ie(b.scale * Math.cos(c), b.scale * Math.sin(c), 25, c + Math.PI / 2, a);
                        } else if (b.name == "cookie") {
                            a.fillStyle = "#cca861";
                            Je(0, 0, b.scale, a);
                            a.fillStyle = "#937c4b";
                            let c = 4;
                            let d = Math.PI * 2 / c;
                            let e;
                            for (let f = 0; f < c; ++f) {
                                e = rc.randInt(b.scale / 2.5, b.scale / 1.7);
                                Je(e * Math.cos(d * f), e * Math.sin(d * f), rc.randInt(4, 5), a, true);
                            }
                        } else if (b.name == "cheese") {
                            a.fillStyle = "#f4f3ac";
                            Je(0, 0, b.scale, a);
                            a.fillStyle = "#c3c28b";
                            let c = 4;
                            let d = Math.PI * 2 / c;
                            let e;
                            for (let f = 0; f < c; ++f) {
                                e = rc.randInt(b.scale / 2.5, b.scale / 1.7);
                                Je(e * Math.cos(d * f), e * Math.sin(d * f), rc.randInt(4, 5), a, true);
                            }
                        } else if (b.name == "wood wall" || b.name == "stone wall" || b.name == "castle wall") {
                            a.fillStyle = b.name == "castle wall" ? "#83898e" : b.name == "wood wall" ? "#a5974c" : "#939393";
                            let c = b.name == "castle wall" ? 4 : 3;
                            Le(a, c, b.scale * 1.1, b.scale * 1.1);
                            a.fill();
                            a.stroke();
                            a.fillStyle = b.name == "castle wall" ? "#9da4aa" : b.name == "wood wall" ? "#c9b758" : "#bcbcbc";
                            Le(a, c, b.scale * 0.65, b.scale * 0.65);
                            a.fill();
                        } else if (b.name == "spikes" || b.name == "greater spikes" || b.name == "poison spikes" || b.name == "spinning spikes") {
                            a.fillStyle = b.name == "poison spikes" ? "#7b935d" : "#939393";
                            let c = b.scale * 0.6;
                            Le(a, b.name == "spikes" ? 5 : 6, b.scale, c);
                            a.fill();
                            a.stroke();
                            a.fillStyle = "#a5974c";
                            Je(0, 0, c, a);
                            a.fillStyle = "#c9b758";
                            Je(0, 0, c / 2, a, true);
                        } else if (b.name == "windmill" || b.name == "faster windmill" || b.name == "power mill") {
                            a.fillStyle = "#a5974c";
                            Je(0, 0, b.scale, a);
                            a.fillStyle = "#c9b758";
                            Pe(0, 0, b.scale * 1.5, 29, 4, a);
                            a.fillStyle = "#a5974c";
                            Je(0, 0, b.scale * 0.5, a);
                        } else if (b.name == "mine") {
                            a.fillStyle = "#939393";
                            Le(a, 3, b.scale, b.scale);
                            a.fill();
                            a.stroke();
                            a.fillStyle = "#bcbcbc";
                            Le(a, 3, b.scale * 0.55, b.scale * 0.65);
                            a.fill();
                        } else if (b.name == "sapling") {
                            for (let c = 0; c < 2; ++c) {
                                let d = b.scale * (!c ? 1 : 0.5);
                                Le(a, 7, d, d * 0.7);
                                a.fillStyle = !c ? "#9ebf57" : "#b4db62";
                                a.fill();
                                if (!c) {
                                    a.stroke();
                                }
                            }
                        } else if (b.name == "pit trap") {
                            a.fillStyle = "#a5974c";
                            Le(a, 3, b.scale * 1.1, b.scale * 1.1);
                            a.fill();
                            a.stroke();
                            a.fillStyle = ab;
                            Le(a, 3, b.scale * 0.65, b.scale * 0.65);
                            a.fill();
                        } else if (b.name == "boost pad") {
                            a.fillStyle = "#7e7f82";
                            Ne(0, 0, b.scale * 2, b.scale * 2, a);
                            a.fill();
                            a.stroke();
                            a.fillStyle = "#dbd97d";
                            Re(b.scale * 1, a);
                        } else if (b.name == "turret") {
                            a.fillStyle = "#a5974c";
                            Je(0, 0, b.scale, a);
                            a.fill();
                            a.stroke();
                            a.fillStyle = "#939393";
                            let c = 50;
                            Ne(0, -c / 2, b.scale * 0.9, c, a);
                            Je(0, 0, b.scale * 0.6, a);
                            a.fill();
                            a.stroke();
                        } else if (b.name == "platform") {
                            a.fillStyle = "#cebd5f";
                            let c = 4;
                            let d = b.scale * 2;
                            let e = d / c;
                            let f = -(b.scale / 2);
                            for (let g = 0; g < c; ++g) {
                                Ne(f - e / 2, 0, e, b.scale * 2, a);
                                a.fill();
                                a.stroke();
                                f += d / c;
                            }
                        } else if (b.name == "healing pad") {
                            a.fillStyle = "#7e7f82";
                            Ne(0, 0, b.scale * 2, b.scale * 2, a);
                            a.fill();
                            a.stroke();
                            a.fillStyle = "#db6e6e";
                            Pe(0, 0, b.scale * 0.65, 20, 4, a, true);
                        } else if (b.name == "spawn pad") {
                            a.fillStyle = "#7e7f82";
                            Ne(0, 0, b.scale * 2, b.scale * 2, a);
                            a.fill();
                            a.stroke();
                            a.fillStyle = "#71aad6";
                            Je(0, 0, b.scale * 0.6, a);
                        } else if (b.name == "blocker") {
                            a.fillStyle = "#7e7f82";
                            Je(0, 0, b.scale, a);
                            a.fill();
                            a.stroke();
                            a.rotate(Math.PI / 4);
                            a.fillStyle = "#db6e6e";
                            Pe(0, 0, b.scale * 0.65, 20, 4, a, true);
                        } else if (b.name == "teleporter") {
                            a.fillStyle = "#7e7f82";
                            Je(0, 0, b.scale, a);
                            a.fill();
                            a.stroke();
                            a.rotate(Math.PI / 4);
                            a.fillStyle = "#d76edb";
                            Je(0, 0, b.scale * 0.5, a, true);
                        }
                    }
                    d = f;
                    if (!c) {
                        uf[b.id] = d;
                    }
                }
                return d;
            }

            function wf(a, b, c) {
                let d = xa;
                let e = a.name == "windmill" ? sc.list[4].scale : a.scale;
                d.save();
                d.translate(b, c);
                d.rotate(a.dir);
                d.strokeStyle = ab;
                d.lineWidth = cb;
                if (a.name == "apple") {
                    d.fillStyle = "#c15555";
                    Je(0, 0, a.scale, d);
                    d.fillStyle = "#89a54c";
                    let b = -(Math.PI / 2);
                    Ie(a.scale * Math.cos(b), a.scale * Math.sin(b), 25, b + Math.PI / 2, d);
                } else if (a.name == "cookie") {
                    d.fillStyle = "#cca861";
                    Je(0, 0, a.scale, d);
                    d.fillStyle = "#937c4b";
                    let b = 4;
                    let c = Math.PI * 2 / b;
                    let e;
                    for (let f = 0; f < b; ++f) {
                        e = rc.randInt(a.scale / 2.5, a.scale / 1.7);
                        Je(e * Math.cos(c * f), e * Math.sin(c * f), rc.randInt(4, 5), d, true);
                    }
                } else if (a.name == "cheese") {
                    d.fillStyle = "#f4f3ac";
                    Je(0, 0, a.scale, d);
                    d.fillStyle = "#c3c28b";
                    let b = 4;
                    let c = Math.PI * 2 / b;
                    let e;
                    for (let f = 0; f < b; ++f) {
                        e = rc.randInt(a.scale / 2.5, a.scale / 1.7);
                        Je(e * Math.cos(c * f), e * Math.sin(c * f), rc.randInt(4, 5), d, true);
                    }
                } else if (a.name == "wood wall" || a.name == "stone wall" || a.name == "castle wall") {
                    d.fillStyle = a.name == "castle wall" ? "#83898e" : a.name == "wood wall" ? "#a5974c" : "#939393";
                    let b = a.name == "castle wall" ? 4 : 3;
                    Le(d, b, a.scale * 1.1, a.scale * 1.1);
                    d.fill();
                    d.stroke();
                    d.fillStyle = a.name == "castle wall" ? "#9da4aa" : a.name == "wood wall" ? "#c9b758" : "#bcbcbc";
                    Le(d, b, a.scale * 0.65, a.scale * 0.65);
                    d.fill();
                } else if (a.name == "spikes" || a.name == "greater spikes" || a.name == "poison spikes" || a.name == "spinning spikes") {
                    d.fillStyle = a.name == "poison spikes" ? "#7b935d" : "#939393";
                    let b = a.scale * 0.6;
                    Le(d, a.name == "spikes" ? 5 : 6, a.scale, b);
                    d.fill();
                    d.stroke();
                    d.fillStyle = "#a5974c";
                    Je(0, 0, b, d);
                    d.fillStyle = "#c9b758";
                    Je(0, 0, b / 2, d, true);
                } else if (a.name == "windmill" || a.name == "faster windmill" || a.name == "power mill") {
                    d.fillStyle = "#a5974c";
                    Je(0, 0, e, d);
                    d.fillStyle = "#c9b758";
                    Pe(0, 0, e * 1.5, 29, 4, d);
                    d.fillStyle = "#a5974c";
                    Je(0, 0, e * 0.5, d);
                } else if (a.name == "mine") {
                    d.fillStyle = "#939393";
                    Le(d, 3, a.scale, a.scale);
                    d.fill();
                    d.stroke();
                    d.fillStyle = "#bcbcbc";
                    Le(d, 3, a.scale * 0.55, a.scale * 0.65);
                    d.fill();
                } else if (a.name == "sapling") {
                    for (let b = 0; b < 2; ++b) {
                        let c = a.scale * (!b ? 1 : 0.5);
                        Le(d, 7, c, c * 0.7);
                        d.fillStyle = !b ? "#9ebf57" : "#b4db62";
                        d.fill();
                        if (!b) {
                            d.stroke();
                        }
                    }
                } else if (a.name == "pit trap") {
                    d.fillStyle = "#a5974c";
                    Le(d, 3, a.scale * 1.1, a.scale * 1.1);
                    d.fill();
                    d.stroke();
                    d.fillStyle = ab;
                    Le(d, 3, a.scale * 0.65, a.scale * 0.65);
                    d.fill();
                } else if (a.name == "boost pad") {
                    d.fillStyle = "#7e7f82";
                    Ne(0, 0, a.scale * 2, a.scale * 2, d);
                    d.fill();
                    d.stroke();
                    d.fillStyle = "#dbd97d";
                    Re(a.scale * 1, d);
                } else if (a.name == "turret") {
                    d.fillStyle = "#a5974c";
                    Je(0, 0, a.scale, d);
                    d.fill();
                    d.stroke();
                    d.fillStyle = "#939393";
                    let b = 50;
                    Ne(0, -b / 2, a.scale * 0.9, b, d);
                    Je(0, 0, a.scale * 0.6, d);
                    d.fill();
                    d.stroke();
                } else if (a.name == "platform") {
                    d.fillStyle = "#cebd5f";
                    let b = 4;
                    let c = a.scale * 2;
                    let e = c / b;
                    let f = -(a.scale / 2);
                    for (let g = 0; g < b; ++g) {
                        Ne(f - e / 2, 0, e, a.scale * 2, d);
                        d.fill();
                        d.stroke();
                        f += c / b;
                    }
                } else if (a.name == "healing pad") {
                    d.fillStyle = "#7e7f82";
                    Ne(0, 0, a.scale * 2, a.scale * 2, d);
                    d.fill();
                    d.stroke();
                    d.fillStyle = "#db6e6e";
                    Pe(0, 0, a.scale * 0.65, 20, 4, d, true);
                } else if (a.name == "spawn pad") {
                    d.fillStyle = "#7e7f82";
                    Ne(0, 0, a.scale * 2, a.scale * 2, d);
                    d.fill();
                    d.stroke();
                    d.fillStyle = "#71aad6";
                    Je(0, 0, a.scale * 0.6, d);
                } else if (a.name == "blocker") {
                    d.fillStyle = "#7e7f82";
                    Je(0, 0, a.scale, d);
                    d.fill();
                    d.stroke();
                    d.rotate(Math.PI / 4);
                    d.fillStyle = "#db6e6e";
                    Pe(0, 0, a.scale * 0.65, 20, 4, d, true);
                } else if (a.name == "teleporter") {
                    d.fillStyle = "#7e7f82";
                    Je(0, 0, a.scale, d);
                    d.fill();
                    d.stroke();
                    d.rotate(Math.PI / 4);
                    d.fillStyle = "#d76edb";
                    Je(0, 0, a.scale * 0.5, d, true);
                }
                d.restore();
            }
            let xf = [];

            function yf(a) {
                let b = xf[a.id];
                if (!b) {
                    let c = 0;
                    let d = document.createElement("canvas");
                    d.width = d.height = a.scale * 2.5 + cb + (sc.list[a.id].spritePadding || 0) + c;
                    let e = d.getContext("2d");
                    e.translate(d.width / 2, d.height / 2);
                    e.rotate(Math.PI / 2);
                    e.strokeStyle = ab;
                    e.lineWidth = cb;
                    if (a.name == "spikes" || a.name == "greater spikes" || a.name == "poison spikes" || a.name == "spinning spikes") {
                        e.fillStyle = a.name == "poison spikes" ? "#7b935d" : "#939393";
                        let b = a.scale * 0.6;
                        Le(e, a.name == "spikes" ? 5 : 6, a.scale, b);
                        e.fill();
                        e.stroke();
                        e.fillStyle = "#a5974c";
                        Je(0, 0, b, e);
                        e.fillStyle = "#cc5151";
                        Je(0, 0, b / 2, e, true);
                    } else if (a.name == "pit trap") {
                        e.fillStyle = "#a5974c";
                        Le(e, 3, a.scale * 1.1, a.scale * 1.1);
                        e.fill();
                        e.stroke();
                        e.fillStyle = "#cc5151";
                        Le(e, 3, a.scale * 0.65, a.scale * 0.65);
                        e.fill();
                    }
                    b = d;
                    xf[a.id] = b;
                }
                return b;
            }

            function zf(a, b, c, d) {
                b.lineWidth = cb;
                b.globalAlpha = 1;
                b.strokeStyle = ab;
                b.save();
                b.translate(c, d);
                b.rotate(a.dir);
                if (a.name == "wood wall" || a.name == "stone wall" || a.name == "castle wall") {
                    let c = a.name == "castle wall" ? 4 : 3;
                    Me(b, c, a.scale * 1.1, a.scale * 1.1);
                    b.stroke();
                } else if (a.name == "spikes" || a.name == "greater spikes" || a.name == "poison spikes" || a.name == "spinning spikes") {
                    let c = a.scale * 0.6;
                    Me(b, a.name == "spikes" ? 5 : 6, a.scale, c);
                    b.stroke();
                } else if (a.name == "windmill" || a.name == "faster windmill" || a.name == "power mill") {
                    Ke(0, 0, a.scale, b, false, true);
                } else if (a.name == "mine") {
                    Me(b, 3, a.scale, a.scale);
                    b.stroke();
                } else if (a.name == "sapling") {
                    let c = a.scale * 0.7;
                    Me(b, 7, a.scale, c);
                    b.stroke();
                } else if (a.name == "pit trap") {
                    Me(b, 3, a.scale * 1.1, a.scale * 1.1);
                    b.stroke();
                } else if (a.name == "boost pad") {
                    Oe(0, 0, a.scale * 2, a.scale * 2, b, false, true);
                } else if (a.name == "turret") {
                    Ke(0, 0, a.scale, b, false, true);
                } else if (a.name == "platform") {
                    Oe(0, 0, a.scale * 2, a.scale * 2, b, false, true);
                } else if (a.name == "healing pad") {
                    Oe(0, 0, a.scale * 2, a.scale * 2, b, false, true);
                } else if (a.name == "spawn pad") {
                    Oe(0, 0, a.scale * 2, a.scale * 2, b, false, true);
                } else if (a.name == "blocker") {
                    Ke(0, 0, a.scale, b, false, true);
                } else if (a.name == "teleporter") {
                    Ke(0, 0, a.scale, b, false, true);
                }
                b.restore();
            }

            function Af(a, b, c) {
                return a + c >= 0 && a - c <= Oa && b + c >= 0 && (b, c, Pa);
            }

            function Bf(a, b, c) {
                Cf(xa, b, c);
            }

            function Cf(a, b, c) {
                a.fillStyle = "rgba(0, 255, 255, 0.2)";
                a.beginPath();
                a.arc(b, c, 55, 0, Math.PI * 2);
                a.fill();
                a.closePath();
                a.globalAlpha = 1;
            }
            class Df {
                constructor(b, c) {
                    this.init = function(a, b) {
                        this.scale = 0;
                        this.x = a;
                        this.y = b;
                        this.active = true;
                    };
                    this.update = function(b, d) {
                        if (this.active) {
                            this.scale += d * 0.05;
                            if (this.scale >= c) {
                                this.active = false;
                            } else {
                                b.globalAlpha = 1 - Math.max(0, this.scale / c);
                                b.beginPath();
                                b.arc(this.x / a.mapScale * ya.width, this.y / a.mapScale * ya.width, this.scale, 0, Math.PI * 2);
                                b.stroke();
                            }
                        }
                    };
                    this.color = b;
                }
            }

            function Ef(b, c) {
                Ic = Hc.find(a => !a.active);
                if (!Ic) {
                    Ic = new Df("#fff", a.mapPingScale);
                    Hc.push(Ic);
                }
                Ic.init(b, c);
            }

            function Ff() {
                Gc.x = fa.x;
                Gc.y = fa.y;
            }

            function Gf(b) {
                if (fa && fa.alive) {
                    za.clearRect(0, 0, ya.width, ya.height);
                    za.lineWidth = 4;
                    for (let a = 0; a < Hc.length; ++a) {
                        Ic = Hc[a];
                        za.strokeStyle = Ic.color;
                        Ic.update(za, b);
                    }
                    za.globalAlpha = 1;
                    za.fillStyle = "#ff0000";
                    if (Jc.length) {
                        za.fillStyle = "#abcdef";
                        za.font = "34px Hammersmith One";
                        za.textBaseline = "middle";
                        za.textAlign = "center";
                        for (let b = 0; b < Jc.length;) {
                            za.fillText("!", Jc[b].x / a.mapScale * ya.width, Jc[b].y / a.mapScale * ya.height);
                            b += 2;
                        }
                    }
                    za.globalAlpha = 1;
                    za.fillStyle = "#fff";
                    Je(fa.x / a.mapScale * ya.width, fa.y / a.mapScale * ya.height, 7, za, true);
                    za.fillStyle = "rgba(255,255,255,0.35)";
                    if (fa.team && Fc) {
                        for (let b = 0; b < Fc.length;) {
                            Je(Fc[b] / a.mapScale * ya.width, Fc[b + 1] / a.mapScale * ya.height, 7, za, true);
                            b += 2;
                        }
                    }
                    if (Ec) {
                        za.fillStyle = "#fc5553";
                        za.font = "34px Hammersmith One";
                        za.textBaseline = "middle";
                        za.textAlign = "center";
                        za.fillText("x", Ec.x / a.mapScale * ya.width, Ec.y / a.mapScale * ya.height);
                    }
                    if (Gc) {
                        za.fillStyle = "#fff";
                        za.font = "34px Hammersmith One";
                        za.textBaseline = "middle";
                        za.textAlign = "center";
                        za.fillText("x", Gc.x / a.mapScale * ya.width, Gc.y / a.mapScale * ya.height);
                    }
                }
            }
            let Hf = ["https://cdn.discordapp.com/attachments/1001384433078779927/1149285738412769300/newawwddd.png", "https://cdn.discordapp.com/attachments/1001384433078779927/1149285168780165170/100px-Crosshairs_Red.png"];
            let If = {};
            let Jf = {
                crown: new Image(),
                skull: new Image()
            };

            function Kf() {
                Jf.crown.onload = function() {
                    this.isLoaded = true;
                };
                Jf.crown.src = "./../img/icons/crown.png";
                Jf.skull.onload = function() {
                    this.isLoaded = true;
                };
                Jf.skull.src = "./../img/icons/skull.png";
                for (let a = 0; a < Hf.length; ++a) {
                    let b = new Image();
                    b.onload = function() {
                        this.isLoaded = true;
                    };
                    b.src = Hf[a];
                    If[a] = b;
                }
            }
            Kf();

            function Lf() {
                if (a.resetRender) {
                    xa.clearRect(0, 0, wa.width, wa.height);
                    xa.beginPath();
                }
                if (true) {
                    if (fa) {
                        if (false) {
                            Ua = fa.x;
                            Va = fa.y;
                        } else {
                            let a = rc.getDistance(Ua, Va, fa.x, fa.y);
                            let b = rc.getDirection(fa.x, fa.y, Ua, Va);
                            let c = Math.min(a * 0.01 * Ra, a);
                            if (a > 0.05) {
                                Ua += c * Math.cos(b);
                                Va += c * Math.sin(b);
                            } else {
                                Ua = fa.x;
                                Va = fa.y;
                            }
                        }
                    } else {
                        Ua = a.mapScale / 2;
                        Va = a.mapScale / 2;
                    }
                    let e = Sa - 1000 / a.serverUpdateRate;
                    let f;
                    for (let b = 0; b < Z.length + Y.length; ++b) {
                        ha = Z[b] || Y[b - Z.length];
                        if (ha && ha.visible) {
                            if (ha.forcePos) {
                                ha.x = ha.x2;
                                ha.y = ha.y2;
                                ha.dir = ha.d2;
                            } else {
                                let b = ha.t2 - ha.t1;
                                let c = e - ha.t1;
                                let d = c / b;
                                let g = 170;
                                ha.dt += Ra;
                                let h = Math.min(1.7, ha.dt / g);
                                f = ha.x2 - ha.x1;
                                ha.x = ha.x1 + f * h;
                                f = ha.y2 - ha.y1;
                                ha.y = ha.y1 + f * h;
                                if (a.anotherVisual) {
                                    ha.dir = Math.lerpAngle(ha.d2, ha.d1, Math.min(1.2, d));
                                } else {
                                    ha.dir = Math.lerpAngle(ha.d2, ha.d1, Math.min(1.2, d));
                                }
                            }
                        }
                    }
                    let g = Ua - Oa / 2;
                    let h = Va - Pa / 2;
                    if (a.snowBiomeTop - h <= 0 && a.mapScale - a.snowBiomeTop - h >= Pa) {
                        xa.fillStyle = "#b6db66";
                        xa.fillRect(0, 0, Oa, Pa);
                    } else if (a.mapScale - a.snowBiomeTop - h <= 0) {
                        xa.fillStyle = "#dbc666";
                        xa.fillRect(0, 0, Oa, Pa);
                    } else if (a.snowBiomeTop - h >= Pa) {
                        xa.fillStyle = "#fff";
                        xa.fillRect(0, 0, Oa, Pa);
                    } else if (a.snowBiomeTop - h >= 0) {
                        xa.fillStyle = "#fff";
                        xa.fillRect(0, 0, Oa, a.snowBiomeTop - h);
                        xa.fillStyle = "#b6db66";
                        xa.fillRect(0, a.snowBiomeTop - h, Oa, Pa - (a.snowBiomeTop - h));
                    } else {
                        xa.fillStyle = "#b6db66";
                        xa.fillRect(0, 0, Oa, a.mapScale - a.snowBiomeTop - h);
                        xa.fillStyle = "#dbc666";
                        xa.fillRect(0, a.mapScale - a.snowBiomeTop - h, Oa, Pa - (a.mapScale - a.snowBiomeTop - h));
                    }
                    if (!eb) {
                        $a += _a * a.waveSpeed * Ra;
                        if ($a >= a.waveMax) {
                            $a = a.waveMax;
                            _a = -1;
                        } else if ($a <= 1) {
                            $a = _a = 1;
                        }
                        xa.globalAlpha = 1;
                        xa.fillStyle = "#dbc666";
                        rf(g, h, xa, a.riverPadding);
                        xa.fillStyle = "#91b2db";
                        rf(g, h, xa, ($a - 1) * 250);
                    }
                    if (t("visualType").value == "ae" || t("visualType").value == "fz" || t("visualType").value == "zika") {
                        xa.lineWidth = 4;
                        xa.strokeStyle = "#000";
                        xa.globalAlpha = 0.06;
                        xa.beginPath();
                        for (let a = -Ua; a < Oa; a += Pa / 18) {
                            if (a > 0) {
                                xa.moveTo(a, 0);
                                xa.lineTo(a, Pa);
                            }
                        }
                        for (let a = -Va; a < Pa; a += Pa / 18) {
                            if (a > 0) {
                                xa.moveTo(0, a);
                                xa.lineTo(Oa, a);
                            }
                        }
                        xa.stroke();
                    }
                    if (fa) {
                        if (Ec) {
                            xa.globalAlpha = 1;
                            xa.fillStyle = "#fc5553";
                            xa.font = "100px Hammersmith One";
                            xa.textBaseline = "middle";
                            xa.textAlign = "center";
                            xa.fillText("O", Ec.x - g, Ec.y - h);
                        }
                        if (Mc.active) {
                            if (Mc.array && (Mc.chaseNear ? ia.length : true)) {
                                xa.lineWidth = 25;
                                xa.globalAlpha = 0.6;
                                xa.strokeStyle = "red";
                                xa.beginPath();
                                Mc.array.forEach((a, b) => {
                                    let c = {
                                        x: Mc.scale / Mc.grid * a.x,
                                        y: Mc.scale / Mc.grid * a.y
                                    };
                                    let d = {
                                        x: fa.x2 - Mc.scale / 2 + c.x - g,
                                        y: fa.y2 - Mc.scale / 2 + c.y - h
                                    };
                                    if (b == 0) {
                                        xa.moveTo(d.x, d.y);
                                    } else {
                                        xa.lineTo(d.x, d.y);
                                    }
                                });
                                xa.stroke();
                            }
                        }
                    }
                    xa.globalAlpha = 1;
                    xa.strokeStyle = ab;
                    Ue(g, h);
                    xa.globalAlpha = 1;
                    xa.strokeStyle = ab;
                    k(-1, g, h);
                    xa.globalAlpha = 1;
                    xa.lineWidth = cb;
                    mf(0, g, h);
                    Ve(g, h, 0);
                    xa.globalAlpha = 1;
                    for (let a = 0; a < Y.length; ++a) {
                        ha = Y[a];
                        if (ha.active && ha.visible) {
                            ha.animate(Ra);
                            xa.save();
                            xa.translate(ha.x - g, ha.y - h);
                            xa.rotate(ha.dir + ha.dirPlus - Math.PI / 2);
                            qf(ha, xa);
                            xa.restore();
                        }
                    }
                    k(0, g, h);
                    mf(1, g, h);
                    k(1, g, h);
                    Ve(g, h, 1);
                    k(2, g, h);
                    k(3, g, h);
                    xa.fillStyle = "#000";
                    xa.globalAlpha = 0.2;
                    if (g <= 0) {
                        xa.fillRect(0, 0, -g, Pa);
                    }
                    if (a.mapScale - g <= Oa) {
                        let b = Math.max(0, -h);
                        xa.fillRect(a.mapScale - g, b, Oa - (a.mapScale - g), Pa - b);
                    }
                    if (h <= 0) {
                        xa.fillRect(-g, 0, Oa + g, -h);
                    }
                    if (a.mapScale - h <= Pa) {
                        let b = Math.max(0, -g);
                        let c = 0;
                        if (a.mapScale - g <= Oa) {
                            c = Oa - (a.mapScale - g);
                        }
                        xa.fillRect(b, a.mapScale - h, Oa - b - c, Pa - (a.mapScale - h));
                    }
                    let i = false;
                    setInterval(() => {
                        i = !i;
                    }, 30000);
                    xa.globalAlpha = 1;
                    if (t("visualType").value == "ae" || t("visualType").value == "mega") {
                        xa.fillStyle = "rgba(0, 0, 70, 0.35)";
                        xa.fillRect(0, 0, Oa, Pa);
                    } else if (t("visualType").value == "fz") {
                        if (i) {
                            xa.fillStyle = "rgba(0, 0, 70, 0.45)";
                            xa.fillRect(0, 0, Oa, Pa);
                        } else {
                            xa.fillStyle = "rgba(0, 0, 70, 0.35)";
                            xa.fillRect(0, 0, Oa, Pa);
                        }
                    } else if (t("visualType").value == "zika") {
                        xa.fillStyle = "rgba(0, 0, 70, 0.55)";
                        xa.fillRect(0, 0, Oa, Pa);
                    } else {
                        xa.fillStyle = "rgba(20, 0, 70, 0.45)";
                        xa.fillRect(0, 0, Oa, Pa);
                        xa.fillStyle = "rgba(0, 5, 0, 0.15)";
                        xa.fillRect(0, 0, Oa, Pa);
                        xa.fillStyle = "rgba(255, 255, 255, 0.025)";
                        xa.fillRect(0, 0, Oa, Pa);
                    }
                    xa.strokeStyle = bb;
                    xa.globalAlpha = 1;
                    let j = false;
                    for (let e = 0; e < Z.length + Y.length; ++e) {
                        ha = Z[e] || Y[e - Z.length];
                        if (ha.visible) {
                            xa.strokeStyle = bb;
                            if (ha.skinIndex != 10 || ha == fa || ha.team && ha.team == fa.team) {
                                let e = "";
                                if (t("visualType").value == "ae") {
                                    j = false;
                                    e = (ha.team ? "[" + ha.team + "] " : "") + ha.name + " {" + ha.maxShameCount + "}";
                                }
                                if (t("visualType").value == "fz") {
                                    j = true;
                                    e = (ha.team ? "[" + ha.team + "] " : "") + ("[" + ha.primaryIndex + "/" + ha.secondaryIndex + "/" + ha.maxShameCount + "] ") + ha.name;
                                }
                                if (t("visualType").value == "pacifist" || t("visualType").value == "zika") {
                                    j = false;
                                    e = (ha.team ? "[" + ha.team + "] " : "") + ha.name;
                                }
                                if (t("visualType").value == "mega") {
                                    j = true;
                                    e = (ha.team ? "{" + ha.team + "} " : "") + ha.name;
                                }
                                if (e != "") {
                                    if (ha.isPlayer) {
                                        if (t("visualType") == "mega") {
                                            xa.font = (ha.nameScale || 30) + "px Hammersmith One";
                                            xa.fillStyle = "#fff";
                                            xa.textBaseline = "middle";
                                            xa.textAlign = "center";
                                            xa.lineWidth = ha.nameScale ? 11 : 8;
                                            xa.lineJoin = "round";
                                            xa.strokeText(e, ha.x - g, ha.y - h - ha.scale - a.nameY - 155);
                                            xa.fillText(e, ha.x - g, ha.y - h - ha.scale - a.nameY - 155);
                                        } else {
                                            xa.font = (ha.nameScale || 30) + "px Hammersmith One";
                                            xa.fillStyle = "#fff";
                                            xa.textBaseline = "middle";
                                            xa.textAlign = "center";
                                            xa.lineWidth = ha.nameScale ? 11 : 8;
                                            xa.lineJoin = "round";
                                            xa.strokeText(e, ha.x - g, ha.y - h - ha.scale - a.nameY);
                                            xa.fillText(e, ha.x - g, ha.y - h - ha.scale - a.nameY);
                                        }
                                    }
                                    if (ha.isLeader && Jf.crown.isLoaded) {
                                        var b = a.crownIconScale;
                                        var c = ha.x - g - b / 2 - xa.measureText(e).width / 2 - a.crownPad;
                                        xa.drawImage(Jf.crown, c, ha.y - h - ha.scale - a.nameY - b / 2 - 5, b, b);
                                    }
                                    if (ha.iconIndex == 1 && Jf.skull.isLoaded) {
                                        var b = a.crownIconScale;
                                        var c = ha.x - g - b / 2 + xa.measureText(e).width / 2 + a.crownPad;
                                        xa.drawImage(Jf.skull, c, ha.y - h - ha.scale - a.nameY - b / 2 - 5, b, b);
                                    }
                                    if (ha.isPlayer && Bc.wait && ka == ha && (ha.backupNobull ? If[1].isLoaded : If[0].isLoaded) && ia.length && !t("visualType").value == "ae") {
                                        let a = ha.scale * 2.2;
                                        xa.drawImage(ha.backupNobull ? If[1] : If[0], ha.x - g - a / 2, ha.y - h - a / 2, a, a);
                                    }
                                    if (ha.isPlayer && j) {
                                        xa.font = (ha.nameScale || 30) + "px Hammersmith One";
                                        xa.fillStyle = "#ff0000";
                                        xa.textBaseline = "middle";
                                        xa.textAlign = "center";
                                        xa.lineWidth = ha.nameScale ? 11 : 8;
                                        xa.lineJoin = "round";
                                        var b = a.crownIconScale;
                                        var c = ha.x - g - b / 2 + xa.measureText(e).width / 2 + a.crownPad + 15;
                                        xa.strokeText(ha.shameCount, c, ha.y - h - ha.scale - a.nameY);
                                        xa.fillText(ha.shameCount, c, ha.y - h - ha.scale - a.nameY);
                                    }
                                    e = "";
                                }
                                if (ha.health) {
                                    xa.globalAlpha = 1;
                                    xa.font = "20px Hammersmith One";
                                    xa.fillStyle = "#fff";
                                    xa.strokeStyle = bb;
                                    xa.textBaseline = "middle";
                                    xa.textAlign = "center";
                                    xa.lineWidth = 8;
                                    xa.lineJoin = "round";
                                    if (t("visualType").value == "fz" && ha.isPlayer) {
                                        var d = a.healthBarWidth;
                                        xa.fillStyle = bb;
                                        xa.roundRect(ha.x - g - a.healthBarWidth - a.healthBarPad, ha.y - h + ha.scale + a.nameY, a.healthBarWidth * 2 + a.healthBarPad * 2, 17, 11);
                                        xa.fill();
                                        xa.fillStyle = ha == fa || ha.team && ha.team == fa.team ? "#8ecc51" : "#cc5151";
                                        xa.roundRect(ha.x - g - a.healthBarWidth, ha.y - h + ha.scale + a.nameY + a.healthBarPad, a.healthBarWidth * 2 * (ha.health / ha.maxHealth), 17 - a.healthBarPad * 2, 20);
                                        xa.fill();
                                        xa.fillStyle = "#fff";
                                        let b = {
                                            primary: ha.primaryIndex == undefined ? 1 : (sc.weapons[ha.primaryIndex].speed - ha.reloads[ha.primaryIndex]) / sc.weapons[ha.primaryIndex].speed,
                                            secondary: ha.secondaryIndex == undefined ? 1 : (sc.weapons[ha.secondaryIndex].speed - ha.reloads[ha.secondaryIndex]) / sc.weapons[ha.secondaryIndex].speed
                                        };
                                        xa.fillStyle = bb;
                                        xa.roundRect(ha.x - g - a.healthBarPad + 5, ha.y - h + ha.scale + a.nameY - 13, a.healthBarWidth - 5 + a.healthBarPad * 2, 17, 8);
                                        xa.fill();
                                        xa.fillStyle = b.secondary == 1 ? "#FFF533" : "hsl(" + b.secondary * 50 + ", 50%, 60%)";
                                        xa.roundRect(ha.x - g + 5, ha.y - h + ha.scale + a.nameY - 13 + a.healthBarPad, a.healthBarWidth * b.secondary - 5, 17 - a.healthBarPad * 2, 7);
                                        xa.fill();
                                        xa.fillStyle = bb;
                                        xa.roundRect(ha.x - g - a.healthBarWidth - a.healthBarPad, ha.y - h + ha.scale + a.nameY - 13, a.healthBarWidth + a.healthBarPad * 2 - 5, 17, 8);
                                        xa.fill();
                                        xa.fillStyle = b.primary == 1 ? "#FFF533" : "hsl(" + b.primary * 50 + ", 50%, 60%)";
                                        xa.roundRect(ha.x - g - a.healthBarWidth, ha.y - h + ha.scale + a.nameY - 13 + a.healthBarPad, a.healthBarWidth * b.primary - 5, 17 - a.healthBarPad * 2, 7);
                                        xa.fill();
                                        if (ha === fa) {
                                            xa.fillStyle = "#fff";
                                            xa.strokeText("[" + Bc.isTrue + "/" + la.antiSync + "/" + Mf.max + "," + window.pingTime + "," + Mf.avg + "]", ha.x - g, ha.y - h - ha.scale + 135);
                                            xa.fillText("[" + Bc.isTrue + "/" + la.antiSync + "/" + Mf.max + "," + window.pingTime + "," + Mf.avg + "]", ha.x - g, ha.y - h - ha.scale + 135);
                                        }
                                    } else if (t("visualType").value == "pacifist") {
                                        var d = a.healthBarWidth;
                                        xa.fillStyle = bb;
                                        xa.roundRect(ha.x - g - a.healthBarWidth - a.healthBarPad, ha.y - h + ha.scale + a.nameY, a.healthBarWidth * 2 + a.healthBarPad * 2, 17, 11);
                                        xa.fill();
                                        xa.fillStyle = ha == fa || ha.team && ha.team == fa.team ? "#8ecc51" : "#cc5151";
                                        xa.roundRect(ha.x - g - a.healthBarWidth, ha.y - h + ha.scale + a.nameY + a.healthBarPad, a.healthBarWidth * 2 * (ha.health / ha.maxHealth), 17 - a.healthBarPad * 2, 20);
                                        xa.fill();
                                        xa.fillStyle = "#fff";
                                        if (ha === fa) {
                                            xa.strokeText(K, ha.x - g, ha.y - h - ha.scale - 10);
                                            xa.fillText(K, ha.x - g, ha.y - h - ha.scale - 10);
                                        } else if (ha.isPlayer) {
                                            xa.strokeText("[" + ha.primaryIndex + " / " + (ha.secondaryIndex != undefined ? ha.secondaryIndex : "0") + "]", ha.x - g, ha.y - h - ha.scale - 10);
                                            xa.fillText("[" + ha.primaryIndex + " / " + (ha.secondaryIndex != undefined ? ha.secondaryIndex : "0") + "]", ha.x - g, ha.y - h - ha.scale - 10);
                                        }
                                        if (ha.isPlayer) {
                                            xa.strokeText(ha.sid, ha.x - g, ha.y - h - ha.scale + 40);
                                            xa.fillText(ha.sid, ha.x - g, ha.y - h - ha.scale + 40);
                                            xa.strokeText(ha.shameCount, ha.x - g, ha.y - h - ha.scale + 135);
                                            xa.fillText(ha.shameCount, ha.x - g, ha.y - h - ha.scale + 135);
                                        }
                                    } else if (t("visualType").value == "zika") {
                                        var d = a.healthBarWidth;
                                        xa.fillStyle = bb;
                                        xa.roundRect(ha.x - g - a.healthBarWidth - a.healthBarPad, ha.y - h + ha.scale + a.nameY, a.healthBarWidth * 2 + a.healthBarPad * 2, 17, 11);
                                        xa.fill();
                                        xa.fillStyle = ha == fa || ha.team && ha.team == fa.team ? "#8ecc51" : "#cc5151";
                                        xa.roundRect(ha.x - g - a.healthBarWidth, ha.y - h + ha.scale + a.nameY + a.healthBarPad, a.healthBarWidth * 2 * (ha.health / ha.maxHealth), 17 - a.healthBarPad * 2, 20);
                                        xa.fill();
                                        xa.fillStyle = "#fff";
                                        xa.font = "18px Hammersmith One";
                                        if (ha === fa) {
                                            xa.strokeText(K, ha.x - g, ha.y - h - ha.scale - 10);
                                            xa.fillText(K, ha.x - g, ha.y - h - ha.scale - 10);
                                        } else if (ha.isPlayer) {
                                            xa.strokeText("[" + ha.primaryIndex + " / " + (ha.secondaryIndex != undefined ? ha.secondaryIndex : "0") + "]", ha.x - g, ha.y - h - ha.scale - 10);
                                            xa.fillText("[" + ha.primaryIndex + " / " + (ha.secondaryIndex != undefined ? ha.secondaryIndex : "0") + "]", ha.x - g, ha.y - h - ha.scale - 10);
                                        }
                                        if (ha.isPlayer) {
                                            xa.font = "22px Hammersmith One";
                                            xa.strokeText(ha.sid, ha.x - g, ha.y - h - ha.scale + 40);
                                            xa.fillText(ha.sid, ha.x - g, ha.y - h - ha.scale + 40);
                                            xa.strokeText(ha.shameCount, ha.x - g, ha.y - h - ha.scale + 135);
                                            xa.fillText(ha.shameCount, ha.x - g, ha.y - h - ha.scale + 135);
                                        }
                                    } else if (t("visualType").value == "mega") {
                                        xa.fillStyle = bb;
                                        xa.roundRect(ha.x - g - a.healthBarWidth - a.healthBarPad, ha.y - h + ha.scale + a.nameY, a.healthBarWidth * 2 + a.healthBarPad * 2, 17, 8);
                                        xa.fill();
                                        xa.fillStyle = ha == fa || ha.team && ha.team == fa.team ? "#8ecc51" : "#cc5151";
                                        xa.roundRect(ha.x - g - a.healthBarWidth, ha.y - h + ha.scale + a.nameY + a.healthBarPad, a.healthBarWidth * 2 * (ha.health / ha.maxHealth), 17 - a.healthBarPad * 2, 7);
                                        xa.fill();
                                        xa.fillStyle = "#fff";
                                        let b = {
                                            primary: ha.primaryIndex == undefined ? 1 : (sc.weapons[ha.primaryIndex].speed - ha.reloads[ha.primaryIndex]) / sc.weapons[ha.primaryIndex].speed,
                                            secondary: ha.secondaryIndex == undefined ? 1 : (sc.weapons[ha.secondaryIndex].speed - ha.reloads[ha.secondaryIndex]) / sc.weapons[ha.secondaryIndex].speed
                                        };
                                        xa.fillStyle = bb;
                                        xa.roundRect(ha.x - g - a.healthBarPad + 5, ha.y - h + ha.scale + a.nameY - 13, a.healthBarWidth - 5 + a.healthBarPad * 2, 17, 8);
                                        xa.fill();
                                        xa.fillStyle = "#A19C4E";
                                        xa.roundRect(ha.x - g + 5, ha.y - h + ha.scale + a.nameY - 13 + a.healthBarPad, a.healthBarWidth * b.secondary - 5, 17 - a.healthBarPad * 2, 7);
                                        xa.fill();
                                        xa.fillStyle = bb;
                                        xa.roundRect(ha.x - g - a.healthBarWidth - a.healthBarPad, ha.y - h + ha.scale + a.nameY - 13, a.healthBarWidth + a.healthBarPad * 2 - 5, 17, 8);
                                        xa.fill();
                                        xa.fillStyle = "#A19C4E";
                                        xa.roundRect(ha.x - g - a.healthBarWidth, ha.y - h + ha.scale + a.nameY - 13 + a.healthBarPad, a.healthBarWidth * b.primary - 5, 17 - a.healthBarPad * 2, 7);
                                        xa.fill();
                                    } else if (t("visualType").value == "ae") {
                                        var d = a.healthBarWidth;
                                        xa.fillStyle = bb;
                                        xa.roundRect(ha.x - g - a.healthBarWidth - a.healthBarPad, ha.y - h + ha.scale + a.nameY, a.healthBarWidth * 2 + a.healthBarPad * 2, 17, 11);
                                        xa.fill();
                                        xa.fillStyle = ha == fa || ha.team && ha.team == fa.team ? "#8ecc51" : "#cc5151";
                                        xa.roundRect(ha.x - g - a.healthBarWidth, ha.y - h + ha.scale + a.nameY + a.healthBarPad, a.healthBarWidth * 2 * (ha.health / ha.maxHealth), 17 - a.healthBarPad * 2, 20);
                                        xa.fill();
                                        xa.fillStyle = "#fff";
                                    }
                                    if (t("visualType").value == "zika") {
                                        for (let a = 0; a < ba.length; a++) {
                                            let b = ba[a];
                                            if (b.active && b.health > 0 && b.group != undefined && Nb(b, fa) <= 600) {
                                                function a() {
                                                    if (b.owner.sid != fa.sid && fc(b.owner.sid) == fa.team) {
                                                        return "#6B305E";
                                                    } else {
                                                        return "#394180";
                                                    }
                                                }
                                                let c;
                                                c = 0.0001 - b.health / b.maxHealth + 1;
                                                const d = b.scale - 20;
                                                const e = Math.PI;
                                                const f = Math.PI + c * 2 * Math.PI;

                                                function i() {
                                                    xa.beginPath();
                                                    xa.arc(b.x - g, b.y - h, d, Math.PI, Math.PI + c * 2 * Math.PI, true);
                                                    xa.strokeStyle = "#000";
                                                    xa.lineWidth = 12;
                                                    xa.lineCap = "round";
                                                    xa.stroke();
                                                    xa.beginPath();
                                                    xa.arc(b.x - g, b.y - h, d, Math.PI, Math.PI + c * 2 * Math.PI, true);
                                                    xa.strokeStyle = "#cc5151";
                                                    xa.lineWidth = 11;
                                                    xa.lineCap = "round";
                                                    xa.stroke();
                                                }
                                                i();
                                            }
                                        }
                                    } else if (t("visualType").value == "pacifist") {
                                        ba.forEach(b => {
                                            let c = b;
                                            if (c.active && c.health > 0) {
                                                const b = c.health / c.maxHealth;
                                                if (c && Nb(c, fa) <= 400) {
                                                    var d = a.healthBarWidth;
                                                    xa.fillStyle = "#000";
                                                    xa.roundRect(c.x - g - a.healthBarPad - 35, c.y - h - a.healthBarPad, a.healthBarWidth + 20 + a.healthBarPad * 2, 17, 13);
                                                    xa.fill();
                                                    xa.fillStyle = fa.sid != c.owner.sid && !fc(c.owner.sid) ? "#C12D5F" : "#2187C0";
                                                    xa.roundRect(c.x - g - 35, c.y - h, (a.healthBarWidth + 20) * b, 17 - a.healthBarPad * 2, 12);
                                                    xa.fill();
                                                }
                                                if (c.health > 0 && Nb(c, fa) <= 500) {
                                                    xa.font = "16px Hammersmith One";
                                                    xa.fillStyle = fa.sid != c.owner.sid && !fc(c.owner.sid) ? "#C12D5F" : "#2187C0";
                                                    xa.textBaseline = "middle";
                                                    xa.textAlign = "center";
                                                    xa.strokeStyle = "#000";
                                                    xa.lineWidth = 8;
                                                    xa.lineJoin = "round";
                                                    xa.strokeText(c.owner.sid, c.x - g, c.y - h + 30);
                                                    xa.fillText(c.owner.sid, c.x - g, c.y - h + 30);
                                                }
                                            }
                                        });
                                    } else if (t("visualType").value == "mega") {
                                        ba.forEach(b => {
                                            let c = b;
                                            if (c.active && c.health > 0) {
                                                if (c.dmg) {
                                                    xa.beginPath();
                                                    xa.arc(c.x - g, c.y - h, 0, Math.PI, Math.PI * 2);
                                                    xa.fillStyle = fa.sid != c.owner.sid && !fc(c.owner.sid) ? "#cc5151" : "#8ecc51";
                                                    xa.strokeStyle = fa.sid != c.owner.sid && !fc(c.owner.sid) ? "#cc5151" : "#8ecc51";
                                                    xa.lineWidth = 0;
                                                    xa.stroke();
                                                    xa.fill();
                                                    xa.beginPath();
                                                    xa.arc(c.x - g, c.y - h, 0, Math.PI, Math.PI * 2, true);
                                                    xa.fillStyle = fa.sid != c.owner.sid && !fc(c.owner.sid) ? "#cc5151" : "#8ecc51";
                                                    xa.strokeStyle = fa.sid != c.owner.sid && !fc(c.owner.sid) ? "#cc5151" : "#8ecc51";
                                                    xa.lineWidth = 0;
                                                    xa.stroke();
                                                    xa.fill();
                                                }
                                                const b = c.health / c.maxHealth;
                                                if (c && Nb(c, fa) <= 300) {
                                                    var d = a.healthBarWidth;
                                                    xa.fillStyle = bb;
                                                    xa.roundRect(c.x - g - a.healthBarPad - 30, c.y - h - a.healthBarPad + 60, a.healthBarWidth + 15 + a.healthBarPad * 2, 17, 13);
                                                    xa.fill();
                                                    xa.fillStyle = fa.sid != c.owner.sid && !fc(c.owner.sid) ? "#cc5151" : "#8ecc51";
                                                    xa.roundRect(c.x - g - 30, c.y - h + 60, (a.healthBarWidth + 15) * b, 17 - a.healthBarPad * 2, 12);
                                                    xa.fill();
                                                }
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    }

                    function k(a, b, c) {
                        let d;
                        let e;
                        let f;
                        ba.forEach(g => {
                            ha = g;
                            g.dir = g.lastDir;
                            if (ha.active) {
                                e = ha.x + ha.xWiggle - b;
                                f = ha.y + ha.yWiggle - c;
                                if (a == 0) {
                                    ha.update(Ra);
                                }
                                xa.globalAlpha = ha.alpha;
                                if (ha.layer == a && Af(e, f, ha.scale + (ha.blocker || 0))) {
                                    if (ha.isItem) {
                                        if ((ha.dmg || ha.trap) && !ha.isTeamObject(fa)) {
                                            d = yf(ha);
                                        } else {
                                            d = vf(ha);
                                        }
                                        xa.save();
                                        xa.translate(e, f);
                                        xa.rotate(ha.dir);
                                        if (!ha.active) {
                                            xa.scale(ha.visScale / ha.scale, ha.visScale / ha.scale);
                                        }
                                        xa.drawImage(d, -(d.width / 2), -(d.height / 2));
                                        if (ha.blocker) {
                                            xa.strokeStyle = "#db6e6e";
                                            xa.globalAlpha = 0.3;
                                            xa.lineWidth = 6;
                                            Je(0, 0, ha.blocker, xa, false, true);
                                        }
                                        xa.restore();
                                    } else {
                                        d = tf(ha);
                                        xa.drawImage(d, e - d.width / 2, f - d.height / 2);
                                    }
                                }
                            }
                        });
                    }

                    function l(a, b, c, d, e, f, g, h) {
                        xa.save();
                        xa.translate(c - a, d - b);
                        xa.rotate(Math.PI / 4);
                        xa.rotate(g);
                        xa.globalAlpha = 1;
                        xa.strokeStyle = f;
                        xa.lineCap = "round";
                        xa.lineWidth = h;
                        xa.beginPath();
                        xa.moveTo(-e, -e);
                        xa.lineTo(e, -e);
                        xa.lineTo(e, e);
                        xa.stroke();
                        xa.closePath();
                        xa.restore();
                    }
                    if (fa) {
                        if (ka.length) {
                            ja.forEach(a => {
                                let b = a;
                                l(g, h, fa.x, fa.y, 6, "#fff", rc.getDirect(b, fa, 0, 2), 6);
                            });
                        }
                        if (la.autoPush) {
                            xa.lineWidth = 5;
                            xa.globalAlpha = 1;
                            xa.beginPath();
                            xa.strokeStyle = "#fff";
                            xa.moveTo(fa.x - g, fa.y - h);
                            xa.lineTo(la.pushData.x2 - g, la.pushData.y2 - h);
                            xa.lineTo(la.pushData.x - g, la.pushData.y - h);
                            xa.stroke();
                        }
                    }
                    xa.globalAlpha = 1;
                    zc.update(Ra, xa, g, h);
                    for (let a = 0; a < Z.length; ++a) {
                        ha = Z[a];
                        if (ha.visible) {
                            if (ha.chatCountdown > 0) {
                                ha.chatCountdown -= Ra;
                                if (ha.chatCountdown <= 0) {
                                    ha.chatCountdown = 0;
                                }
                                xa.font = "32px Hammersmith One";
                                let a = xa.measureText(ha.chatMessage);
                                xa.textBaseline = "middle";
                                xa.textAlign = "center";
                                let b = ha.x - g;
                                let c = ha.y - ha.scale - h - 90;
                                let d = 47;
                                let e = a.width + 17;
                                xa.fillStyle = "rgba(0,0,0,0.2)";
                                xa.roundRect(b - e / 2, c - d / 2, e, d, 6);
                                xa.fill();
                                xa.fillStyle = "#fff";
                                xa.fillText(ha.chatMessage, b, c);
                            }
                            if (ha.chat.count > 0) {
                                if (!t("visualType").value == "ae") {
                                    ha.chat.count -= Ra;
                                    if (ha.chat.count <= 0) {
                                        ha.chat.count = 0;
                                    }
                                    xa.font = "32px Hammersmith One";
                                    let a = xa.measureText(ha.chat.message);
                                    xa.textBaseline = "middle";
                                    xa.textAlign = "center";
                                    let b = ha.x - g;
                                    let c = ha.y - ha.scale - h + 180;
                                    let d = 47;
                                    let e = a.width + 17;
                                    xa.fillStyle = "rgba(0,0,0,0.2)";
                                    xa.roundRect(b - e / 2, c - d / 2, e, d, 6);
                                    xa.fill();
                                    xa.fillStyle = "#ffffff99";
                                    xa.fillText(ha.chat.message, b, c);
                                } else {
                                    ha.chat.count = 0;
                                }
                            }
                        }
                    }
                    if (X.length) {
                        X.filter(a => a.active).forEach(a => {
                            if (!a.alive) {
                                if (a.alpha <= 1) {
                                    a.alpha += Ra / 250;
                                    if (a.alpha >= 1) {
                                        a.alpha = 1;
                                        a.alive = true;
                                    }
                                }
                            } else {
                                a.alpha -= Ra / 5000;
                                if (a.alpha <= 0) {
                                    a.alpha = 0;
                                    a.active = false;
                                }
                            }
                            if (a.active) {
                                xa.font = "20px Hammersmith One";
                                let b = xa.measureText(a.chat);
                                xa.textBaseline = "middle";
                                xa.textAlign = "center";
                                let c = a.owner.x - g;
                                let d = a.owner.y - a.owner.scale - h - 90;
                                let e = 47;
                                let f = b.width + 17;
                                xa.globalAlpha = a.alpha;
                                xa.fillStyle = a.owner.isTeam(fa) ? "rgba(255,215,0,1)" : "#cc5151";
                                xa.strokeStyle = "rgb(25, 25, 25)";
                                xa.lineWidth = 5;
                                xa.fillStyle = "rgba(0,0,0,0.4)";
                                xa.strokeStyle = "rgba(0,0,0,0.0)";
                                xa.roundRect(c - f / 2, d - e / 2, f, e, 6);
                                xa.stroke();
                                xa.fill();
                                xa.fillStyle = "#fff";
                                xa.strokeStyle = "#000";
                                xa.strokeText(a.chat, c, d);
                                xa.fillText(a.chat, c, d);
                                a.y -= Ra / 100;
                            }
                        });
                    }
                }
                xa.globalAlpha = 1;
                Gf(Ra);
            }
            window.requestAnimFrame = function() {
                return null;
            };
            window.rAF = function() {
                return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(a) {
                    window.setTimeout(a, Infinity);
                };
            }();
            let Mf = {
                avg: 0,
                max: 0,
                min: 0
            };

            function Nf() {
                Sa = performance.now();
                Ra = Sa - Ta;
                Ta = Sa;
                let a = performance.now();
                let b = a - Q.last;
                if (b >= 1000) {
                    Q.ltime = Q.time * (1000 / b);
                    Q.last = a;
                    Q.time = 0;
                }
                Mf.avg = Math.round((Mf.min + Mf.max) / 2);
                Q.time++;
                Lf();
                rAF(Nf);
                document.getElementById("pingDisplay").innerText = window.pingTime + "ms | FPS: " + Math.round(Q.ltime);
            }
            Se();
            Nf();

            function Of(a) {
                t("instaType").disabled = a;
                t("antiBullType").disabled = a;
                t("predictType").disabled = a;
                t("visualType").disabled = a;
            }
            let Pf = {};
            window.debug = function() {
                la.waitHit = 0;
                la.autoAim = false;
                Bc.isTrue = false;
                Ac.inTrap = false;
                uf = [];
                xf = [];
                sf = [];
            };
            window.startGrind = function() {
                if (t("weaponGrind").checked) {
                    for (let a = 0; a < Math.PI * 2; a += Math.PI / 2) {
                        Vb(fa.getItemType(22), a);
                    }
                }
            };
            window.resBuild = function() {
                if (ba.length) {
                    ba.forEach(a => {
                        a.breakObj = false;
                    });
                    ea = [];
                }
            };
            window.toggleBotsCircle = function() {
                fa.circle = !fa.circle;
            };
            window.toggleVisual = function() {
                a.anotherVisual = !a.anotherVisual;
                ba.forEach(a => {
                    if (a.active) {
                        a.dir = a.lastDir;
                    }
                });
            };
            window.prepareUI = function(b) {
                Tc();
                rc.removeAllChildren(Ga);
                for (let a = 0; a < sc.weapons.length + sc.list.length; ++a) {
                    (function(a) {
                        rc.generateElement({
                            id: "actionBarItem" + a,
                            class: "actionBarItem",
                            style: "display:none",
                            onmouseout: function() {
                                Sc();
                            },
                            parent: Ga
                        });
                    })(a);
                }
                for (let c = 0; c < sc.list.length + sc.weapons.length; ++c) {
                    (function(c) {
                        let d = document.createElement("canvas");
                        d.width = d.height = 66;
                        let e = d.getContext("2d");
                        e.translate(d.width / 2, d.height / 2);
                        e.imageSmoothingEnabled = false;
                        e.webkitImageSmoothingEnabled = false;
                        e.mozImageSmoothingEnabled = false;
                        if (sc.weapons[c]) {
                            e.rotate(Math.PI / 4 + Math.PI);
                            let f = new Image();
                            kf[sc.weapons[c].src] = f;
                            f.onload = function() {
                                this.isLoaded = true;
                                let b = 1 / (this.height / this.width);
                                let f = sc.weapons[c].iPad || 1;
                                e.drawImage(this, -(d.width * f * a.iconPad * b) / 2, -(d.height * f * a.iconPad) / 2, d.width * f * b * a.iconPad, d.height * f * a.iconPad);
                                e.fillStyle = "rgba(0, 0, 70, 0.1)";
                                e.globalCompositeOperation = "source-atop";
                                e.fillRect(-d.width / 2, -d.height / 2, d.width, d.height);
                                t("actionBarItem" + c).style.backgroundImage = "url(" + d.toDataURL() + ")";
                            };
                            f.src = "./../img/weapons/" + sc.weapons[c].src + ".png";
                            let g = t("actionBarItem" + c);
                            g.onmouseover = rc.checkTrusted(function() {
                                Sc(sc.weapons[c], true);
                            });
                            g.onclick = rc.checkTrusted(function() {
                                Ib(b.weapons[sc.weapons[c].type]);
                            });
                            rc.hookTouchEvents(g);
                        } else {
                            let f = vf(sc.list[c - sc.weapons.length], true);
                            let g = Math.min(d.width - a.iconPadding, f.width);
                            e.globalAlpha = 1;
                            e.drawImage(f, -g / 2, -g / 2, g, g);
                            e.fillStyle = "rgba(0, 0, 70, 0.1)";
                            e.globalCompositeOperation = "source-atop";
                            e.fillRect(-g / 2, -g / 2, g, g);
                            t("actionBarItem" + c).style.backgroundImage = "url(" + d.toDataURL() + ")";
                            let h = t("actionBarItem" + c);
                            h.onmouseover = rc.checkTrusted(function() {
                                Sc(sc.list[c - sc.weapons.length]);
                            });
                            h.onclick = rc.checkTrusted(function() {
                                Hb(b.items[b.getItemType(c - sc.weapons.length)]);
                            });
                            rc.hookTouchEvents(h);
                        }
                    })(c);
                }
            };
            window.profineTest = function(b) {
                if (b) {
                    let c = "unknown";
                    let d = b + "";
                    d = d.slice(0, a.maxNameLength);
                    d = d.replace(/[^\w:\(\)\/? -]+/gmi, " ");
                    d = d.replace(/[^\x00-\x7F]/g, " ");
                    d = d.trim();
                    let e = false;
                    let f = d.toLowerCase().replace(/\s/g, "").replace(/1/g, "i").replace(/0/g, "o").replace(/5/g, "s");
                    if (d.length > 0 && !e) {
                        c = d;
                    }
                    return c;
                }
            };
            window.toggleNight();
        },
        webgl_test: () => {
            return;
            let a = document.createElement("canvas");
            a.id = "WEBGL";
            a.width = a.height = 300;
            a.style = "\n            position: relative;\n            bottom: 70%;\n            left: 70%;\n            pointer-events: none;\n            ";
            let b = document.createElement("div");
            b.id = "faku";
            b.width = b.height = 300;
            b.style = "\n            position: relative;\n            bottom: 70%;\n            left: 70%;\n            pointer-events: none;\n            font-size: 20px;\n            ";
            b.innerHTML = "Webgl Test Rendering";
            let c = a.getContext("webgl");
            if (!c) {
                alert("urbad");
                return;
            }
            document.body.append(a);
            document.body.append(b);
            q(c);
            c.clearColor(0, 0, 0, 0.2);
            c.clear(c.COLOR_BUFFER_BIT);
            let d = c.createBuffer();
            c.bindBuffer(c.ARRAY_BUFFER, d);

            function e(a, b, d, e) {
                let f = c.createShader(c.VERTEX_SHADER);
                c.shaderSource(f, a);
                c.compileShader(f);
                c.getShaderParameter(f, c.COMPILE_STATUS);
                let g = c.createShader(c.FRAGMENT_SHADER);
                c.shaderSource(g, b);
                c.compileShader(g);
                c.getShaderParameter(g, c.COMPILE_STATUS);
                let h = c.createProgram();
                c.attachShader(h, f);
                c.attachShader(h, g);
                c.linkProgram(h);
                c.getProgramParameter(h, c.LINK_STATUS);
                c.useProgram(h);
                let i = c.getAttribLocation(h, "vertex");
                c.enableVertexAttribArray(i);
                c.vertexAttribPointer(i, 2, c.FLOAT, false, 0, 0);
                let j = d.length / 2;
                c.bufferData(c.ARRAY_BUFFER, new Float32Array(d), c.DYNAMIC_DRAW);
                c.drawArrays(e, 0, j);
            }

            function f(a) {
                return a.slice(1).match(/.{1,2}/g).map(a => parseInt(a, 16));
            }

            function g(a, b, c) {
                return [a / 255, b / 255, c / 255].join(", ");
            }
            let h = 50;
            for (let a = 0; a < h; a++) {
                let b = Math.PI * (a / (h / 2));
                e("\n                precision mediump float;\n                attribute vec2 vertex;\n                void main(void) {\n                    gl_Position = vec4(vertex, 0, 1);\n                }\n                ", "\n                precision mediump float;\n                void main(void) {\n                    gl_FragColor = vec4(" + g(...f("#cc5151")) + ", 1);\n                }\n                ", [0 + Math.cos(b) * 0.5, 0 + Math.sin(b) * 0.5, 0, 0], c.LINE_LOOP);
            }
        }
    };
    if (c) {
        for (let a in c) {
            let b = c[a];
            if (typeof b === "function") {
                b();
            }
        }
        window.enableHack = function() {
            if (!p) {
                p = true;
                c.main();
            }
        };
    }
})(1);