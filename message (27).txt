// ==UserScript==
// @name            MOOMOO:İO nixia mod
// @version         v2.3
// @author          ROSZİLTİON
// @match           *://*.moomoo.io/*
// @icon            https://w7.pngwing.com/pngs/609/925/png-transparent-1990s-lettering-graphic-design-90-miscellaneous-text-logo.png
// @grant           none
// @description     169867112916986711291698671129
// ==/UserScript==
let q = {
  io: undefined
};
const a = document.createElement("div");
a.style.top = "5%";
a.style.left = "50%";
a.style.textAlign = "center";
a.style.zIndex = "99";
a.style.color = "#fff";
function b(a) {
  'use strict';

  let b = q.io;
}
const c = {
  name: GM_info.script.name,
  author: GM_info.script.author,
  description: GM_info.script.description,
  version: GM_info.script.version,
  sendPacket: true
};
let d = "Select";
const e = document.createElement("style");
e.innerHTML = "\n.toggle-label {\n    display: flex;\n    align-items: center;\n    position: relative;\n    padding-left: 25px;\n    margin-bottom: 12px;\n    cursor: pointer;\n    font-size: 14px;\n    color: #fff;\n  }\n\n  .toggle-label .toggle-input {\n    display: none;\n  }\n.toggle-label .toggle-slider {\n    position: relative;\n    display: inline-block;\n    width: 56px;\n    height: 35px;\n    margin-right: 16px;\n    border-radius: 20px;\n    background-color: #ccc;\n    transition: background-color 0.3s;\n  }\n.toggle-label .toggle-slider:before {\n    content: \"\";\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    width: 26px;\n    height: 30px;\n    border-radius: 50%;\n    background-color: #fff;\n    transition: transform 0.3s;\n  }\n   .toggle-label .toggle-input:checked + .toggle-slider {\n    background-color: black;\n  }\n\n  .toggle-label .toggle-input:checked + .toggle-slider:before {\n    transform: translateX(16px);\n  }\n";
document.head.appendChild(e);
const f = document.createElement("div");
f.id = "modMenus";
f.style.cssText = "\n  display: block;\n  padding: 10px;\n  position: absolute;\n    background-color: rgba(0, 0, 0, 0.25);\n\n  left: 544px;\n  top: 5px;\nheight: auto;\nwidth: 200px;\n";
const g = document.createElement("div");
g.id = "modMenus2";
f.style.cssText = "\n  display: block;\n  padding: 10px;\n  position: absolute;\n    background-color: rgba(0, 0, 0, 0.25);\n\n  left: 260px;\n  top: 5px;\nheight: auto;\nwidth: 200px;\n";
let h = document.createElement("div");
h.id = "modMenus1";
document.body.append(h);
h.style = "\ndisplay: block;\n  padding: 10px;\n  background-color: rgba(0, 0, 0, 0.25);\n  position: absolute;\n  left: 40px;\n  Right:30px;\n  top: 40px;\nheight: 100px;\nwidth: 200px;\n";
const i = document.createElement("div");
i.id = "headline";
i.style.cssText = "\n\n  color: rgb(255, 255, 255);\n";
f.innerHTML = "\n\n   <div style=\"\n    font-size: 22px;\n    background-color: white;\n    max-height: 130px;\n    <div class = \"main-text\">MISC</div>\n            <div class = \"item-bar\"\n                802px;\n  \">\n\n\n    <label for=\"p2\" class=\"toggle-label\">\n      <input type=\"checkbox\" checked id=\"p2\" class=\"toggle-input\">\n      <span class=\"toggle-slider\"></span>\n      <span>PUSH</span>\n    </label>\n\n    <label for=\"antiBullType\" class=\"toggle-label\">\n      <input type=\"checkbox\" checkbox id=\"antiBullType\" class=\"toggle-input\">\n      <span class=\"toggle-slider\"></span>\n      <span>antibull</span>\n    </label>\n <label for=\"weaponGrind\" class=\"toggle-label\">\n      <input type=\"checkbox\" checkbox id=\"weaponGrind\" class=\"toggle-input\">\n      <span class=\"toggle-slider\"></span>\n      <span>auto grind</span>\n    </label>\n    ";
h.innerHTML = "\n\n    <div style=\"\n    font-size: 22px;\n    max-height: 130px;\n      background-color: white;\n    <div class = \"main-text\">PLAYER</div>\n            <div class = \"item-bar\"\n                802px;\n  \">\n    <label for=\"breakRange\" class=\"toggle-label\">\n      <input type=\"checkbox\" checkbox id=\"breakRange\" class=\"toggle-input\">\n      <span class=\"toggle-slider\"></span>\n      <span>obj 213</span>\n    </label>\n<label for=\"healingBeta\" class=\"toggle-label\">\n      <input type=\"checkbox\" checked id=\"healingBeta\" class=\"toggle-input\">\n      <span class=\"toggle-slider\"></span>\n      <span>fix heal</span>\n    </label>\n<br>\n</div>\n\n        ";
document.body.appendChild(f);
f.appendChild(i);
function pa(b) {
  return document.getElementById(b);
}
var j = "https://cdn.discordapp.com/attachments/1068333890596524033/1126227012596531220/New_Project.mp3";
function k(c) {
  const a = document.getElementById(c);
  if (a.tagName === "SELECT") {
    return a.options[a.selectedIndex].value;
  }
  return a.value;
}
document.getElementById("mainMenu").style.backgroundImage = "url('https://w7.pngwing.com/pngs/609/925/png-transparent-1990s-lettering-graphic-design-90-miscellaneous-text-logo.png')";
let l = new Set();
let m = new Set();
let n = false;
const o = {
  enabled: "#7ee559",
  disabled: "#e55959"
};
function p(c) {
  const a = [...document.querySelectorAll(c)];
  for (const b of a) {
    if (!b) {
      continue;
    }
    if (!(b.remove instanceof Function)) {
      b.style.display = "none !important";
      b.style.visiblity = "hidden !important";
      continue;
    }
    b.remove();
  }
}
function r(c) {
  for (const a of c) {
    if (!a) {
      continue;
    }
    p(a);
  }
}
window.location.native_resolution = true;
const s = window.requestAnimationFrame;
window.requestAnimationFrame = function (b) {
  if (b.toString().length === 69) {
    return window.setTimeout(b, 1000 / 111);
  }
  return s(b);
};
let t = "#fff";
let u = "#8ecc51";
let v = "#f9cb9c";
let w = "#8ecc51";
let x = "#926DB6";
let y = "#F05C5B";
let z = "#F05C5B";
let A = "#8ecc51";
let B = "#98B86E";
let C = "#F05C5B";
let D = "#926DB6";
document.addEventListener("keydown", function (b) {
  if (b.keyCode === 97) {
    const c = document.getElementById("menuChatDiv");
    if (c) {
      const a = c.style.display;
      c.style.display = a === "none" ? "block" : "none";
    }
  }
});
document.addEventListener("keydown", function (b) {
  if (b.keyCode === 98) {
    const c = document.getElementById("gameUI");
    if (c) {
      const a = c.style.display;
      c.style.display = a === "none" ? "block" : "none";
    }
  }
});
document.addEventListener("keydown", function (b) {
  if (b.keyCode === 99) {
    const c = document.getElementById("gameCanvas");
    if (c) {
      const a = c.style.display;
      c.style.display = a === "none" ? "block" : "none";
    }
  }
});
function E() {
  const d = Math.floor(Math.random() * 256);
  const a = Math.floor(Math.random() * 256);
  const b = Math.floor(Math.random() * 256);
  return "rgb(" + d + ", " + a + ", " + b + ")";
}
function F() {
  const d = Math.floor(Math.random() * 128) + 128;
  const a = Math.floor(Math.random() * 128) + 128;
  const b = Math.floor(Math.random() * 128) + 128;
  return "rgb(" + d + ", " + a + ", " + b + ")";
}
function G() {
  const d = Math.floor(Math.random() * 360);
  const a = "100%";
  const b = "50%";
  return "hsl(" + d + ", " + a + ", " + b + ")";
}
follmoo();
window.location.native_resolution = true;
var H;
var I = 0;
let J = true;
let K = console.log;
let L = window.location.hostname == "127.0.0.1";
let M = false;
let N = 1.5;
let O = false;
let P = false;
let Q = {
  degree: 45,
  toggle: false,
  angle: 0
};
function R(c, a) {
  a(c);
}
function S(c, a) {
  a(S);
}
var T = 0;
var U = 0;
var V = "black";
var W = "black";
var X = function (f) {
  var a = {};
  function g(b) {
    if (a[b]) {
      return a[b].exports;
    }
    var c = a[b] = {
      i: b,
      l: false,
      exports: {}
    };
    f[b].call(c.exports, c, c.exports, g);
    c.l = true;
    return c.exports;
  }
  g.m = f;
  g.c = a;
  g.d = function (c, a, b) {
    if (!g.o(c, a)) {
      Object.defineProperty(c, a, {
        enumerable: true,
        get: b
      });
    }
  };
  g.r = function (b) {
    if (typeof Symbol != "undefined" && Symbol.toStringTag) {
      Object.defineProperty(b, Symbol.toStringTag, {
        value: "Module"
      });
    }
    Object.defineProperty(b, "__esModule", {
      value: true
    });
  };
  g.t = function (c, f) {
    if (f & 1) {
      c = g(c);
    }
    if (f & 8) {
      return c;
    }
    if (f & 4 && typeof c == "object" && c && c.__esModule) {
      return c;
    }
    var b = Object.create(null);
    g.r(b);
    Object.defineProperty(b, "default", {
      enumerable: true,
      value: c
    });
    if (f & 2 && typeof c != "string") {
      for (var d in c) {
        g.d(b, d, function (a) {
          return c[a];
        }.bind(null, d));
      }
    }
    return b;
  };
  g.n = function (c) {
    var a = c && c.__esModule ? function () {
      return c.default;
    } : function () {
      return c;
    };
    g.d(a, "a", a);
    return a;
  };
  g.o = function (c, a) {
    return Object.prototype.hasOwnProperty.call(c, a);
  };
  g.p = "/bin/";
  return g(g.s = 0);
}([function (i, a, b) {
  var c = {};
  var j = b(1);
  var k = b(2);
  var e = b(3);
  i.exports = c;
  var g = 1;
  c.js = function () {
    var z;
    var A;
    var B;
    var d = 1.4;
    var i = false;
    var h = {};
    var f = {};
    var l = {};
    var C = {};
    var D = true;
    var E = {};
    var p = [];
    var q = Number.MAX_VALUE;
    var F = false;
    this.setAcceptableTiles = function (b) {
      if (b instanceof Array) {
        B = b;
      } else if (!isNaN(parseFloat(b)) && isFinite(b)) {
        B = [b];
      }
    };
    this.enableSync = function () {
      i = true;
    };
    this.disableSync = function () {
      i = false;
    };
    this.enableDiagonals = function () {
      F = true;
    };
    this.disableDiagonals = function () {
      F = false;
    };
    this.setGrid = function (a) {
      z = a;
      for (var b = 0; b < z.length; b++) {
        for (var e = 0; e < z[0].length; e++) {
          f[z[b][e]] ||= 1;
        }
      }
    };
    this.setTileCost = function (c, a) {
      f[c] = a;
    };
    this.setAdditionalPointCost = function (d, a, b) {
      if (l[a] === undefined) {
        l[a] = {};
      }
      l[a][d] = b;
    };
    this.removeAdditionalPointCost = function (c, a) {
      if (l[a] !== undefined) {
        delete l[a][c];
      }
    };
    this.removeAllAdditionalPointCosts = function () {
      l = {};
    };
    this.setDirectionalCondition = function (d, a, b) {
      if (C[a] === undefined) {
        C[a] = {};
      }
      C[a][d] = b;
    };
    this.removeAllDirectionalConditions = function () {
      C = {};
    };
    this.setIterationsPerCalculation = function (b) {
      q = b;
    };
    this.avoidAdditionalPoint = function (c, a) {
      if (h[a] === undefined) {
        h[a] = {};
      }
      h[a][c] = 1;
    };
    this.stopAvoidingAdditionalPoint = function (c, a) {
      if (h[a] !== undefined) {
        delete h[a][c];
      }
    };
    this.enableCornerCutting = function () {
      D = true;
    };
    this.disableCornerCutting = function () {
      D = false;
    };
    this.stopAvoidingAllAdditionalPoints = function () {
      h = {};
    };
    this.findPath = function (a, b, c, d, f) {
      function h(b) {
        if (i) {
          f(b);
        } else {
          setTimeout(function () {
            f(b);
          });
        }
      }
      if (B === undefined) {
        throw new Error("You can't set a path without first calling setAcceptableTiles() on EasyStar.");
      }
      if (z === undefined) {
        throw new Error("You can't set a path without first calling setGrid() on EasyStar.");
      }
      if (a < 0 || b < 0 || c < 0 || d < 0 || a > z[0].length - 1 || b > z.length - 1 || c > z[0].length - 1 || d > z.length - 1) {
        throw new Error("Your start or end point is outside the scope of your grid.");
      }
      if (a !== c || b !== d) {
        var k = z[d][c];
        var l = false;
        for (var m = 0; m < B.length; m++) {
          if (k === B[m]) {
            l = true;
            break;
          }
        }
        if (l !== false) {
          var q = new j();
          q.openList = new e(function (c, a) {
            return c.bestGuessDistance() - a.bestGuessDistance();
          });
          q.isDoneCalculating = false;
          q.nodeHash = {};
          q.startX = a;
          q.startY = b;
          q.endX = c;
          q.endY = d;
          q.callback = h;
          q.openList.push(w(q, q.startX, q.startY, null, 1));
          d = g++;
          E[d] = q;
          p.push(d);
          return d;
        }
        h(null);
      } else {
        h([]);
      }
    };
    this.cancelPath = function (b) {
      return b in E && (delete E[b], true);
    };
    this.calculate = function () {
      if (p.length !== 0 && z !== undefined && B !== undefined) {
        for (A = 0; A < q; A++) {
          if (p.length === 0) {
            return;
          }
          if (i) {
            A = 0;
          }
          var a = p[0];
          var b = E[a];
          if (b !== undefined) {
            if (b.openList.size() !== 0) {
              var c = b.openList.pop();
              if (b.endX !== c.x || b.endY !== c.y) {
                if ((c.list = 0) < c.y) {
                  G(b, c, 0, -1, +v(c.x, c.y - 1));
                }
                if (c.x < z[0].length - 1) {
                  G(b, c, 1, 0, +v(c.x + 1, c.y));
                }
                if (c.y < z.length - 1) {
                  G(b, c, 0, 1, +v(c.x, c.y + 1));
                }
                if (c.x > 0) {
                  G(b, c, -1, 0, +v(c.x - 1, c.y));
                }
                if (F) {
                  if (c.x > 0 && c.y > 0 && (D || t(z, B, c.x, c.y - 1, c) && t(z, B, c.x - 1, c.y, c))) {
                    G(b, c, -1, -1, d * v(c.x - 1, c.y - 1));
                  }
                  if (c.x < z[0].length - 1 && c.y < z.length - 1 && (D || t(z, B, c.x, c.y + 1, c) && t(z, B, c.x + 1, c.y, c))) {
                    G(b, c, 1, 1, d * v(c.x + 1, c.y + 1));
                  }
                  if (c.x < z[0].length - 1 && c.y > 0 && (D || t(z, B, c.x, c.y - 1, c) && t(z, B, c.x + 1, c.y, c))) {
                    G(b, c, 1, -1, d * v(c.x + 1, c.y - 1));
                  }
                  if (c.x > 0 && c.y < z.length - 1 && (D || t(z, B, c.x, c.y + 1, c) && t(z, B, c.x - 1, c.y, c))) {
                    G(b, c, -1, 1, d * v(c.x - 1, c.y + 1));
                  }
                }
              } else {
                var j = [];
                j.push({
                  x: c.x,
                  y: c.y
                });
                for (var k = c.parent; k != null;) {
                  j.push({
                    x: k.x,
                    y: k.y
                  });
                  k = k.parent;
                }
                j.reverse();
                b.callback(j);
                delete E[a];
                p.shift();
              }
            } else {
              b.callback(null);
              delete E[a];
              p.shift();
            }
          } else {
            p.shift();
          }
        }
      }
    };
    function G(a, b, c, d, i) {
      c = b.x + c;
      d = b.y + d;
      if ((h[d] === undefined || h[d][c] === undefined) && !!t(z, B, c, d, b)) {
        if ((d = w(a, c, d, b, i)).list === undefined) {
          d.list = 1;
          a.openList.push(d);
        } else if (b.costSoFar + i < d.costSoFar) {
          d.costSoFar = b.costSoFar + i;
          d.parent = b;
          a.openList.updateItem(d);
        }
      }
    }
    function t(i, a, b, c, d) {
      var e = C[c] && C[c][b];
      if (e) {
        var f = u(d.x - b, d.y - c);
        if (!function () {
          for (var b = 0; b < e.length; b++) {
            if (e[b] === f) {
              return true;
            }
          }
          return false;
        }()) {
          return false;
        }
      }
      for (var g = 0; g < a.length; g++) {
        if (i[c][b] === a[g]) {
          return true;
        }
      }
      return false;
    }
    function u(d, a) {
      if (d === 0 && a === -1) {
        return c.TOP;
      }
      if (d === 1 && a === -1) {
        return c.TOP_RIGHT;
      }
      if (d === 1 && a === 0) {
        return c.RIGHT;
      }
      if (d === 1 && a === 1) {
        return c.BOTTOM_RIGHT;
      }
      if (d === 0 && a === 1) {
        return c.BOTTOM;
      }
      if (d === -1 && a === 1) {
        return c.BOTTOM_LEFT;
      }
      if (d === -1 && a === 0) {
        return c.LEFT;
      }
      if (d === -1 && a === -1) {
        return c.TOP_LEFT;
      }
      throw new Error("These differences are not valid: " + d + ", " + a);
    }
    function v(a, b) {
      return l[b] && l[b][a] || f[z[b][a]];
    }
    function w(f, a, b, c, d) {
      if (f.nodeHash[b] !== undefined) {
        if (f.nodeHash[b][a] !== undefined) {
          return f.nodeHash[b][a];
        }
      } else {
        f.nodeHash[b] = {};
      }
      var h = x(a, b, f.endX, f.endY);
      var d = c !== null ? c.costSoFar + d : 0;
      var h = new k(c, a, b, d, h);
      return f.nodeHash[b][a] = h;
    }
    function x(g, a, b, c) {
      var h;
      var i;
      if (F) {
        if ((h = Math.abs(g - b)) < (i = Math.abs(a - c))) {
          return d * h + i;
        } else {
          return d * i + h;
        }
      } else {
        return (h = Math.abs(g - b)) + (i = Math.abs(a - c));
      }
    }
  };
  c.TOP = "TOP";
  c.TOP_RIGHT = "TOP_RIGHT";
  c.RIGHT = "RIGHT";
  c.BOTTOM_RIGHT = "BOTTOM_RIGHT";
  c.BOTTOM = "BOTTOM";
  c.BOTTOM_LEFT = "BOTTOM_LEFT";
  c.LEFT = "LEFT";
  c.TOP_LEFT = "TOP_LEFT";
}, function (c, a) {
  c.exports = function () {
    this.pointsToAvoid = {};
    this.startX;
    this.callback;
    this.startY;
    this.endX;
    this.endY;
    this.nodeHash = {};
    this.openList;
  };
}, function (c, a) {
  c.exports = function (f, a, b, c, d) {
    this.parent = f;
    this.x = a;
    this.y = b;
    this.costSoFar = c;
    this.simpleDistanceToTarget = d;
    this.bestGuessDistance = function () {
      return this.costSoFar + this.simpleDistanceToTarget;
    };
  };
}, function (d, a, b) {
  d.exports = b(4);
}, function (f, a, b) {
  var u;
  var v;
  (function () {
    var b;
    var d;
    var w;
    var x;
    var e;
    var y;
    var z;
    var A;
    var B;
    var C;
    var D;
    var E;
    var F;
    var G;
    var H;
    function I(b) {
      this.cmp = b ?? d;
      this.nodes = [];
    }
    w = Math.floor;
    C = Math.min;
    d = function (c, a) {
      if (c < a) {
        return -1;
      } else if (a < c) {
        return 1;
      } else {
        return 0;
      }
    };
    B = function (f, a, b, g, i) {
      var j;
      if (b == null) {
        b = 0;
      }
      if (i == null) {
        i = d;
      }
      if (b < 0) {
        throw new Error("lo must be non-negative");
      }
      for (g == null && (g = f.length); b < g;) {
        if (i(a, f[j = w((b + g) / 2)]) < 0) {
          g = j;
        } else {
          b = j + 1;
        }
      }
      [].splice.apply(f, [b, b - b].concat(a));
      return a;
    };
    y = function (e, a, b) {
      if (b == null) {
        b = d;
      }
      e.push(a);
      return G(e, 0, e.length - 1, b);
    };
    e = function (e, a) {
      var f;
      var g;
      if (a == null) {
        a = d;
      }
      f = e.pop();
      if (e.length) {
        g = e[0];
        e[0] = f;
        H(e, 0, a);
      } else {
        g = f;
      }
      return g;
    };
    A = function (e, a, b) {
      var f;
      if (b == null) {
        b = d;
      }
      f = e[0];
      e[0] = a;
      H(e, 0, b);
      return f;
    };
    z = function (e, a, f) {
      var g;
      if (f == null) {
        f = d;
      }
      if (e.length && f(e[0], a) < 0) {
        a = (g = [e[0], a])[0];
        e[0] = g[1];
        H(e, 0, f);
      }
      return a;
    };
    x = function (f, a) {
      var g;
      var k;
      var l;
      var m;
      var n;
      var o;
      if (a == null) {
        a = d;
      }
      n = [];
      k = 0;
      l = (m = function () {
        o = [];
        for (var a = 0, d = w(f.length / 2); d >= 0 ? a < d : d < a; d >= 0 ? a++ : a--) {
          o.push(a);
        }
        return o;
      }.apply(this).reverse()).length;
      for (; k < l; k++) {
        g = m[k];
        n.push(H(f, g, a));
      }
      return n;
    };
    F = function (e, a, f) {
      if (f == null) {
        f = d;
      }
      if ((a = e.indexOf(a)) !== -1) {
        G(e, 0, a, f);
        return H(e, a, f);
      }
    };
    D = function (f, a, b) {
      var h;
      var k;
      var l;
      var m;
      var n;
      if (b == null) {
        b = d;
      }
      if (!(k = f.slice(0, a)).length) {
        return k;
      }
      x(k, b);
      l = 0;
      m = (n = f.slice(a)).length;
      for (; l < m; l++) {
        h = n[l];
        z(k, h, b);
      }
      return k.sort(b).reverse();
    };
    E = function (f, a, b) {
      var h;
      var i;
      var m;
      var n;
      var r;
      var s;
      var t;
      var u;
      var v;
      if (b == null) {
        b = d;
      }
      if (a * 10 <= f.length) {
        if (!(m = f.slice(0, a).sort(b)).length) {
          return m;
        }
        i = m[m.length - 1];
        n = 0;
        s = (t = f.slice(a)).length;
        for (; n < s; n++) {
          if (b(h = t[n], i) < 0) {
            B(m, h, 0, null, b);
            m.pop();
            i = m[m.length - 1];
          }
        }
        return m;
      }
      x(f, b);
      v = [];
      r = 0;
      u = C(a, f.length);
      for (; u >= 0 ? r < u : u < r; u >= 0 ? ++r : --r) {
        v.push(e(f, b));
      }
      return v;
    };
    G = function (f, a, b, i) {
      var j;
      var k;
      var l;
      if (i == null) {
        i = d;
      }
      j = f[b];
      while (a < b && i(j, k = f[l = b - 1 >> 1]) < 0) {
        f[b] = k;
        b = l;
      }
      return f[b] = j;
    };
    H = function (f, a, j) {
      var k;
      var l;
      var m;
      var n;
      var o;
      if (j == null) {
        j = d;
      }
      l = f.length;
      m = f[o = a];
      k = a * 2 + 1;
      while (k < l) {
        if ((n = k + 1) < l && j(f[k], f[n]) >= 0) {
          k = n;
        }
        f[a] = f[k];
        k = (a = k) * 2 + 1;
      }
      f[a] = m;
      return G(f, o, a, j);
    };
    I.push = y;
    I.pop = e;
    I.replace = A;
    I.pushpop = z;
    I.heapify = x;
    I.updateItem = F;
    I.nlargest = D;
    I.nsmallest = E;
    I.prototype.push = function (b) {
      return y(this.nodes, b, this.cmp);
    };
    I.prototype.pop = function () {
      return e(this.nodes, this.cmp);
    };
    I.prototype.peek = function () {
      return this.nodes[0];
    };
    I.prototype.contains = function (b) {
      return this.nodes.indexOf(b) !== -1;
    };
    I.prototype.replace = function (b) {
      return A(this.nodes, b, this.cmp);
    };
    I.prototype.pushpop = function (b) {
      return z(this.nodes, b, this.cmp);
    };
    I.prototype.heapify = function () {
      return x(this.nodes, this.cmp);
    };
    I.prototype.updateItem = function (b) {
      return F(this.nodes, b, this.cmp);
    };
    I.prototype.clear = function () {
      return this.nodes = [];
    };
    I.prototype.empty = function () {
      return this.nodes.length === 0;
    };
    I.prototype.size = function () {
      return this.nodes.length;
    };
    I.prototype.clone = function () {
      var b = new I();
      b.nodes = this.nodes.slice(0);
      return b;
    };
    I.prototype.toArray = function () {
      return this.nodes.slice(0);
    };
    I.prototype.insert = I.prototype.push;
    I.prototype.top = I.prototype.peek;
    I.prototype.front = I.prototype.peek;
    I.prototype.has = I.prototype.contains;
    I.prototype.copy = I.prototype.clone;
    b = I;
    u = [];
    if ((v = typeof (v = function () {
      return b;
    }) == "function" ? v.apply(a, u) : v) !== undefined) {
      f.exports = v;
    }
  }).call(this);
}]);
let Y = new X.js();
(function (c) {
  if (!c) {
    return;
  }
  let d = {
    setup: () => {
      'use strict';

      let c = document.createElement("link");
      c.rel = "stylesheet";
      c.href = "https://fonts.googleapis.com/css?family=Ubuntu:700";
      c.type = "text/css";
      document.body.append(c);
      let a = document.createElement("script");
      a.src = "https://rawgit.com/kawanet/msgpack-lite/master/dist/msgpack.min.js";
      document.body.append(a);
    },
    main: () => {
      if (!J) {
        return;
      }
      "use strict";
      window.oncontextmenu = function () {
        return false;
      };
      let x = window.config;
      x.clientSendRate = 0;
      x.serverUpdateRate = 9;
      x.deathFadeout = 0;
      x.isSandbox = window.location.hostname == "sandbox.moomoo.io";
      x.skinColors = ["#bf8f54", "#cbb091", "#896c4b", "#fadadc", "#ececec", "#c37373", "#4c4c4c", "#ecaff7", "#738cc3", "#8bc373", "#91b2db"];
      x.weaponVariants = [{
        id: 0,
        src: "",
        xp: 0,
        val: 1
      }, {
        id: 1,
        src: "_g",
        xp: 3000,
        val: 1.1
      }, {
        id: 2,
        src: "_d",
        xp: 7000,
        val: 1.18
      }, {
        id: 3,
        src: "_r",
        poison: true,
        xp: 12000,
        val: 1.18
      }, {
        id: 4,
        src: "_e",
        poison: true,
        heal: true,
        xp: 24000,
        val: 1.18
      }];
      x.anotherVisual = true;
      x.useWebGl = false;
      x.resetRender = false;
      function a(c) {
        return new Promise(a => {
          setTimeout(() => {
            a();
          }, c);
        });
      }
      let b = false;
      let c = [];
      let k;
      if (typeof Storage !== "undefined") {
        k = true;
      }
      function p(c, a) {
        if (k) {
          localStorage.setItem(c, a);
        }
      }
      function f(b) {
        if (k) {
          localStorage.removeItem(b);
        }
      }
      function g(b) {
        if (k) {
          return localStorage.getItem(b);
        }
        return null;
      }
      let h = function (d, c) {
        try {
          let a = JSON.parse(g(d));
          if (typeof a === "object") {
            return c;
          } else {
            return a;
          }
        } catch (b) {
          alert("dieskid");
          return c;
        }
      };
      let i = "John Doe";
      let z = false;
      function B(b) {
        i = b;
        console.log("Custom name set to:", i);
      }
      function m(b) {
        t = b;
        console.log("Name color set to:", t);
      }
      function O() {
        return {
          help: {
            desc: "Show Commands",
            action: function (b) {
              for (let a in q) {
                Rd("/" + a, q[a].desc, "lime", 1);
              }
            }
          },
          clear: {
            desc: "Clear Chats",
            action: function (b) {
              H();
            }
          },
          debug: {
            desc: "Debug Mod For Development",
            action: function (b) {
              Gd(ng);
              Rd("Debug", "Done", "#99ee99", 1);
            }
          },
          play: {
            desc: "Play Music ( /play [link] )",
            action: function (c) {
              let d = c.split(" ");
              if (d[1]) {
                let b = new Audio(d[1]);
                b.play();
              } else {
                Rd("Warn", "Enter Link ( /play [link] )", "#99ee99", 1);
              }
            }
          },
          bye: {
            desc: "Leave Game",
            action: function (b) {
              window.leave();
            }
          },
          namechanger: {
            desc: "Toggle NameChanger ( /namechanger [on|off|setname name] )",
            action: function (d) {
              let e = d.split(" ");
              if (e.length < 2) {
                Rd("Name Changer", "Usage: /namechanger [on|off|setname name]", "red", 1);
                return;
              }
              let a = e[1].toLowerCase();
              if (a === "on") {
                z = true;
                Rd("Name Changer", "Enabled", "#99ee99", 1);
              } else if (a === "off") {
                z = false;
                Rd("Name Changer", "Disabled", "#99ee99", 1);
              } else if (a === "setname") {
                let b = e.slice(2).join(" ");
                if (b) {
                  B(b);
                  Rd("Name Changer", "Set to: " + b, "#99ee99", 1);
                } else {
                  Rd("Name Changer", "Usage: /namechanger setname [name]", "red", 1);
                }
              } else {
                Rd("Name Changer", "Usage: /namechanger [on|off|setname name]", "red", 1);
              }
            }
          },
          namecolorchanger: {
            desc: "Change Name Color ( /namecolorchanger [color] )",
            action: function (d) {
              let a = d.split(" ");
              if (a.length < 2) {
                Rd("Name Color Changer", "Usage: /namecolorchanger [color]", "red", 1);
                return;
              }
              let b = a[1];
              if (/^#[0-9A-Fa-f]{6}([0-9A-Fa-f]{2})?$/.test(b)) {
                m(b);
                Rd("Name Color Changer", "Name color set to: " + b, "#99ee99", 1);
              } else {
                Rd("Name Color Changer", "Invalid color format. Usage: /namecolorchanger [color]", "red", 1);
              }
            }
          }
        };
      }
      function o() {
        return {
          killChat: false,
          autoBuy: false,
          autoBuyEquip: true,
          autoPush: true,
          revTick: false,
          spikeTick: true,
          predictTick: true,
          autoPlace: true,
          autoReplace: true,
          antiTrap: true,
          slowOT: false,
          attackDir: false,
          noDir: true,
          showDir: false,
          autoRespawn: false
        };
      }
      let q = O();
      let r = o();
      window.removeConfigs = function () {
        for (let b in r) {
          f(b, r[b]);
        }
      };
      for (let b in r) {
        r[b] = h(b, r[b]);
      }
      window.changeMenu = function () {};
      window.debug = function () {};
      window.toggleNight = function () {};
      window.wasdMode = function () {};
      window.startGrind = function () {};
      window.connectFillBots = function () {};
      window.destroyFillBots = function () {};
      window.tryConnectBots = function () {};
      window.destroyBots = function () {};
      window.resBuild = function () {};
      window.toggleBotsCircle = function () {};
      window.toggleVisual = function () {};
      window.prepareUI = function () {};
      window.leave = function () {};
      window.ping = M ? 86 : 0;
      class s {
        constructor(b) {
          this.element = b;
        }
        add(b) {
          if (!this.element) {
            return undefined;
          }
          this.element.innerHTML += b;
        }
        newLine(d) {
          let a = "<br>";
          if (d > 0) {
            a = "";
            for (let b = 0; b < d; b++) {
              a += "<br>";
            }
          }
          this.add(a);
        }
        checkBox(c) {
          let a = "<input type = \"checkbox\"";
          if (c.id) {
            a += " id = " + c.id;
          }
          if (c.style) {
            a += " style = " + c.style.replaceAll(" ", "");
          }
          if (c.class) {
            a += " class = " + c.class;
          }
          if (c.checked) {
            a += " checked";
          }
          if (c.onclick) {
            a += " onclick = " + c.onclick;
          }
          a += ">";
          this.add(a);
        }
        text(c) {
          let a = "<input type = \"text\"";
          if (c.id) {
            a += " id = " + c.id;
          }
          if (c.style) {
            a += " style = " + c.style.replaceAll(" ", "");
          }
          if (c.class) {
            a += " class = " + c.class;
          }
          if (c.size) {
            a += " size = " + c.size;
          }
          if (c.maxLength) {
            a += " maxLength = " + c.maxLength;
          }
          if (c.value) {
            a += " value = " + c.value;
          }
          if (c.placeHolder) {
            a += " placeHolder = " + c.placeHolder.replaceAll(" ", "&nbsp;");
          }
          a += ">";
          this.add(a);
        }
        select(d) {
          let a = "<select";
          if (d.id) {
            a += " id = " + d.id;
          }
          if (d.style) {
            a += " style = " + d.style.replaceAll(" ", "");
          }
          if (d.class) {
            a += " class = " + d.class;
          }
          a += ">";
          for (let b in d.option) {
            a += "<option value = " + d.option[b].id;
            if (d.option[b].selected) {
              a += " selected";
            }
            a += ">" + b + "</option>";
          }
          a += "</select>";
          this.add(a);
        }
        button(c) {
          let a = "<button";
          if (c.id) {
            a += " id = " + c.id;
          }
          if (c.style) {
            a += " style = " + c.style.replaceAll(" ", "");
          }
          if (c.class) {
            a += " class = " + c.class;
          }
          if (c.onclick) {
            a += " onclick = " + c.onclick;
          }
          a += ">";
          if (c.innerHTML) {
            a += c.innerHTML;
          }
          a += "</button>";
          this.add(a);
        }
        selectMenu(e) {
          let a = "<select";
          if (!e.id) {
            alert("please put id skid");
            return;
          }
          window[e.id + "Func"] = function () {};
          if (e.id) {
            a += " id = " + e.id;
          }
          if (e.style) {
            a += " style = " + e.style.replaceAll(" ", "");
          }
          if (e.class) {
            a += " class = " + e.class;
          }
          a += " onchange = window." + (e.id + "Func") + "()";
          a += ">";
          let f;
          let g = 0;
          for (let b in e.menu) {
            a += "<option value = " + ("option_" + b) + " id = " + ("O_" + b);
            if (e.menu[b]) {
              a += " checked";
            }
            a += " style = \"color: " + (e.menu[b] ? "#000" : "#fff") + "; background: " + (e.menu[b] ? "#8ecc51" : "#cc5151") + ";\">" + b + "</option>";
            g++;
          }
          a += "</select>";
          this.add(a);
          g = 0;
          for (let a in e.menu) {
            window[a + "Func"] = function () {
              e.menu[a] = pa("check_" + a).checked ? true : false;
              p(a, e.menu[a]);
              pa("O_" + a).style.color = e.menu[a] ? "#000" : "#fff";
              pa("O_" + a).style.background = e.menu[a] ? "#8ecc51" : "#cc5151";
            };
            this.checkBox({
              id: "check_" + a,
              style: "display: " + (g == 0 ? "inline-block" : "none") + ";",
              class: "checkB",
              onclick: "window." + (a + "Func") + "()",
              checked: e.menu[a]
            });
            g++;
          }
          f = "check_" + pa(e.id).value.split("_")[1];
          window[e.id + "Func"] = function () {
            pa(f).style.display = "none";
            f = "check_" + pa(e.id).value.split("_")[1];
            pa(f).style.display = "inline-block";
          };
        }
      }
      ;
      class S {
        constructor() {
          this.element = null;
          this.action = null;
          this.divElement = null;
          this.startDiv = function (e, a) {
            let b = document.createElement("div");
            if (e.id) {
              b.id = e.id;
            }
            if (e.style) {
              b.style = e.style;
            }
            if (e.class) {
              b.className = e.class;
            }
            this.element.appendChild(b);
            this.divElement = b;
            let c = new s(b);
            if (typeof a == "function") {
              a(c);
            }
          };
          this.addDiv = function (e, a) {
            let b = document.createElement("div");
            if (e.id) {
              b.id = e.id;
            }
            if (e.style) {
              b.style = e.style;
            }
            if (e.class) {
              b.className = e.class;
            }
            if (e.appendID) {
              pa(e.appendID).appendChild(b);
            }
            this.divElement = b;
            let c = new s(b);
            if (typeof a == "function") {
              a(c);
            }
          };
        }
        set(b) {
          this.element = pa(b);
          this.action = new s(this.element);
        }
        resetHTML(b) {
          if (b) {
            this.element.innerHTML = "";
          } else {
            this.element.innerHTML = "";
          }
        }
        setStyle(b) {
          this.element.style = b;
        }
        setCSS(b) {
          this.action.add("<style>" + b + "</style>");
        }
      }
      ;
      let _ = new S();
      let v = document.createElement("div");
      v.id = "nightMode";
      document.body.appendChild(v);
      _.set("nightMode");
      _.setStyle("\n            display: none;\n            position: absolute;\n            pointer-events: none;\n            background-color: rgb(0, 0, 100);\n            opacity: 0;\n            top: 0%;\n            width: 100%;\n            height: 100%;\n            animation-duration: 5s;\n            animation-name: night2;\n            ");
      _.resetHTML();
      _.setCSS("\n            @keyframes night1 {\n                from {opacity: 0;}\n                to {opacity: 0.35;}\n            }\n            @keyframes night2 {\n                from {opacity: 0.35;}\n                to {opacity: 0;}\n            }\n            ");
      let aa = document.createElement("div");
      aa.id = "menuDiv";
      document.body.appendChild(aa);
      _.set("menuDiv");
      _.setStyle("\n            position: absolute;\n            left: 0px;\n            top: 0px;\n            ");
      _.resetHTML();
      _.setCSS("\n#menuDiv .menuClass {\n  color: #fff;\n  font-size: 0px;\n  text-align: center;\n  padding: 0px;\n  width: 0px;\n  background-color: #1f1f1f;\n  border-radius: 0px;\n  box-shadow: 0 8px 0px rgba(0, 0, 0, 0.3);\n  transition: opacity 0.4s ease-in-out, transform 0.4s ease-in-out, box-shadow 0.3s ease-in-out, filter 0.4s ease-in-out;\n  overflow: visible;\n  filter: blur(5px);\n}\n#menuDiv .menuClass:hover {\nbackground-color: #0d1113;\n    box-shadow: 0 0 5px rgba(255, 0, 0, 0.5), 0 0 10px rgba(255, 0, 0, 0.5), 0 0 15px rgba(255, 0, 0, 0.5);\n  transform: translateY(-5px) scale(1.05);\n  filter: none;\n}\n#menuDiv .menuC {\n  display: none;\n  font-family: \"Hammersmith One\", sans-serif;\n  font-size: 1px;\n  max-height: 0px;\n  overflow-y: auto;\n}\n#menuDiv .menuB {\n  text-align: center;\n  background-color: #990000;\n  color: #fff;\n  border-radius: 25px;\n  border: 2px solid transparent;\n  cursor: pointer;\n  transition: border-color 0.3s ease-in-out;\n}\n#menuDiv .menuB:hover {\n  border-color: #fff;\n}\n#menuDiv .menuB:active {\n  color: #fff;\n  background-color: #990000;;\n}\n#menuDiv .customText {\n  color: #000;\n  border-radius: 2px;\n  border: 2px solid #000;\n  padding: 1px;\n  transition: background-color 0.3s ease-in-out;\n}\n#menuDiv .customText:focus {\n  background-color: rgba(30, 130, 76, 0.3);\n}\n#menuDiv .checkB {\n  position: relative;\n  top: 2px;\n  accent-color: #888;\n  cursor: pointer;\n}\n#menuDiv .Cselect {\n  border-radius: 2px;\n  background-color: #990000;\n  color: #fff;\n  border: 1px solid #000;\n}\n#menuDiv #menuChanger {\n  position: absolute;\n  right: 0px;\n  top: 0px;\n  background-color: rgba(0, 0, 0, 0);\n  color: #fff;\n  border: none;\n  cursor: pointer;\n  transition: color 0.3s ease-in-out;\n}\n#menuDiv #menuChanger:hover {\n  color: #000;\n}\n#menuDiv ::-webkit-scrollbar {\n  width: 0px;\n}\n#menuDiv ::-webkit-scrollbar-track {\n  background-color: transparent;\n}\n#menuDiv ::-webkit-scrollbar-thumb {\n  background-color: #990000;\n  border-radius: 1px;\n}\n#menuDiv ::-webkit-scrollbar-thumb:active {\n  background-color: #1f1f1f;\n}\n            ");
      _.startDiv({
        id: "menuHeadLine",
        class: "menuClass"
      }, b => {
        b.add("𝕽𝖊𝖛𝖔𝖑𝖛𝖊𝖗");
        _.addDiv({
          id: "menuButtons",
          style: "display: block; overflow-y: visible;",
          class: "menuC",
          appendID: "menuHeadLine"
        }, b => {});
        _.addDiv({
          id: "menuMain",
          style: "display: block",
          class: "menuC",
          appendID: "menuHeadLine"
        }, c => {
          c.button({
            class: "menuB",
            innerHTML: "Toggle Wasd Mode",
            onclick: "window.wasdMode()"
          });
          c.newLine();
          c.add("Weapon Grinder: ");
          c.newLine(2);
          _.addDiv({
            style: "font-size: 20px; color: #990000;",
            appendID: "menuMain"
          }, b => {
            b.add("Developing Settings:");
          });
          c.add("New Healing Beta:");
          c.newLine();
          c.add("Placement Indicator");
          c.newLine();
          c.add("AI Chat");
          c.checkBox({
            id: "aichatbot",
            class: "checkB",
            checked: false
          });
          c.newLine();
          c.add("Pathfinder");
          c.checkBox({
            id: "path",
            class: "checkB",
            checked: false
          });
          const a = document.getElementById("path");
          a.addEventListener("change", function () {
            ng.chat.message = "path";
            ng.chat.count = 2000;
            if (a.checked) {
              Rg.active = true;
              Rg.chaseNear = true;
            } else {
              ng.chat.message = "path off";
              ng.chat.count = 2000;
              Rg.active = false;
              Rg.chaseNear = false;
            }
          });
          c.newLine(2);
          c.add("Camera: ");
          c.select({
            id: "visualType",
            class: "Cselect",
            option: {
              "Camera 1": {
                id: "Cam1",
                selected: true
              },
              "Camera 2": {
                id: "Cam2"
              },
              "Camera 3": {
                id: "Cam3"
              }
            }
          });
          c.newLine(2);
          c.add("Visuals: ");
          c.select({
            id: "visualType",
            class: "Cselect",
            option: {
              Beta: {
                id: "o1rd1"
              },
              Base: {
                id: "o1rd2"
              },
              "Base+": {
                id: "o1rd2+",
                selected: true
              },
              "'The Prehistoric World'": {
                id: "oogabooga"
              }
            }
          });
        });
        _.addDiv({
          id: "menuConfig",
          class: "menuC",
          appendID: "menuHeadLine"
        }, b => {
          b.add("AutoPlacer Placement Tick: ");
          b.text({
            id: "autoPlaceTick",
            class: "customText",
            value: "2",
            size: "2em",
            maxLength: "1"
          });
          b.newLine();
          b.add("Configs: ");
          b.selectMenu({
            id: "configsChanger",
            class: "Cselect",
            menu: r
          });
          b.newLine();
          b.add("InstaKill Type: ");
          b.select({
            id: "instaType",
            class: "Cselect",
            option: {
              OneShot: {
                id: "oneShot",
                selected: true
              },
              Spammer: {
                id: "spammer"
              }
            }
          });
          b.newLine();
          b.add("AntiBull Type: ");
          b.select({
            id: "ae",
            class: "Cselect",
            option: {
              "Disable AntiBull": {
                id: "noab"
              },
              "When Reloaded": {
                id: "abreload"
              },
              "Primary Reloaded": {
                id: "abalway",
                selected: true
              }
            }
          });
          b.newLine();
          b.add("Backup Nobull Insta: ");
          b.checkBox({
            id: "backupNobull",
            class: "checkB",
            checked: true
          });
          b.newLine();
          b.add("Turret Gear Combat Assistance: ");
          b.checkBox({
            id: "turretCombat",
            class: "checkB"
          });
          b.newLine();
          b.add("Safe AntiSpikeTick: ");
          b.checkBox({
            id: "safeAntiSpikeTick",
            class: "checkB",
            checked: true
          });
          b.newLine();
        });
        _.addDiv({
          id: "menuOther",
          class: "menuC",
          appendID: "menuHeadLine"
        }, b => {
          b.button({
            class: "menuB",
            innerHTML: "Connect Bots",
            onclick: "window.tryConnectBots()"
          });
          b.button({
            class: "menuB",
            innerHTML: "Disconnect Bots",
            onclick: "window.destroyBots()"
          });
          b.newLine();
          b.button({
            class: "menuB",
            innerHTML: "Connect FBots",
            onclick: "window.connectFillBots()"
          });
          b.button({
            class: "menuB",
            innerHTML: "Disconnect FBots",
            onclick: "window.destroyFillBots()"
          });
          b.newLine();
          b.button({
            class: "menuB",
            innerHTML: "Reset Break Objects",
            onclick: "window.resBuild()"
          });
          b.newLine();
          b.add("Break Objects Range: ");
          b.newLine();
          b.add("Predict Movement Type: ");
          b.select({
            id: "predictType",
            class: "Cselect",
            option: {
              "Disable Render": {
                id: "disableRender",
                selected: true
              },
              "X/Y and 2": {
                id: "pre2"
              },
              "X/Y and 3": {
                id: "pre3"
              }
            }
          });
          b.newLine();
          b.newLine(2);
          b.button({
            class: "menuB",
            innerHTML: "Toggle Fbots Circle",
            onclick: "window.toggleBotsCircle()"
          });
          b.newLine();
          b.add("Circle Rad: ");
          b.text({
            id: "circleRad",
            class: "customText",
            value: "200",
            size: "3em",
            maxLength: "4"
          });
          b.newLine();
          b.add("Rad Speed: ");
          b.text({
            id: "radSpeed",
            class: "customText",
            value: "0.1",
            size: "2em",
            maxLength: "3"
          });
          b.newLine(2);
          b.add("Cross World: ");
          b.checkBox({
            id: "funni",
            class: "checkB"
          });
          b.newLine();
          b.button({
            class: "menuB",
            innerHTML: "Toggle Another Visual",
            onclick: "window.toggleVisual()"
          });
          b.newLine();
        });
      });
      let A = document.createElement("div");
      A.id = "menuChatDiv";
      document.body.appendChild(A);
      _.set("menuChatDiv");
      _.setStyle("\n            position: absolute;\n            display: none;\n            left: 0px;\n            top: 0px;\n            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0); //0.65\n            ");
      _.resetHTML();
      _.setCSS("\n            .chDiv {\n    color: #fff;\n    padding: 0px;\n    width: 0px;\n    height: 0px;\n    background-color: rgba(34, 34, 34, 0.7);\n    font-family: \"Courier New\", monospace;\n    border-radius: 15px;\n    backdrop-filter: blur(5px);\n}\n.chMainDiv {\n    font-family: \"Ubuntu\";\n    font-size: 1px;\n    max-height: 2px;\n    overflow-y: scroll;\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    overflow-x: hidden;\n    scrollbar-width: thin;\n    scrollbar-color: rgba(255, 255, 255, 0.5) rgba(255, 255, 255, 0.1);\n    border-radius: 1px;\n}\n.chMainDiv::-webkit-scrollbar {\n    width: 8px;\n}\n/* Handle */\n.chMainDiv::-webkit-scrollbar-thumb {\n    background-color: rgba(255, 255, 255, 0.5);\n    border-radius: 10px;\n}\n/* Handle on hover */\n.chMainDiv::-webkit-scrollbar-thumb:hover {\n    background-color: rgba(255, 255, 255, 0.7);\n}\n.chMainBox {\n     position: absolute;\n    left: 0px;\n    bottom: 0px;\n    width: 0px;\n    height: 2px;\n    background-color: rgba(255, 255, 255, 0.1);\n    border-radius: 1px;\n    color: rgba(255, 255, 255, 0.75);\n    font-family: \"Courier New\", monospace;\n    font-size: 1px;\n    border: none;\n    outline: none;\n}\n            ");
      _.startDiv({
        id: "mChDiv",
        class: "chDiv"
      }, b => {
        _.addDiv({
          id: "mChMain",
          class: "chMainDiv",
          appendID: "mChDiv"
        }, b => {});
        b.text({
          id: "mChBox",
          class: "chMainBox",
          placeHolder: "📝 To chat click here or press \"Enter\" key"
        });
      });
      let C = pa("mChMain");
      let D = pa("mChBox");
      let E = false;
      let Db = 0;
      D.value = "";
      D.addEventListener("focus", () => {
        E = true;
      });
      D.addEventListener("blur", () => {
        E = false;
      });
      function Rd(i, a, b, j) {
        _.set("menuChatDiv");
        b = b || "white";
        let d = new Date();
        let e = d.getMinutes();
        let f = d.getHours();
        let g = "";
        if (!j) {
          g += "[" + ((f < 10 ? "0" : "") + f) + ":" + ((e < 10 ? "0" : "") + e) + "]";
        }
        if (i) {
          g += "" + ((!j ? " - " : "") + i);
        }
        if (a) {
          g += (i ? ": " : !j ? " - " : "") + a + "\n";
        }
        _.addDiv({
          id: "menuChDisp" + Db,
          style: "color: " + b,
          appendID: "mChMain"
        }, b => {
          b.add(g);
        });
        C.scrollTop = C.scrollHeight;
        Db++;
      }
      function H() {
        C.innerHTML = "";
        Db = 0;
        Rd(null, "Chat '/help' for a list of chat commands.", "white", 1);
        Rd(null, "Script loaded, have a great time with Revolver!", "lightGreen", 1);
        Rd(null, "Thanks & Credits to x86 for making menu and chatlog!", "blue", 1);
      }
      H();
      let I = 0;
      let ag = ["menuMain", "menuConfig", "menuOther"];
      window.changeMenu = function () {
        pa(ag[I % ag.length]).style.display = "none";
        I++;
        pa(ag[I % ag.length]).style.display = "block";
      };
      let bg = document.createElement("div");
      bg.id = "status";
      pa("gameUI").appendChild(bg);
      _.set("status");
      _.setStyle("\n            display: block;\n            position: absolute;\n            color: #ddd;\n            font: 15px Hammersmith One;\n            bottom: 215px;\n            left: 20px;\n            ");
      _.resetHTML();
      _.setCSS("\n            .sizing {\n                font-size: 15px;\n            }\n            .mod {\n                font-size: 15px;\n                display: inline-block;\n            }\n            ");
      _.startDiv({
        id: "uehmod",
        class: "sizing"
      }, b => {
        _.addDiv({
          id: "pingFps",
          class: "mod",
          appendID: "uehmod"
        }, b => {});
        b.newLine();
        _.addDiv({
          id: "packetStatus",
          class: "mod",
          appendID: "uehmod"
        }, b => {});
      });
      let N = false;
      let cg = undefined;
      let dg = undefined;
      let eg = false;
      let U = 0;
      let fg = 110;
      let W = 1000;
      let X = {
        sec: false
      };
      let gg = {
        tick: 0,
        tickQueue: [],
        tickBase: function (c, a) {
          if (this.tickQueue[this.tick + a]) {
            this.tickQueue[this.tick + a].push(c);
          } else {
            this.tickQueue[this.tick + a] = [c];
          }
        },
        tickRate: 1000 / x.serverUpdateRate,
        tickSpeed: 0,
        lastTick: performance.now()
      };
      let Z = false;
      let hg = {
        last: 0,
        time: 0,
        ltime: 0
      };
      let ca = undefined;
      let ig = ["cc", 1, "__proto__"];
      WebSocket.prototype.nsend = WebSocket.prototype.send;
      WebSocket.prototype.send = function (e) {
        if (!cg) {
          cg = this;
          cg.addEventListener("message", function (b) {
            ha(b);
          });
          cg.addEventListener("close", b => {
            if (b.code == 4001) {
              window.location.reload();
            }
          });
        }
        if (cg == this) {
          Z = false;
          let f = new Uint8Array(e);
          let a = window.msgpack.decode(f);
          let b = a[0];
          f = a[1];
          if (b == "6") {
            if (f[0]) {
              let b = [];
              let e;
              b.forEach(c => {
                if (f[0].indexOf(c) > -1) {
                  e = "";
                  for (let a = 0; a < c.length; ++a) {
                    if (a == 1) {
                      e += String.fromCharCode(0);
                    }
                    e += c[a];
                  }
                  let a = new RegExp(c, "g");
                  f[0] = f[0].replace(a, e);
                }
              });
              f[0] = f[0].slice(0, 30);
            }
          } else if (b == "L") {
            f[0] = f[0] + String.fromCharCode(0).repeat(7);
            f[0] = f[0].slice(0, 7);
          } else if (b == "M") {
            f[0].name = f[0].name == "" ? "unknown" : f[0].name;
            f[0].moofoll = true;
            f[0].skin = f[0].skin == 10 ? "__proto__" : f[0].skin;
            ig = [f[0].name, f[0].moofoll, f[0].skin];
          } else if (b == "D") {
            if (tg.lastDir == f[0] || [null, undefined].includes(f[0])) {
              Z = true;
            } else {
              tg.lastDir = f[0];
            }
          } else if (b == "d") {
            if (!f[2]) {
              Z = true;
            } else if (![null, undefined].includes(f[1])) {
              tg.lastDir = f[1];
            }
          } else if (b == "K") {
            if (!f[1]) {
              Z = true;
            }
          } else if (b == "S") {
            Nc.wait = !Nc.wait;
            Z = true;
          } else if (b == "a") {
            if (f[1]) {
              if (ng.moveDir == f[0]) {
                Z = true;
              }
              ng.moveDir = f[0];
            } else {
              Z = true;
            }
          }
          if (!Z) {
            let c = window.msgpack.encode([b, f]);
            this.nsend(c);
            if (!X.sec) {
              X.sec = true;
              setTimeout(() => {
                X.sec = false;
                U = 0;
              }, W);
            }
            if (U == 75) {
              Rd("Warn", "Many Sending Packets", "#cc5151", 1);
            }
            U++;
          }
        } else {
          this.nsend(e);
        }
      };
      function jg(d) {
        let a = Array.prototype.slice.call(arguments, 1);
        let b = window.msgpack.encode([d, a]);
        cg.send(b);
      }
      function fa(d) {
        let a = Array.prototype.slice.call(arguments, 1);
        let b = window.msgpack.encode([d, a]);
        cg.nsend(b);
      }
      window.leave = function () {
        fa("kys", {
          "frvr is so bad": true,
          "sidney is too good": true,
          "dev are too weak": true
        });
      };
      let ga = {
        send: jg
      };
      function ha(f) {
        let a = new Uint8Array(f.data);
        let g = window.msgpack.decode(a);
        let c = g[0];
        a = g[1];
        let d = {
          A: Hd,
          C: Wg,
          D: Kd,
          E: Ld,
          a: Yg,
          G: je,
          H: ke,
          I: le,
          J: me,
          K: oe,
          L: pe,
          M: qe,
          N: te,
          O: Qd,
          P: Sd,
          Q: ae,
          R: be,
          S: Td,
          T: Ud,
          U: Vd,
          V: ue,
          X: ve,
          Y: we,
          2: xe,
          3: ye,
          4: ze,
          5: Ae,
          6: Be,
          7: Ce,
          8: De,
          9: Lf,
          0: () => {}
        };
        if (c == "io-init") {
          dg = a[0];
        } else if (d[c]) {
          d[c].apply(undefined, a);
        }
      }
      Math.lerpAngle = function (f, g, h) {
        let c = Math.abs(g - f);
        if (c > Math.PI) {
          if (f > g) {
            g += Math.PI * 2;
          } else {
            f += Math.PI * 2;
          }
        }
        let d = g + (f - g) * h;
        if (d >= 0 && d <= Math.PI * 2) {
          return d;
        }
        return d % (Math.PI * 2);
      };
      CanvasRenderingContext2D.prototype.roundRect = function (f, a, b, c, d) {
        if (b < d * 2) {
          d = b / 2;
        }
        if (c < d * 2) {
          d = c / 2;
        }
        if (d < 0) {
          d = 0;
        }
        this.beginPath();
        this.moveTo(f + d, a);
        this.arcTo(f + b, a, f + b, a + c, d);
        this.arcTo(f + b, a + c, f, a + c, d);
        this.arcTo(f, a + c, f, a, d);
        this.arcTo(f, a, f + b, a, d);
        this.closePath();
        return this;
      };
      let ia = [];
      let kg = [];
      let ka = [];
      let la = [];
      let ma = [];
      let lg = [];
      let mg = [];
      let qa = [];
      let ra = [];
      let sa = [];
      let ng;
      let og;
      let pg;
      let qg = [];
      let rg = [];
      let sg = [];
      let tg = {
        reloaded: false,
        waitHit: 0,
        autoAim: false,
        revAim: false,
        ageInsta: true,
        reSync: false,
        bullTick: 0,
        anti0Tick: 0,
        antiSync: false,
        safePrimary: function (b) {
          return [0, 8].includes(b.primaryIndex);
        },
        safeSecondary: function (b) {
          return [10, 11, 14].includes(b.secondaryIndex);
        },
        lastDir: 0,
        autoPush: false,
        pushData: {}
      };
      function Aa(c, d) {
        return c.find(b => b.id == d);
      }
      function Ba(c, d) {
        return c.find(b => b.sid == d);
      }
      function Ca(b) {
        return Aa(la, b);
      }
      function Da(b) {
        return Ba(la, b);
      }
      function Ea(b) {
        return Ba(ka, b);
      }
      function Fa(b) {
        return Ba(mg, b);
      }
      function Ga(b) {
        return Ba(mg, b);
      }
      let Ha = pa("gameName");
      Ha.innerText = "MooMoo.io";
      let Ia = pa("adCard");
      let Ja = pa("promoImgHolder");
      Ja.remove();
      let Ka = pa("chatButton");
      Ka.remove();
      let La = pa("gameCanvas");
      let Ma = La.getContext("2d");
      let Na = pa("mapDisplay");
      let Oa = Na.getContext("2d");
      Na.width = 300;
      Na.height = 300;
      let Pa = pa("storeMenu");
      let Qa = pa("storeHolder");
      let Ra = pa("upgradeHolder");
      let Sa = pa("upgradeCounter");
      let Ta = pa("chatBox");
      Ta.autocomplete = "off";
      Ta.style.textAlign = "center";
      Ta.style.width = "18em";
      let Ua = pa("chatHolder");
      let Va = pa("actionBar");
      let Wa = pa("leaderboardData");
      let Xa = pa("itemInfoHolder");
      let Ya = pa("menuCardHolder");
      let Za = pa("mainMenu");
      let $a = pa("diedText");
      let _a;
      let ug;
      let vg = x.maxScreenWidth;
      let cb = x.maxScreenHeight;
      let db = 1;
      let eb;
      let wg;
      let xg = performance.now();
      let yg;
      let zg;
      let Ag;
      let Bg = 0;
      let Cg = 0;
      let Dg = pa("allianceMenu");
      let nb = 1;
      let Eg = 0;
      let Fg = "#2c3e50";
      let qb = "#1a1a1a";
      let rb = 5.5;
      let sb = false;
      let tb = true;
      let Gg = {};
      let Hg = {
        87: [0, -1],
        38: [0, -1],
        83: [0, 1],
        40: [0, 1],
        65: [-1, 0],
        37: [-1, 0],
        68: [1, 0],
        39: [1, 0]
      };
      function wb() {
        Gg = {};
        ga.send("e");
      }
      let xb = 0;
      let Ig = false;
      let Jg = {};
      let Kg = {
        place: 0,
        placeSpawnPads: 0
      };
      let Bb;
      let Lg = true;
      window.onblur = function () {
        Lg = false;
      };
      window.onfocus = function () {
        Lg = true;
        if (ng && ng.alive) {
          wb();
        }
      };
      let Mg = [];
      let Fb = [];
      class Gb {
        constructor() {
          let i = Math.abs;
          let a = Math.cos;
          let b = Math.sin;
          let c = Math.pow;
          let j = Math.sqrt;
          let k = Math.atan2;
          let e = Math.PI;
          let f = this;
          this.round = function (c, a) {
            return Math.round(c * a) / a;
          };
          this.toRad = function (b) {
            return b * (e / 180);
          };
          this.toAng = function (b) {
            return b / (e / 180);
          };
          this.randInt = function (c, a) {
            return Math.floor(Math.random() * (a - c + 1)) + c;
          };
          this.randFloat = function (c, a) {
            return Math.random() * (a - c + 1) + c;
          };
          this.lerp = function (d, a, b) {
            return d + (a - d) * b;
          };
          this.decel = function (c, d) {
            if (c > 0) {
              c = Math.max(0, c - d);
            } else if (c < 0) {
              c = Math.min(0, c + d);
            }
            return c;
          };
          this.getDistance = function (e, a, b, f) {
            return j((b -= e) * b + (f -= a) * f);
          };
          this.getDist = function (e, a, b, c) {
            let d = {
              x: b == 0 ? e.x : b == 1 ? e.x1 : b == 2 ? e.x2 : b == 3 && e.x3,
              y: b == 0 ? e.y : b == 1 ? e.y1 : b == 2 ? e.y2 : b == 3 && e.y3
            };
            let f = {
              x: c == 0 ? a.x : c == 1 ? a.x1 : c == 2 ? a.x2 : c == 3 && a.x3,
              y: c == 0 ? a.y : c == 1 ? a.y1 : c == 2 ? a.y2 : c == 3 && a.y3
            };
            return j((f.x -= d.x) * f.x + (f.y -= d.y) * f.y);
          };
          this.getDirection = function (e, a, b, c) {
            return k(a - c, e - b);
          };
          this.getDirect = function (f, a, b, c) {
            let d = {
              x: b == 0 ? f.x : b == 1 ? f.x1 : b == 2 ? f.x2 : b == 3 && f.x3,
              y: b == 0 ? f.y : b == 1 ? f.y1 : b == 2 ? f.y2 : b == 3 && f.y3
            };
            let e = {
              x: c == 0 ? a.x : c == 1 ? a.x1 : c == 2 ? a.x2 : c == 3 && a.x3,
              y: c == 0 ? a.y : c == 1 ? a.y1 : c == 2 ? a.y2 : c == 3 && a.y3
            };
            return k(d.y - e.y, d.x - e.x);
          };
          this.getAngleDist = function (a, b) {
            let c = i(b - a) % (e * 2);
            if (c > e) {
              return e * 2 - c;
            } else {
              return c;
            }
          };
          this.isNumber = function (b) {
            return typeof b == "number" && !isNaN(b) && isFinite(b);
          };
          this.isString = function (b) {
            return b && typeof b == "string";
          };
          this.kFormat = function (b) {
            if (b > 999) {
              return (b / 1000).toFixed(1) + "k";
            } else {
              return b;
            }
          };
          this.sFormat = function (d) {
            let a = [{
              num: 1000,
              string: "k"
            }, {
              num: 1000000,
              string: "m"
            }, {
              num: 1000000000,
              string: "b"
            }, {
              num: 1000000000000,
              string: "q"
            }].reverse();
            let b = a.find(a => d >= a.num);
            if (!b) {
              return d;
            }
            return (d / b.num).toFixed(1) + b.string;
          };
          this.capitalizeFirst = function (b) {
            return b.charAt(0).toUpperCase() + b.slice(1);
          };
          this.fixTo = function (c, a) {
            return parseFloat(c.toFixed(a));
          };
          this.sortByPoints = function (c, a) {
            return parseFloat(a.points) - parseFloat(c.points);
          };
          this.lineInRect = function (n, a, b, c, d, e, f, g) {
            let h = d;
            let o = f;
            if (d > f) {
              h = f;
              o = d;
            }
            if (o > b) {
              o = b;
            }
            if (h < n) {
              h = n;
            }
            if (h > o) {
              return false;
            }
            let p = e;
            let q = g;
            let r = f - d;
            if (Math.abs(r) > 1e-7) {
              let c = (g - e) / r;
              let a = e - c * d;
              p = c * h + a;
              q = c * o + a;
            }
            if (p > q) {
              let b = q;
              q = p;
              p = b;
            }
            if (q > c) {
              q = c;
            }
            if (p < a) {
              p = a;
            }
            if (p > q) {
              return false;
            }
            return true;
          };
          this.containsPoint = function (k, a, b) {
            let c = k.getBoundingClientRect();
            let d = c.left + window.scrollX;
            let e = c.top + window.scrollY;
            let f = c.width;
            let g = c.height;
            let h = a > d && a < d + f;
            let i = b > e && b < e + g;
            return h && i;
          };
          this.mousifyTouchEvent = function (c) {
            let a = c.changedTouches[0];
            c.screenX = a.screenX;
            c.screenY = a.screenY;
            c.clientX = a.clientX;
            c.clientY = a.clientY;
            c.pageX = a.pageX;
            c.pageY = a.pageY;
          };
          this.hookTouchEvents = function (h, a) {
            let j = !a;
            let c = false;
            let b = false;
            h.addEventListener("touchstart", this.checkTrusted(e), b);
            h.addEventListener("touchmove", this.checkTrusted(k), b);
            h.addEventListener("touchend", this.checkTrusted(g), b);
            h.addEventListener("touchcancel", this.checkTrusted(g), b);
            h.addEventListener("touchleave", this.checkTrusted(g), b);
            function e(a) {
              f.mousifyTouchEvent(a);
              window.setUsingTouch(true);
              if (j) {
                a.preventDefault();
                a.stopPropagation();
              }
              if (h.onmouseover) {
                h.onmouseover(a);
              }
              c = true;
            }
            function k(a) {
              f.mousifyTouchEvent(a);
              window.setUsingTouch(true);
              if (j) {
                a.preventDefault();
                a.stopPropagation();
              }
              if (f.containsPoint(h, a.pageX, a.pageY)) {
                if (!c) {
                  if (h.onmouseover) {
                    h.onmouseover(a);
                  }
                  c = true;
                }
              } else if (c) {
                if (h.onmouseout) {
                  h.onmouseout(a);
                }
                c = false;
              }
            }
            function g(a) {
              f.mousifyTouchEvent(a);
              window.setUsingTouch(true);
              if (j) {
                a.preventDefault();
                a.stopPropagation();
              }
              if (c) {
                if (h.onclick) {
                  h.onclick(a);
                }
                if (h.onmouseout) {
                  h.onmouseout(a);
                }
                c = false;
              }
            }
          };
          this.removeAllChildren = function (b) {
            while (b.hasChildNodes()) {
              b.removeChild(b.lastChild);
            }
          };
          this.generateElement = function (e) {
            let a = document.createElement(e.tag || "div");
            function b(b, c) {
              if (e[b]) {
                a[c] = e[b];
              }
            }
            b("text", "textContent");
            b("html", "innerHTML");
            b("class", "className");
            for (let b in e) {
              switch (b) {
                case "tag":
                case "text":
                case "html":
                case "class":
                case "style":
                case "hookTouch":
                case "parent":
                case "children":
                  continue;
                default:
                  break;
              }
              a[b] = e[b];
            }
            if (a.onclick) {
              a.onclick = this.checkTrusted(a.onclick);
            }
            if (a.onmouseover) {
              a.onmouseover = this.checkTrusted(a.onmouseover);
            }
            if (a.onmouseout) {
              a.onmouseout = this.checkTrusted(a.onmouseout);
            }
            if (e.style) {
              a.style.cssText = e.style;
            }
            if (e.hookTouch) {
              this.hookTouchEvents(a);
            }
            if (e.parent) {
              e.parent.appendChild(a);
            }
            if (e.children) {
              for (let b = 0; b < e.children.length; b++) {
                a.appendChild(e.children[b]);
              }
            }
            return a;
          };
          this.checkTrusted = function (c) {
            return function (a) {
              if (a && a instanceof Event && (a && typeof a.isTrusted == "boolean" ? a.isTrusted : true)) {
                c(a);
              } else {}
            };
          };
          this.randomString = function (e) {
            let a = "";
            let d = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (let b = 0; b < e; b++) {
              a += d.charAt(Math.floor(Math.random() * d.length));
            }
            return a;
          };
          this.countInArray = function (e, a) {
            let b = 0;
            for (let c = 0; c < e.length; c++) {
              if (e[c] === a) {
                b++;
              }
            }
            return b;
          };
          this.hexToRgb = function (b) {
            return b.slice(1).match(/.{1,2}/g).map(b => parseInt(b, 16));
          };
          this.getRgb = function (d, a, b) {
            return [d / 255, a / 255, b / 255].join(", ");
          };
        }
      }
      ;
      class Hb {
        constructor() {
          this.init = function (h, a, b, c, d, e, f) {
            this.x = h;
            this.y = a;
            this.color = f;
            this.scale = b;
            this.startScale = this.scale;
            this.maxScale = b * 1.5;
            this.scaleSpeed = 0.7;
            this.speed = c * 0.6;
            this.life = d;
            this.text = e;
            this.acc = 1;
            this.alpha = 0;
            this.maxLife = d;
            this.ranX = Dc.randFloat(-1, 1);
          };
          this.update = function (a) {
            if (this.life) {
              this.life -= a;
              if (x.anotherVisual) {
                this.y -= this.speed * a * this.acc * 0.7;
                this.acc -= a / (this.maxLife / 2.5);
                if (this.life <= 200) {
                  if (this.alpha > 0) {
                    this.alpha = Math.max(0, this.alpha - a / 300);
                  }
                } else if (this.alpha < 1) {
                  this.alpha = Math.min(1, this.alpha + a / 100);
                }
                this.x += this.ranX;
              } else {
                this.y -= this.speed * a * 0.7;
              }
              this.scale += this.scaleSpeed * a;
              if (this.scale >= this.maxScale) {
                this.scale = this.maxScale;
                this.scaleSpeed *= -1;
              } else if (this.scale <= this.startScale) {
                this.scale = this.startScale;
                this.scaleSpeed = 0;
              }
              if (this.life <= 0) {
                this.life = 0;
              }
            }
          };
          this.render = function (a, b, c) {
            a.lineWidth = 10;
            a.fillStyle = this.color;
            a.font = this.scale + "px " + (x.anotherVisual ? "Hammersmith One" : "Ubuntu");
            if (x.anotherVisual) {
              a.globalAlpha = this.alpha;
              a.strokeStyle = qb;
              a.strokeText(this.text, this.x - b, this.y - c);
            }
            a.fillText(this.text, this.x - b, this.y - c);
            a.globalAlpha = 1;
          };
        }
      }
      ;
      class Ib {
        constructor() {
          this.texts = [];
          this.stack = [];
          this.update = function (f, a, b, c) {
            a.textBaseline = "middle";
            a.textAlign = "center";
            for (let d = 0; d < this.texts.length; ++d) {
              if (this.texts[d].life) {
                this.texts[d].update(f);
                this.texts[d].render(a, b, c);
              }
            }
          };
          this.showText = function (i, a, b, c, d, e, f) {
            let g;
            for (let h = 0; h < this.texts.length; ++h) {
              if (!this.texts[h].life) {
                g = this.texts[h];
                break;
              }
            }
            if (!g) {
              g = new Hb();
              this.texts.push(g);
            }
            g.init(i, a, b, c, d, e, f);
          };
        }
      }
      class Jb {
        constructor(a) {
          this.sid = a;
          this.init = function (a, b, c, d, e, f, i) {
            f = f || {};
            this.sentTo = {};
            this.gridLocations = [];
            this.active = true;
            this.alive = true;
            this.doUpdate = f.doUpdate;
            this.x = a;
            this.y = b;
            if (x.anotherVisual) {
              this.dir = c + Math.PI;
            } else {
              this.dir = c;
            }
            this.lastDir = c;
            this.xWiggle = 0;
            this.yWiggle = 0;
            this.visScale = d;
            this.scale = d;
            this.type = e;
            this.id = f.id;
            this.owner = i;
            this.name = f.name;
            this.isItem = this.id != undefined;
            this.group = f.group;
            this.maxHealth = f.health;
            this.health = this.maxHealth;
            this.healthMov = 100;
            this.layer = 2;
            if (this.group != undefined) {
              this.layer = this.group.layer;
            } else if (this.type == 0) {
              this.layer = 3;
            } else if (this.type == 2) {
              this.layer = 0;
            } else if (this.type == 4) {
              this.layer = -1;
            }
            this.colDiv = f.colDiv || 1;
            this.blocker = f.blocker;
            this.ignoreCollision = f.ignoreCollision;
            this.dontGather = f.dontGather;
            this.hideFromEnemy = f.hideFromEnemy;
            this.friction = f.friction;
            this.projDmg = f.projDmg;
            this.dmg = f.dmg;
            this.pDmg = f.pDmg;
            this.pps = f.pps;
            this.zIndex = f.zIndex || 0;
            this.turnSpeed = f.turnSpeed;
            this.req = f.req;
            this.trap = f.trap;
            this.healCol = f.healCol;
            this.teleport = f.teleport;
            this.boostSpeed = f.boostSpeed;
            this.projectile = f.projectile;
            this.shootRange = f.shootRange;
            this.shootRate = f.shootRate;
            this.shootCount = this.shootRate;
            this.spawnPoint = f.spawnPoint;
            this.onNear = 0;
            this.breakObj = false;
            this.alpha = f.alpha || 1;
            this.maxAlpha = f.alpha || 1;
            this.damaged = 0;
          };
          this.changeHealth = function (c, a) {
            this.health += c;
            return this.health <= 0;
          };
          this.getScale = function (c, d) {
            c = c || 1;
            return this.scale * (this.isItem || this.type == 2 || this.type == 3 || this.type == 4 ? 1 : c * 0.6) * (d ? 1 : this.colDiv);
          };
          this.visibleToPlayer = function (b) {
            return !this.hideFromEnemy || this.owner && (this.owner == b || this.owner.team && b.team == this.owner.team);
          };
          this.update = function (a) {
            if (this.health != this.healthMov) {
              if (this.health < this.healthMov) {
                this.healthMov -= 1.9;
              } else {
                this.healthMov += 1.9;
              }
              if (Math.abs(this.health - this.healthMov) < 1.9) {
                this.healthMov = this.health;
              }
            }
            ;
            if (this.active) {
              if (this.xWiggle) {
                this.xWiggle *= Math.pow(0.99, a);
              }
              if (this.yWiggle) {
                this.yWiggle *= Math.pow(0.99, a);
              }
              if (x.anotherVisual) {
                let b = Dc.getAngleDist(this.lastDir, this.dir);
                if (b > 0.01) {
                  this.dir += b / 5;
                } else {
                  this.dir = this.lastDir;
                }
              } else if (this.turnSpeed && this.dmg) {
                this.dir += this.turnSpeed * a;
              }
            } else if (this.alive) {
              this.alpha -= a / (200 / this.maxAlpha);
              this.visScale += a / (this.scale / 2.5);
              if (this.alpha <= 0) {
                this.alpha = 0;
                this.alive = false;
              }
            }
          };
          this.isTeamObject = function (b) {
            if (this.owner == null) {
              return true;
            } else {
              return this.owner && b.sid == this.owner.sid || b.findAllianceBySid(this.owner.sid);
            }
          };
        }
      }
      class Kb {
        constructor() {
          this.groups = [{
            id: 0,
            name: "food",
            layer: 0
          }, {
            id: 1,
            name: "walls",
            place: true,
            limit: 30,
            layer: 0
          }, {
            id: 2,
            name: "spikes",
            place: true,
            limit: 15,
            layer: 0
          }, {
            id: 3,
            name: "mill",
            place: true,
            spin: true,
            limit: 7,
            layer: 1
          }, {
            id: 4,
            name: "mine",
            place: true,
            limit: 1,
            layer: 0
          }, {
            id: 5,
            name: "trap",
            place: true,
            limit: 6,
            layer: -1
          }, {
            id: 6,
            name: "booster",
            place: true,
            limit: 12,
            layer: -1
          }, {
            id: 7,
            name: "turret",
            place: true,
            limit: 2,
            layer: 1
          }, {
            id: 8,
            name: "watchtower",
            place: true,
            limit: 12,
            layer: 1
          }, {
            id: 9,
            name: "buff",
            place: true,
            limit: 4,
            layer: -1
          }, {
            id: 10,
            name: "spawn",
            place: true,
            limit: 1,
            layer: -1
          }, {
            id: 11,
            name: "sapling",
            place: true,
            limit: 2,
            layer: 0
          }, {
            id: 12,
            name: "blocker",
            place: true,
            limit: 3,
            layer: -1
          }, {
            id: 13,
            name: "teleporter",
            place: true,
            limit: 2,
            layer: -1
          }];
          this.projectiles = [{
            indx: 0,
            layer: 0,
            src: "arrow_1",
            dmg: 25,
            speed: 1.6,
            scale: 103,
            range: 1000
          }, {
            indx: 1,
            layer: 1,
            dmg: 25,
            scale: 20
          }, {
            indx: 0,
            layer: 0,
            src: "arrow_1",
            dmg: 35,
            speed: 2.5,
            scale: 103,
            range: 1200
          }, {
            indx: 0,
            layer: 0,
            src: "arrow_1",
            dmg: 30,
            speed: 2,
            scale: 103,
            range: 1200
          }, {
            indx: 1,
            layer: 1,
            dmg: 16,
            scale: 20
          }, {
            indx: 0,
            layer: 0,
            src: "bullet_1",
            dmg: 50,
            speed: 3.6,
            scale: 160,
            range: 1400
          }];
          this.weapons = [{
            id: 0,
            type: 0,
            name: "tool hammer",
            desc: "tool for gathering all resources",
            src: "hammer_1",
            length: 140,
            width: 140,
            xOff: -3,
            yOff: 18,
            dmg: 25,
            range: 65,
            gather: 1,
            speed: 300
          }, {
            id: 1,
            type: 0,
            age: 2,
            name: "hand axe",
            desc: "gathers resources at a higher rate",
            src: "axe_1",
            length: 140,
            width: 140,
            xOff: 3,
            yOff: 24,
            dmg: 30,
            spdMult: 1,
            range: 70,
            gather: 2,
            speed: 400
          }, {
            id: 2,
            type: 0,
            age: 8,
            pre: 1,
            name: "great axe",
            desc: "deal more damage and gather more resources",
            src: "great_axe_1",
            length: 140,
            width: 140,
            xOff: -8,
            yOff: 25,
            dmg: 35,
            spdMult: 1,
            range: 75,
            gather: 4,
            speed: 400
          }, {
            id: 3,
            type: 0,
            age: 2,
            name: "short sword",
            desc: "increased attack power but slower move speed",
            src: "sword_1",
            iPad: 1.3,
            length: 130,
            width: 210,
            xOff: -8,
            yOff: 46,
            dmg: 35,
            spdMult: 0.85,
            range: 110,
            gather: 1,
            speed: 300
          }, {
            id: 4,
            type: 0,
            age: 8,
            pre: 3,
            name: "katana",
            desc: "greater range and damage",
            src: "samurai_1",
            iPad: 1.3,
            length: 130,
            width: 210,
            xOff: -8,
            yOff: 59,
            dmg: 40,
            spdMult: 0.8,
            range: 118,
            gather: 1,
            speed: 300
          }, {
            id: 5,
            type: 0,
            age: 2,
            name: "polearm",
            desc: "long range melee weapon",
            src: "spear_1",
            iPad: 1.3,
            length: 130,
            width: 210,
            xOff: -8,
            yOff: 53,
            dmg: 45,
            knock: 0.2,
            spdMult: 0.82,
            range: 142,
            gather: 1,
            speed: 700
          }, {
            id: 6,
            type: 0,
            age: 2,
            name: "bat",
            desc: "fast long range melee weapon",
            src: "bat_1",
            iPad: 1.3,
            length: 110,
            width: 180,
            xOff: -8,
            yOff: 53,
            dmg: 20,
            knock: 0.7,
            range: 110,
            gather: 1,
            speed: 300
          }, {
            id: 7,
            type: 0,
            age: 2,
            name: "daggers",
            desc: "really fast short range weapon",
            src: "dagger_1",
            iPad: 0.8,
            length: 110,
            width: 110,
            xOff: 18,
            yOff: 0,
            dmg: 20,
            knock: 0.1,
            range: 65,
            gather: 1,
            hitSlow: 0.1,
            spdMult: 1.13,
            speed: 100
          }, {
            id: 8,
            type: 0,
            age: 2,
            name: "stick",
            desc: "great for gathering but very weak",
            src: "stick_1",
            length: 140,
            width: 140,
            xOff: 3,
            yOff: 24,
            dmg: 1,
            spdMult: 1,
            range: 70,
            gather: 7,
            speed: 400
          }, {
            id: 9,
            type: 1,
            age: 6,
            name: "hunting bow",
            desc: "bow used for ranged combat and hunting",
            src: "bow_1",
            req: ["wood", 4],
            length: 120,
            width: 120,
            xOff: -6,
            yOff: 0,
            Pdmg: 25,
            projectile: 0,
            spdMult: 0.75,
            speed: 600
          }, {
            id: 10,
            type: 1,
            age: 6,
            name: "great hammer",
            desc: "hammer used for destroying structures",
            src: "great_hammer_1",
            length: 140,
            width: 140,
            xOff: -9,
            yOff: 25,
            dmg: 10,
            Pdmg: 10,
            spdMult: 0.88,
            range: 75,
            sDmg: 7.5,
            gather: 1,
            speed: 400
          }, {
            id: 11,
            type: 1,
            age: 6,
            name: "wooden shield",
            desc: "blocks projectiles and reduces melee damage",
            src: "shield_1",
            length: 120,
            width: 120,
            shield: 0.2,
            xOff: 6,
            yOff: 0,
            Pdmg: 0,
            spdMult: 0.7
          }, {
            id: 12,
            type: 1,
            age: 8,
            pre: 9,
            name: "crossbow",
            desc: "deals more damage and has greater range",
            src: "crossbow_1",
            req: ["wood", 5],
            aboveHand: true,
            armS: 0.75,
            length: 120,
            width: 120,
            xOff: -4,
            yOff: 0,
            Pdmg: 35,
            projectile: 2,
            spdMult: 0.7,
            speed: 700
          }, {
            id: 13,
            type: 1,
            age: 9,
            pre: 12,
            name: "repeater crossbow",
            desc: "high firerate crossbow with reduced damage",
            src: "crossbow_2",
            req: ["wood", 10],
            aboveHand: true,
            armS: 0.75,
            length: 120,
            width: 120,
            xOff: -4,
            yOff: 0,
            Pdmg: 30,
            projectile: 3,
            spdMult: 0.7,
            speed: 230
          }, {
            id: 14,
            type: 1,
            age: 6,
            name: "mc grabby",
            desc: "steals resources from enemies",
            src: "grab_1",
            length: 130,
            width: 210,
            xOff: -8,
            yOff: 53,
            dmg: 0,
            Pdmg: 0,
            steal: 250,
            knock: 0.2,
            spdMult: 1.05,
            range: 125,
            gather: 0,
            speed: 700
          }, {
            id: 15,
            type: 1,
            age: 9,
            pre: 12,
            name: "musket",
            desc: "slow firerate but high damage and range",
            src: "musket_1",
            req: ["stone", 10],
            aboveHand: true,
            rec: 0.35,
            armS: 0.6,
            hndS: 0.3,
            hndD: 1.6,
            length: 205,
            width: 205,
            xOff: 25,
            yOff: 0,
            Pdmg: 50,
            projectile: 5,
            hideProjectile: true,
            spdMult: 0.6,
            speed: 1500
          }];
          this.list = [{
            group: this.groups[0],
            name: "apple",
            desc: "restores 20 health when consumed",
            req: ["food", 10],
            consume: function (b) {
              return b.changeHealth(20, b);
            },
            scale: 22,
            holdOffset: 15,
            healing: 20,
            itemID: 0,
            itemAID: 16
          }, {
            age: 3,
            group: this.groups[0],
            name: "cookie",
            desc: "restores 40 health when consumed",
            req: ["food", 15],
            consume: function (b) {
              return b.changeHealth(40, b);
            },
            scale: 27,
            holdOffset: 15,
            healing: 40,
            itemID: 1,
            itemAID: 17
          }, {
            age: 7,
            group: this.groups[0],
            name: "cheese",
            desc: "restores 30 health and another 50 over 5 seconds",
            req: ["food", 25],
            consume: function (b) {
              if (b.changeHealth(30, b) || b.health < 100) {
                b.dmgOverTime.dmg = -10;
                b.dmgOverTime.doer = b;
                b.dmgOverTime.time = 5;
                return true;
              }
              return false;
            },
            scale: 27,
            holdOffset: 15,
            healing: 30,
            itemID: 2,
            itemAID: 18
          }, {
            group: this.groups[1],
            name: "wood wall",
            desc: "provides protection for your village",
            req: ["wood", 10],
            projDmg: true,
            health: 380,
            scale: 50,
            holdOffset: 20,
            placeOffset: -5,
            itemID: 3,
            itemAID: 19
          }, {
            age: 3,
            group: this.groups[1],
            name: "stone wall",
            desc: "provides improved protection for your village",
            req: ["stone", 25],
            health: 900,
            scale: 50,
            holdOffset: 20,
            placeOffset: -5,
            itemID: 4,
            itemAID: 20
          }, {
            age: 7,
            group: this.groups[1],
            name: "castle wall",
            desc: "provides powerful protection for your village",
            req: ["stone", 35],
            health: 1500,
            scale: 52,
            holdOffset: 20,
            placeOffset: -5,
            itemID: 5,
            itemAID: 21
          }, {
            group: this.groups[2],
            name: "spikes",
            desc: "damages enemies when they touch them",
            req: ["wood", 20, "stone", 5],
            health: 400,
            dmg: 20,
            scale: 49,
            spritePadding: -23,
            holdOffset: 8,
            placeOffset: -5,
            itemID: 6,
            itemAID: 22
          }, {
            age: 5,
            group: this.groups[2],
            name: "greater spikes",
            desc: "damages enemies when they touch them",
            req: ["wood", 30, "stone", 10],
            health: 500,
            dmg: 35,
            scale: 52,
            spritePadding: -23,
            holdOffset: 8,
            placeOffset: -5,
            itemID: 7,
            itemAID: 23
          }, {
            age: 9,
            group: this.groups[2],
            name: "poison spikes",
            desc: "poisons enemies when they touch them",
            req: ["wood", 35, "stone", 15],
            health: 600,
            dmg: 30,
            pDmg: 5,
            scale: 52,
            spritePadding: -23,
            holdOffset: 8,
            placeOffset: -5,
            itemID: 8,
            itemAID: 24
          }, {
            age: 9,
            group: this.groups[2],
            name: "spinning spikes",
            desc: "damages enemies when they touch them",
            req: ["wood", 30, "stone", 20],
            health: 500,
            dmg: 45,
            turnSpeed: 0.003,
            scale: 52,
            spritePadding: -23,
            holdOffset: 8,
            placeOffset: -5,
            itemID: 9,
            itemAID: 25
          }, {
            group: this.groups[3],
            name: "windmill",
            desc: "generates gold over time",
            req: ["wood", 50, "stone", 10],
            health: 400,
            pps: 1,
            turnSpeed: 0.0016,
            spritePadding: 25,
            iconLineMult: 12,
            scale: 45,
            spin: true,
            holdOffset: 20,
            placeOffset: 5,
            itemID: 10,
            itemAID: 26
          }, {
            age: 5,
            group: this.groups[3],
            name: "faster windmill",
            desc: "generates more gold over time",
            req: ["wood", 60, "stone", 20],
            health: 500,
            pps: 1.5,
            spin: true,
            turnSpeed: 0.0025,
            spritePadding: 25,
            iconLineMult: 12,
            scale: 47,
            holdOffset: 20,
            placeOffset: 5,
            itemID: 11,
            itemAID: 27
          }, {
            age: 8,
            group: this.groups[3],
            name: "power mill",
            desc: "generates more gold over time",
            req: ["wood", 100, "stone", 50],
            health: 800,
            pps: 2,
            turnSpeed: 0.005,
            spritePadding: 25,
            iconLineMult: 12,
            scale: 47,
            holdOffset: 20,
            placeOffset: 5,
            itemID: 12,
            itemAID: 28
          }, {
            age: 5,
            group: this.groups[4],
            type: 2,
            name: "mine",
            desc: "allows you to mine stone",
            req: ["wood", 20, "stone", 100],
            iconLineMult: 12,
            scale: 65,
            holdOffset: 20,
            placeOffset: 0,
            itemID: 13,
            itemAID: 29
          }, {
            age: 5,
            group: this.groups[11],
            type: 0,
            name: "sapling",
            desc: "allows you to farm wood",
            req: ["wood", 150],
            iconLineMult: 12,
            colDiv: 0.5,
            scale: 110,
            holdOffset: 50,
            placeOffset: -15,
            itemID: 14,
            itemAID: 30
          }, {
            age: 4,
            group: this.groups[5],
            name: "pit trap",
            desc: "pit that traps enemies if they walk over it",
            req: ["wood", 30, "stone", 30],
            trap: true,
            ignoreCollision: true,
            hideFromEnemy: true,
            health: 500,
            colDiv: 0.2,
            scale: 50,
            holdOffset: 20,
            placeOffset: -5,
            alpha: 0.6,
            itemID: 15,
            itemAID: 31
          }, {
            age: 4,
            group: this.groups[6],
            name: "boost pad",
            desc: "provides boost when stepped on",
            req: ["stone", 20, "wood", 5],
            ignoreCollision: true,
            boostSpeed: 1.5,
            health: 150,
            colDiv: 0.7,
            scale: 45,
            holdOffset: 20,
            placeOffset: -5,
            itemID: 16,
            itemAID: 32
          }, {
            age: 7,
            group: this.groups[7],
            doUpdate: true,
            name: "turret",
            desc: "defensive structure that shoots at enemies",
            req: ["wood", 200, "stone", 150],
            health: 800,
            projectile: 1,
            shootRange: 700,
            shootRate: 2200,
            scale: 43,
            holdOffset: 20,
            placeOffset: -5,
            itemID: 17,
            itemAID: 33
          }, {
            age: 7,
            group: this.groups[8],
            name: "platform",
            desc: "platform to shoot over walls and cross over water",
            req: ["wood", 20],
            ignoreCollision: true,
            zIndex: 1,
            health: 300,
            scale: 43,
            holdOffset: 20,
            placeOffset: -5,
            itemID: 18,
            itemAID: 34
          }, {
            age: 7,
            group: this.groups[9],
            name: "healing pad",
            desc: "standing on it will slowly heal you",
            req: ["wood", 30, "food", 10],
            ignoreCollision: true,
            healCol: 15,
            health: 400,
            colDiv: 0.7,
            scale: 45,
            holdOffset: 20,
            placeOffset: -5,
            itemID: 19,
            itemAID: 35
          }, {
            age: 9,
            group: this.groups[10],
            name: "spawn pad",
            desc: "you will spawn here when you die but it will dissapear",
            req: ["wood", 100, "stone", 100],
            health: 400,
            ignoreCollision: true,
            spawnPoint: true,
            scale: 45,
            holdOffset: 20,
            placeOffset: -5,
            itemID: 20,
            itemAID: 36
          }, {
            age: 7,
            group: this.groups[12],
            name: "blocker",
            desc: "blocks building in radius",
            req: ["wood", 30, "stone", 25],
            ignoreCollision: true,
            blocker: 300,
            health: 400,
            colDiv: 0.7,
            scale: 45,
            holdOffset: 20,
            placeOffset: -5,
            itemID: 21,
            itemAID: 37
          }, {
            age: 7,
            group: this.groups[13],
            name: "teleporter",
            desc: "teleports you to a random point on the map",
            req: ["wood", 60, "stone", 60],
            ignoreCollision: true,
            teleport: true,
            health: 200,
            colDiv: 0.7,
            scale: 45,
            holdOffset: 20,
            placeOffset: -5,
            itemID: 22,
            itemAID: 38
          }];
          this.checkItem = {
            index: function (c, a) {
              if ([0, 1, 2].includes(c)) {
                return 0;
              } else if ([3, 4, 5].includes(c)) {
                return 1;
              } else if ([6, 7, 8, 9].includes(c)) {
                return 2;
              } else if ([10, 11, 12].includes(c)) {
                return 3;
              } else if ([13, 14].includes(c)) {
                return 5;
              } else if ([15, 16].includes(c)) {
                return 4;
              } else if ([17, 18, 19, 21, 22].includes(c)) {
                if ([13, 14].includes(a)) {
                  return 6;
                } else {
                  return 5;
                }
              } else if (c == 20) {
                if ([13, 14].includes(a)) {
                  return 7;
                } else {
                  return 6;
                }
              } else {
                return undefined;
              }
            }
          };
          for (let b = 0; b < this.list.length; ++b) {
            this.list[b].id = b;
            if (this.list[b].pre) {
              this.list[b].pre = b - this.list[b].pre;
            }
          }
          if (typeof window !== "undefined") {
            function b(d) {
              for (let a = d.length - 1; a > 0; a--) {
                const b = Math.floor(Math.random() * (a + 1));
                [d[a], d[b]] = [d[b], d[a]];
              }
              return d;
            }
          }
        }
      }
      class Lb {
        constructor(n, o, p, b, a, c) {
          let d = Math.floor;
          let e = Math.abs;
          let f = Math.cos;
          let g = Math.sin;
          let h = Math.pow;
          let i = Math.sqrt;
          this.ignoreAdd = false;
          this.hitObj = [];
          this.disableObj = function (c) {
            c.active = false;
            if (b.anotherVisual) {} else {
              c.alive = false;
            }
          };
          let l;
          this.add = function (a, b, c, d, e, f, g, h, i) {
            l = Fa(a);
            if (!l) {
              l = o.find(b => !b.active);
              if (!l) {
                l = new n(a);
                o.push(l);
              }
            }
            if (h) {
              l.sid = a;
            }
            l.init(b, c, d, e, f, g, i);
          };
          this.disableBySid = function (c) {
            let a = Fa(c);
            if (a) {
              this.disableObj(a);
            }
          };
          this.removeAllItems = function (d, a) {
            o.filter(a => a.active && a.owner && a.owner.sid == d).forEach(b => this.disableObj(b));
          };
          this.checkItemLocation = function (c, a, d, e, f, g, h) {
            let i = o.find(f => f.active && p.getDistance(c, a, f.x, f.y) < d + (f.blocker ? f.blocker : f.getScale(e, f.isItem)));
            if (i) {
              return false;
            }
            if (!g && f != 18 && a >= b.mapScale / 2 - b.riverWidth / 2 && a <= b.mapScale / 2 + b.riverWidth / 2) {
              return false;
            }
            return true;
          };
        }
      }
      class Mb {
        constructor(h, a, b, c, d, e, f) {
          this.init = function (j, a, b, c, d, e, f, g, h) {
            this.active = true;
            this.tickActive = true;
            this.indx = j;
            this.x = a;
            this.y = b;
            this.x2 = a;
            this.y2 = b;
            this.dir = c;
            this.skipMov = true;
            this.speed = d;
            this.dmg = e;
            this.scale = g;
            this.range = f;
            this.r2 = f;
            this.owner = h;
          };
          this.update = function (c) {
            if (this.active) {
              let a = this.speed * c;
              if (!this.skipMov) {
                this.x += a * Math.cos(this.dir);
                this.y += a * Math.sin(this.dir);
                this.range -= a;
                if (this.range <= 0) {
                  this.x += this.range * Math.cos(this.dir);
                  this.y += this.range * Math.sin(this.dir);
                  a = 1;
                  this.range = 0;
                  this.active = false;
                }
              } else {
                this.skipMov = false;
              }
            }
          };
          this.tickUpdate = function (c) {
            if (this.tickActive) {
              let a = this.speed * c;
              if (!this.skipMov) {
                this.x2 += a * Math.cos(this.dir);
                this.y2 += a * Math.sin(this.dir);
                this.r2 -= a;
                if (this.r2 <= 0) {
                  this.x2 += this.r2 * Math.cos(this.dir);
                  this.y2 += this.r2 * Math.sin(this.dir);
                  a = 1;
                  this.r2 = 0;
                  this.tickActive = false;
                }
              } else {
                this.skipMov = false;
              }
            }
          };
        }
      }
      ;
      class Nb {
        constructor() {
          this.hats = [{
            id: 45,
            name: "Shame!",
            dontSell: true,
            price: 0,
            scale: 120,
            desc: "hacks are for winners"
          }, {
            id: 51,
            name: "Moo Cap",
            price: 0,
            scale: 120,
            desc: "coolest mooer around"
          }, {
            id: 50,
            name: "Apple Cap",
            price: 0,
            scale: 120,
            desc: "apple farms remembers"
          }, {
            id: 28,
            name: "Moo Head",
            price: 0,
            scale: 120,
            desc: "no effect"
          }, {
            id: 29,
            name: "Pig Head",
            price: 0,
            scale: 120,
            desc: "no effect"
          }, {
            id: 30,
            name: "Fluff Head",
            price: 0,
            scale: 120,
            desc: "no effect"
          }, {
            id: 36,
            name: "Pandou Head",
            price: 0,
            scale: 120,
            desc: "no effect"
          }, {
            id: 37,
            name: "Bear Head",
            price: 0,
            scale: 120,
            desc: "no effect"
          }, {
            id: 38,
            name: "Monkey Head",
            price: 0,
            scale: 120,
            desc: "no effect"
          }, {
            id: 44,
            name: "Polar Head",
            price: 0,
            scale: 120,
            desc: "no effect"
          }, {
            id: 35,
            name: "Fez Hat",
            price: 0,
            scale: 120,
            desc: "no effect"
          }, {
            id: 42,
            name: "Enigma Hat",
            price: 0,
            scale: 120,
            desc: "join the enigma army"
          }, {
            id: 43,
            name: "Blitz Hat",
            price: 0,
            scale: 120,
            desc: "hey everybody i'm blitz"
          }, {
            id: 49,
            name: "Bob XIII Hat",
            price: 0,
            scale: 120,
            desc: "like and subscribe"
          }, {
            id: 57,
            name: "Pumpkin",
            price: 50,
            scale: 120,
            desc: "Spooooky"
          }, {
            id: 8,
            name: "Bummle Hat",
            price: 100,
            scale: 120,
            desc: "no effect"
          }, {
            id: 2,
            name: "Straw Hat",
            price: 500,
            scale: 120,
            desc: "no effect"
          }, {
            id: 15,
            name: "Winter Cap",
            price: 600,
            scale: 120,
            desc: "allows you to move at normal speed in snow",
            coldM: 1
          }, {
            id: 5,
            name: "Cowboy Hat",
            price: 1000,
            scale: 120,
            desc: "no effect"
          }, {
            id: 4,
            name: "Ranger Hat",
            price: 2000,
            scale: 120,
            desc: "no effect"
          }, {
            id: 18,
            name: "Explorer Hat",
            price: 2000,
            scale: 120,
            desc: "no effect"
          }, {
            id: 31,
            name: "Flipper Hat",
            price: 2500,
            scale: 120,
            desc: "have more control while in water",
            watrImm: true
          }, {
            id: 1,
            name: "Marksman Cap",
            price: 3000,
            scale: 120,
            desc: "increases arrow speed and range",
            aMlt: 1.3
          }, {
            id: 10,
            name: "Bush Gear",
            price: 3000,
            scale: 160,
            desc: "allows you to disguise yourself as a bush"
          }, {
            id: 48,
            name: "Halo",
            price: 3000,
            scale: 120,
            desc: "no effect"
          }, {
            id: 6,
            name: "Soldier Helmet",
            price: 4000,
            scale: 120,
            desc: "reduces damage taken but slows movement",
            spdMult: 0.94,
            dmgMult: 0.75
          }, {
            id: 23,
            name: "Anti Venom Gear",
            price: 4000,
            scale: 120,
            desc: "makes you immune to poison",
            poisonRes: 1
          }, {
            id: 13,
            name: "Medic Gear",
            price: 5000,
            scale: 110,
            desc: "slowly regenerates health over time",
            healthRegen: 3
          }, {
            id: 9,
            name: "Miners Helmet",
            price: 5000,
            scale: 120,
            desc: "earn 1 extra gold per resource",
            extraGold: 1
          }, {
            id: 32,
            name: "Musketeer Hat",
            price: 5000,
            scale: 120,
            desc: "reduces cost of projectiles",
            projCost: 0.5
          }, {
            id: 7,
            name: "Bull Helmet",
            price: 6000,
            scale: 120,
            desc: "increases damage done but drains health",
            healthRegen: -5,
            dmgMultO: 1.5,
            spdMult: 0.96
          }, {
            id: 22,
            name: "Emp Helmet",
            price: 6000,
            scale: 120,
            desc: "turrets won't attack but you move slower",
            antiTurret: 1,
            spdMult: 0.7
          }, {
            id: 12,
            name: "Booster Hat",
            price: 6000,
            scale: 120,
            desc: "increases your movement speed",
            spdMult: 1.16
          }, {
            id: 26,
            name: "Barbarian Armor",
            price: 8000,
            scale: 120,
            desc: "knocks back enemies that attack you",
            dmgK: 0.6
          }, {
            id: 21,
            name: "Plague Mask",
            price: 10000,
            scale: 120,
            desc: "melee attacks deal poison damage",
            poisonDmg: 5,
            poisonTime: 6
          }, {
            id: 46,
            name: "Bull Mask",
            price: 10000,
            scale: 120,
            desc: "bulls won't target you unless you attack them",
            bullRepel: 1
          }, {
            id: 14,
            name: "Windmill Hat",
            topSprite: true,
            price: 10000,
            scale: 120,
            desc: "generates points while worn",
            pps: 1.5
          }, {
            id: 11,
            name: "Spike Gear",
            topSprite: true,
            price: 10000,
            scale: 120,
            desc: "deal damage to players that damage you",
            dmg: 0.45
          }, {
            id: 53,
            name: "Turret Gear",
            topSprite: true,
            price: 10000,
            scale: 120,
            desc: "you become a walking turret",
            turret: {
              proj: 1,
              range: 700,
              rate: 2500
            },
            spdMult: 0.7
          }, {
            id: 20,
            name: "Samurai Armor",
            price: 12000,
            scale: 120,
            desc: "increased attack speed and fire rate",
            atkSpd: 0.78
          }, {
            id: 58,
            name: "Dark Knight",
            price: 12000,
            scale: 120,
            desc: "restores health when you deal damage",
            healD: 0.4
          }, {
            id: 27,
            name: "Scavenger Gear",
            price: 15000,
            scale: 120,
            desc: "earn double points for each kill",
            kScrM: 2
          }, {
            id: 40,
            name: "Tank Gear",
            price: 15000,
            scale: 120,
            desc: "increased damage to buildings but slower movement",
            spdMult: 0.3,
            bDmg: 3.3
          }, {
            id: 52,
            name: "Thief Gear",
            price: 15000,
            scale: 120,
            desc: "steal half of a players gold when you kill them",
            goldSteal: 0.5
          }, {
            id: 55,
            name: "Bloodthirster",
            price: 20000,
            scale: 120,
            desc: "Restore Health when dealing damage. And increased damage",
            healD: 0.25,
            dmgMultO: 1.2
          }, {
            id: 56,
            name: "Assassin Gear",
            price: 20000,
            scale: 120,
            desc: "Go invisible when not moving. Can't eat. Increased speed",
            noEat: true,
            spdMult: 1.1,
            invisTimer: 1000
          }];
          this.accessories = [{
            id: 12,
            name: "Snowball",
            price: 1000,
            scale: 105,
            xOff: 18,
            desc: "no effect"
          }, {
            id: 9,
            name: "Tree Cape",
            price: 1000,
            scale: 90,
            desc: "no effect"
          }, {
            id: 10,
            name: "Stone Cape",
            price: 1000,
            scale: 90,
            desc: "no effect"
          }, {
            id: 3,
            name: "Cookie Cape",
            price: 1500,
            scale: 90,
            desc: "no effect"
          }, {
            id: 8,
            name: "Cow Cape",
            price: 2000,
            scale: 90,
            desc: "no effect"
          }, {
            id: 11,
            name: "Monkey Tail",
            price: 2000,
            scale: 97,
            xOff: 25,
            desc: "Super speed but reduced damage",
            spdMult: 1.35,
            dmgMultO: 0.2
          }, {
            id: 17,
            name: "Apple Basket",
            price: 3000,
            scale: 80,
            xOff: 12,
            desc: "slowly regenerates health over time",
            healthRegen: 1
          }, {
            id: 6,
            name: "Winter Cape",
            price: 3000,
            scale: 90,
            desc: "no effect"
          }, {
            id: 4,
            name: "Skull Cape",
            price: 4000,
            scale: 90,
            desc: "no effect"
          }, {
            id: 5,
            name: "Dash Cape",
            price: 5000,
            scale: 90,
            desc: "no effect"
          }, {
            id: 2,
            name: "Dragon Cape",
            price: 6000,
            scale: 90,
            desc: "no effect"
          }, {
            id: 1,
            name: "Super Cape",
            price: 8000,
            scale: 90,
            desc: "no effect"
          }, {
            id: 7,
            name: "Troll Cape",
            price: 8000,
            scale: 90,
            desc: "no effect"
          }, {
            id: 14,
            name: "Thorns",
            price: 10000,
            scale: 115,
            xOff: 20,
            desc: "no effect"
          }, {
            id: 15,
            name: "Blockades",
            price: 10000,
            scale: 95,
            xOff: 15,
            desc: "no effect"
          }, {
            id: 20,
            name: "Devils Tail",
            price: 10000,
            scale: 95,
            xOff: 20,
            desc: "no effect"
          }, {
            id: 16,
            name: "Sawblade",
            price: 12000,
            scale: 90,
            spin: true,
            xOff: 0,
            desc: "deal damage to players that damage you",
            dmg: 0.15
          }, {
            id: 13,
            name: "Angel Wings",
            price: 15000,
            scale: 138,
            xOff: 22,
            desc: "slowly regenerates health over time",
            healthRegen: 3
          }, {
            id: 19,
            name: "Shadow Wings",
            price: 15000,
            scale: 138,
            xOff: 22,
            desc: "increased movement speed",
            spdMult: 1.1
          }, {
            id: 18,
            name: "Blood Wings",
            price: 20000,
            scale: 178,
            xOff: 26,
            desc: "restores health when you deal damage",
            healD: 0.2
          }, {
            id: 21,
            name: "Corrupt X Wings",
            price: 20000,
            scale: 178,
            xOff: 26,
            desc: "deal damage to players that damage you",
            dmg: 0.25
          }];
        }
      }
      ;
      class Ob {
        constructor(j, k, a, b, c, d, e, f, g) {
          this.addProjectile = function (h, i, v, l, m, n, o, p, q, r) {
            let s = d.projectiles[n];
            let t;
            for (let b = 0; b < k.length; ++b) {
              if (!k[b].active) {
                t = k[b];
                break;
              }
            }
            if (!t) {
              t = new j(a, b, c, d, e, f, g);
              t.sid = k.length;
              k.push(t);
            }
            t.init(n, h, i, v, m, s.dmg, l, s.scale, o);
            t.ignoreObj = p;
            t.layer = q || s.layer;
            t.inWindow = r;
            t.src = s.src;
            return t;
          };
        }
      }
      ;
      class Pb {
        constructor(o, a, b, c, d, e, f, g, h) {
          this.aiTypes = [{
            id: 0,
            src: "cow_1",
            killScore: 150,
            health: 500,
            weightM: 0.8,
            speed: 0.00095,
            turnSpeed: 0.001,
            scale: 72,
            drop: ["food", 50]
          }, {
            id: 1,
            src: "pig_1",
            killScore: 200,
            health: 800,
            weightM: 0.6,
            speed: 0.00085,
            turnSpeed: 0.001,
            scale: 72,
            drop: ["food", 80]
          }, {
            id: 2,
            name: "Bull",
            src: "bull_2",
            hostile: true,
            dmg: 20,
            killScore: 1000,
            health: 1800,
            weightM: 0.5,
            speed: 0.00094,
            turnSpeed: 0.00074,
            scale: 78,
            viewRange: 800,
            chargePlayer: true,
            drop: ["food", 100]
          }, {
            id: 3,
            name: "Bully",
            src: "bull_1",
            hostile: true,
            dmg: 20,
            killScore: 2000,
            health: 2800,
            weightM: 0.45,
            speed: 0.001,
            turnSpeed: 0.0008,
            scale: 90,
            viewRange: 900,
            chargePlayer: true,
            drop: ["food", 400]
          }, {
            id: 4,
            name: "Wolf",
            src: "wolf_1",
            hostile: true,
            dmg: 8,
            killScore: 500,
            health: 300,
            weightM: 0.45,
            speed: 0.001,
            turnSpeed: 0.002,
            scale: 84,
            viewRange: 800,
            chargePlayer: true,
            drop: ["food", 200]
          }, {
            id: 5,
            name: "Quack",
            src: "chicken_1",
            dmg: 8,
            killScore: 2000,
            noTrap: true,
            health: 300,
            weightM: 0.2,
            speed: 0.0018,
            turnSpeed: 0.006,
            scale: 70,
            drop: ["food", 100]
          }, {
            id: 6,
            name: "MOOSTAFA",
            nameScale: 50,
            src: "enemy",
            hostile: true,
            dontRun: true,
            fixedSpawn: true,
            spawnDelay: 60000,
            noTrap: true,
            colDmg: 100,
            dmg: 40,
            killScore: 8000,
            health: 18000,
            weightM: 0.4,
            speed: 0.0007,
            turnSpeed: 0.01,
            scale: 80,
            spriteMlt: 1.8,
            leapForce: 0.9,
            viewRange: 1000,
            hitRange: 210,
            hitDelay: 1000,
            chargePlayer: true,
            drop: ["food", 100]
          }, {
            id: 7,
            name: "Treasure",
            hostile: true,
            nameScale: 35,
            src: "crate_1",
            fixedSpawn: true,
            spawnDelay: 120000,
            colDmg: 200,
            killScore: 5000,
            health: 20000,
            weightM: 0.1,
            speed: 0,
            turnSpeed: 0,
            scale: 70,
            spriteMlt: 1
          }, {
            id: 8,
            name: "MOOFIE",
            src: "wolf_2",
            hostile: true,
            fixedSpawn: true,
            dontRun: true,
            hitScare: 4,
            spawnDelay: 30000,
            noTrap: true,
            nameScale: 35,
            dmg: 10,
            colDmg: 100,
            killScore: 3000,
            health: 7000,
            weightM: 0.45,
            speed: 0.0015,
            turnSpeed: 0.002,
            scale: 90,
            viewRange: 800,
            chargePlayer: true,
            drop: ["food", 1000]
          }];
          this.spawn = function (i, j, k, l) {
            let m = o.find(b => !b.active);
            if (!m) {
              m = new a(o.length, d, b, c, f, e, g, h);
              o.push(m);
            }
            m.init(i, j, k, l, this.aiTypes[l]);
            return m;
          };
        }
      }
      ;
      class Qb {
        constructor(k, a, b, c, d, e, f, g) {
          this.sid = k;
          this.isAI = true;
          this.nameIndex = d.randInt(0, e.cowNames.length - 1);
          this.init = function (f, a, b, c, d) {
            this.x = f;
            this.y = a;
            this.startX = d.fixedSpawn ? f : null;
            this.startY = d.fixedSpawn ? a : null;
            this.xVel = 0;
            this.yVel = 0;
            this.zIndex = 0;
            this.dir = b;
            this.dirPlus = 0;
            this.index = c;
            this.src = d.src;
            if (d.name) {
              this.name = d.name;
            }
            this.weightM = d.weightM;
            this.speed = d.speed;
            this.killScore = d.killScore;
            this.turnSpeed = d.turnSpeed;
            this.scale = d.scale;
            this.maxHealth = d.health;
            this.leapForce = d.leapForce;
            this.health = this.maxHealth;
            this.chargePlayer = d.chargePlayer;
            this.viewRange = d.viewRange;
            this.drop = d.drop;
            this.dmg = d.dmg;
            this.hostile = d.hostile;
            this.dontRun = d.dontRun;
            this.hitRange = d.hitRange;
            this.hitDelay = d.hitDelay;
            this.hitScare = d.hitScare;
            this.spriteMlt = d.spriteMlt;
            this.nameScale = d.nameScale;
            this.colDmg = d.colDmg;
            this.noTrap = d.noTrap;
            this.spawnDelay = d.spawnDelay;
            this.hitWait = 0;
            this.waitCount = 1000;
            this.moveCount = 0;
            this.targetDir = 0;
            this.active = true;
            this.alive = true;
            this.runFrom = null;
            this.chargeTarget = null;
            this.dmgOverTime = {};
          };
          let h = 0;
          let l = 0;
          this.animate = function (b) {
            if (this.animTime > 0) {
              this.animTime -= b;
              if (this.animTime <= 0) {
                this.animTime = 0;
                this.dirPlus = 0;
                h = 0;
                l = 0;
              } else if (l == 0) {
                h += b / (this.animSpeed * e.hitReturnRatio);
                this.dirPlus = d.lerp(0, this.targetAngle, Math.min(1, h));
                if (h >= 1) {
                  h = 1;
                  l = 1;
                }
              } else {
                h -= b / (this.animSpeed * (1 - e.hitReturnRatio));
                this.dirPlus = d.lerp(0, this.targetAngle, Math.max(0, h));
              }
            }
          };
          this.startAnim = function () {
            this.animTime = this.animSpeed = 600;
            this.targetAngle = Math.PI * 0.8;
            h = 0;
            l = 0;
          };
        }
      }
      ;
      class Rb {
        constructor(c, a) {
          this.x = c;
          this.y = a;
          this.damage = 10;
          this.health = 10;
          this.maxHealth = this.health;
          this.active = false;
          this.alive = false;
          this.timer = 1500;
          this.time = 0;
          this.damaged = 0;
          this.alpha = 1;
          this.scale = 9;
          this.visScale = this.scale;
        }
      }
      ;
      class Sb {
        constructor(e, a, b, c) {
          this.x = e;
          this.y = a;
          this.alpha = 0;
          this.active = true;
          this.alive = false;
          this.chat = b;
          this.owner = c;
        }
      }
      ;
      class Tb {
        constructor(j, a, b, c, d, e, f, g, h) {
          this.x = j;
          this.y = a;
          this.lastDir = b;
          this.dir = b + Math.PI;
          this.buildIndex = c;
          this.weaponIndex = d;
          this.weaponVariant = e;
          this.skinColor = f;
          this.scale = g;
          this.visScale = 0;
          this.name = h;
          this.alpha = 1;
          this.active = true;
          this.animate = function (c) {
            let a = Dc.getAngleDist(this.lastDir, this.dir);
            if (a > 0.01) {
              this.dir += a / 20;
            } else {
              this.dir = this.lastDir;
            }
            if (this.visScale < this.scale) {
              this.visScale += c / (this.scale / 2);
              if (this.visScale >= this.scale) {
                this.visScale = this.scale;
              }
            }
            this.alpha -= c / 30000;
            if (this.alpha <= 0) {
              this.alpha = 0;
              this.active = false;
            }
          };
        }
      }
      ;
      class Ub {
        constructor(k, a, r, b, c, d, e, f, h, g, i, j, l, m) {
          this.id = k;
          this.sid = a;
          this.tmpScore = 0;
          this.team = null;
          this.latestSkin = 0;
          this.oldSkinIndex = 0;
          this.skinIndex = 0;
          this.latestTail = 0;
          this.oldTailIndex = 0;
          this.tailIndex = 0;
          this.hitTime = 0;
          this.lastHit = 0;
          this.tails = {};
          for (let n = 0; n < i.length; ++n) {
            if (i[n].price <= 0) {
              this.tails[i[n].id] = 1;
            }
          }
          this.skins = {};
          for (let n = 0; n < g.length; ++n) {
            if (g[n].price <= 0) {
              this.skins[g[n].id] = 1;
            }
          }
          this.points = 0;
          this.dt = 0;
          this.hidden = false;
          this.itemCounts = {};
          this.isPlayer = true;
          this.pps = 0;
          this.moveDir = undefined;
          this.skinRot = 0;
          this.lastPing = 0;
          this.iconIndex = 0;
          this.skinColor = 0;
          this.dist2 = 0;
          this.aim2 = 0;
          this.maxSpeed = 1;
          this.chat = {
            message: null,
            count: 0
          };
          this.backupNobull = true;
          this.circle = false;
          this.circleRad = 200;
          this.circleRadSpd = 0.1;
          this.cAngle = 0;
          this.spawn = function (b) {
            this.attacked = false;
            this.death = false;
            this.spinDir = 0;
            this.sync = false;
            this.antiBull = 0;
            this.bullTimer = 0;
            this.poisonTimer = 0;
            this.active = true;
            this.alive = true;
            this.lockMove = false;
            this.lockDir = false;
            this.minimapCounter = 0;
            this.chatCountdown = 0;
            this.shameCount = 0;
            this.shameTimer = 0;
            this.sentTo = {};
            this.gathering = 0;
            this.gatherIndex = 0;
            this.shooting = {};
            this.shootIndex = 9;
            this.autoGather = 0;
            this.animTime = 0;
            this.animSpeed = 0;
            this.mouseState = 0;
            this.buildIndex = -1;
            this.weaponIndex = 0;
            this.weaponCode = 0;
            this.weaponVariant = 0;
            this.primaryIndex = undefined;
            this.secondaryIndex = undefined;
            this.dmgOverTime = {};
            this.noMovTimer = 0;
            this.maxXP = 300;
            this.XP = 0;
            this.age = 1;
            this.kills = 0;
            this.upgrAge = 2;
            this.upgradePoints = 0;
            this.x = 0;
            this.y = 0;
            this.oldXY = {
              x: 0,
              y: 0
            };
            this.zIndex = 0;
            this.xVel = 0;
            this.yVel = 0;
            this.slowMult = 1;
            this.dir = 0;
            this.dirPlus = 0;
            this.targetDir = 0;
            this.targetAngle = 0;
            this.maxHealth = 100;
            this.health = this.maxHealth;
            this.oldHealth = this.maxHealth;
            this.damaged = 0;
            this.scale = r.playerScale;
            this.speed = r.playerSpeed;
            this.resetMoveDir();
            this.resetResources(b);
            this.items = [0, 3, 6, 10];
            this.weapons = [0];
            this.shootCount = 0;
            this.weaponXP = [];
            this.reloads = {
              0: 0,
              1: 0,
              2: 0,
              3: 0,
              4: 0,
              5: 0,
              6: 0,
              7: 0,
              8: 0,
              9: 0,
              10: 0,
              11: 0,
              12: 0,
              13: 0,
              14: 0,
              15: 0,
              53: 0
            };
            this.bowThreat = {
              9: 0,
              12: 0,
              13: 0,
              15: 0
            };
            this.damageThreat = 0;
            this.inTrap = false;
            this.canEmpAnti = false;
            this.empAnti = false;
            this.soldierAnti = false;
            this.poisonTick = 0;
            this.bullTick = 0;
            this.setPoisonTick = false;
            this.setBullTick = false;
            this.antiTimer = 2;
          };
          this.resetMoveDir = function () {
            this.moveDir = undefined;
          };
          this.resetResources = function (c) {
            for (let a = 0; a < r.resourceTypes.length; ++a) {
              this[r.resourceTypes[a]] = c ? 100 : 0;
            }
          };
          this.getItemType = function (c) {
            let a = this.items.findIndex(a => a == c);
            if (a != -1) {
              return a;
            } else {
              return h.checkItem.index(c, this.items);
            }
          };
          this.setData = function (b) {
            this.id = b[0];
            this.sid = b[1];
            this.name = b[2];
            this.x = b[3];
            this.y = b[4];
            this.dir = b[5];
            this.health = b[6];
            this.maxHealth = b[7];
            this.scale = b[8];
            this.skinColor = b[9];
          };
          this.updateTimer = function () {
            this.bullTimer -= 1;
            if (this.bullTimer <= 0) {
              this.setBullTick = false;
              this.bullTick = gg.tick - 1;
              this.bullTimer = r.serverUpdateRate;
            }
            this.poisonTimer -= 1;
            if (this.poisonTimer <= 0) {
              this.setPoisonTick = false;
              this.poisonTick = gg.tick - 1;
              this.poisonTimer = r.serverUpdateRate;
            }
          };
          this.update = function (b) {
            if (this.alive) {
              if (this.health != this.healthMov) {
                if (this.health < this.healthMov) {
                  this.healthMov -= 2;
                } else {
                  this.healthMov += 2;
                }
                if (Math.abs(this.health - this.healthMov) < 2) {
                  this.healthMov = this.health;
                }
              }
              ;
              if (this.shameCount != this.shameMov) {
                if (this.shameCount < this.shameMov) {
                  this.shameMov -= 0.1;
                } else {
                  this.shameMov += 0.1;
                }
                if (Math.abs(this.shameCount - this.shameMov) < 0.1) {
                  this.shameMov = this.shameCount;
                }
              }
            }
            if (this.sid == og) {
              this.circleRad = parseInt(pa("circleRad").value) || 0;
              this.circleRadSpd = parseFloat(pa("radSpeed").value) || 0;
              this.cAngle += this.circleRadSpd;
            }
            if (this.active) {
              let c = {
                skin: Aa(g, this.skinIndex),
                tail: Aa(i, this.tailIndex)
              };
              let a = (this.buildIndex >= 0 ? 0.5 : 1) * (h.weapons[this.weaponIndex].spdMult || 1) * (c.skin ? c.skin.spdMult || 1 : 1) * (c.tail ? c.tail.spdMult || 1 : 1) * (this.y <= r.snowBiomeTop ? c.skin && c.skin.coldM ? 1 : r.snowSpeed : 1) * this.slowMult;
              this.maxSpeed = a;
            }
          };
          let n = 0;
          let o = 0;
          this.animate = function (c) {
            if (this.animTime > 0) {
              this.animTime -= c;
              if (this.animTime <= 0) {
                this.animTime = 0;
                this.dirPlus = 0;
                n = 0;
                o = 0;
              } else if (o == 0) {
                n += c / (this.animSpeed * r.hitReturnRatio);
                this.dirPlus = b.lerp(0, this.targetAngle, Math.min(1, n));
                if (n >= 1) {
                  n = 1;
                  o = 1;
                }
              } else {
                n -= c / (this.animSpeed * (1 - r.hitReturnRatio));
                this.dirPlus = b.lerp(0, this.targetAngle, Math.max(0, n));
              }
            }
          };
          this.startAnim = function (c, a) {
            this.animTime = this.animSpeed = h.weapons[a].speed;
            this.targetAngle = c ? -r.hitAngle : -Math.PI;
            n = 0;
            o = 0;
          };
          this.canSee = function (c) {
            if (!c) {
              return false;
            }
            let a = Math.abs(c.x - this.x) - c.scale;
            let b = Math.abs(c.y - this.y) - c.scale;
            return a <= r.maxScreenWidth / 2 * 1.3 && b <= r.maxScreenHeight / 2 * 1.3;
          };
          this.judgeShame = function () {
            if (this.oldHealth < this.health) {
              if (this.hitTime) {
                let b = Date.now() - this.hitTime;
                this.lastHit = gg.tick;
                this.hitTime = 0;
                if (b < 120) {
                  this.shameCount++;
                } else {
                  this.shameCount = Math.max(0, this.shameCount - 2);
                }
              }
            } else if (this.oldHealth > this.health) {
              this.hitTime = Date.now();
            }
          };
          this.addShameTimer = function () {
            this.shameCount = 0;
            this.shameTimer = 30;
            let b = setInterval(() => {
              this.shameTimer--;
              if (this.shameTimer <= 0) {
                clearInterval(b);
              }
            }, 1000);
          };
          this.isTeam = function (b) {
            return this == b || this.team && this.team == b.team;
          };
          this.findAllianceBySid = function (c) {
            if (this.team) {
              return lg.find(a => a === c);
            } else {
              return null;
            }
          };
          this.checkCanInsta = function (c) {
            let a = 0;
            if (this.alive && Ig) {
              let b = {
                weapon: this.weapons[0],
                variant: this.primaryVariant,
                dmg: this.weapons[0] == undefined ? 0 : h.weapons[this.weapons[0]].dmg
              };
              let d = {
                weapon: this.weapons[1],
                variant: this.secondaryVariant,
                dmg: this.weapons[1] == undefined ? 0 : h.weapons[this.weapons[1]].Pdmg
              };
              let e = this.skins[7] && !c ? 1.5 : 1;
              let f = b.variant != undefined ? r.weaponVariants[b.variant].val : 1;
              if (b.weapon != undefined && this.reloads[b.weapon] == 0) {
                a += b.dmg * f * e;
              }
              if (d.weapon != undefined && this.reloads[d.weapon] == 0) {
                a += d.dmg;
              }
              if (this.skins[53] && this.reloads[53] <= (ng.weapons[1] == 10 ? 0 : gg.tickRate) && sg.skinIndex != 22) {
                a += 25;
              }
              a *= sg.skinIndex == 6 ? 0.75 : 1;
              return a;
            }
            return 0;
          };
          this.manageReload = function () {
            if (this.shooting[53]) {
              this.shooting[53] = 0;
              this.reloads[53] = 2500 - gg.tickRate;
            } else if (this.reloads[53] > 0) {
              this.reloads[53] = Math.max(0, this.reloads[53] - gg.tickRate);
            }
            if (this.gathering || this.shooting[1]) {
              if (this.gathering) {
                this.gathering = 0;
                this.reloads[this.gatherIndex] = h.weapons[this.gatherIndex].speed * (this.skinIndex == 20 ? 0.78 : 1);
                this.attacked = true;
              }
              if (this.shooting[1]) {
                this.shooting[1] = 0;
                this.reloads[this.shootIndex] = h.weapons[this.shootIndex].speed * (this.skinIndex == 20 ? 0.78 : 1);
                this.attacked = true;
              }
            } else {
              this.attacked = false;
              if (this.buildIndex < 0) {
                if (this.reloads[this.weaponIndex] > 0) {
                  this.reloads[this.weaponIndex] = Math.max(0, this.reloads[this.weaponIndex] - gg.tickRate);
                  if (this == ng) {
                    if (pa("weaponGrind").checked) {
                      for (let b = 0; b < Math.PI * 2; b += Math.PI / 2) {
                        dc(ng.getItemType(22), b);
                      }
                    }
                  }
                  if (this.reloads[this.primaryIndex] == 0 && this.reloads[this.weaponIndex] == 0) {
                    this.antiBull++;
                    gg.tickBase(() => {
                      this.antiBull = 0;
                    }, 1);
                  }
                }
              }
            }
          };
          this.addDamageThreat = function (c) {
            let a = {
              weapon: this.primaryIndex,
              variant: this.primaryVariant
            };
            a.dmg = a.weapon == undefined ? 45 : h.weapons[a.weapon].dmg;
            let b = {
              weapon: this.secondaryIndex,
              variant: this.secondaryVariant
            };
            b.dmg = b.weapon == undefined ? 50 : h.weapons[b.weapon].Pdmg;
            let d = 1.5;
            let e = a.variant != undefined ? r.weaponVariants[a.variant].val : 1.18;
            let f = b.variant != undefined ? [9, 12, 13, 15].includes(b.weapon) ? 1 : r.weaponVariants[b.variant].val : 1.18;
            if (a.weapon == undefined ? true : this.reloads[a.weapon] == 0) {
              this.damageThreat += a.dmg * e * d;
            }
            if (b.weapon == undefined ? true : this.reloads[b.weapon] == 0) {
              this.damageThreat += b.dmg * f;
            }
            if (this.reloads[53] <= gg.tickRate) {
              this.damageThreat += 25;
            }
            this.damageThreat *= c.skinIndex == 6 ? 0.75 : 1;
            if (!this.isTeam(c) && this.dist2 <= 300) {
              c.damageThreat += this.damageThreat;
            }
          };
        }
      }
      ;
      function Vb(b) {
        ng.reloads[b] = 0;
        jg("H", b);
      }
      function Wb(c, a) {
        jg("c", 0, c, a);
      }
      function Xb(c, a) {
        jg("c", 1, c, a);
      }
      function Yb(d, a) {
        let e = ng.skins[6] ? 6 : 0;
        if (ng.alive && Ig) {
          if (a == 0) {
            if (ng.skins[d]) {
              if (ng.latestSkin != d) {
                jg("c", 0, d, 0);
              }
            } else if (r.autoBuyEquip) {
              let a = Aa(Hc, d);
              if (a) {
                if (ng.points >= a.price) {
                  jg("c", 1, d, 0);
                  jg("c", 0, d, 0);
                } else if (ng.latestSkin != e) {
                  jg("c", 0, e, 0);
                }
              } else if (ng.latestSkin != e) {
                jg("c", 0, e, 0);
              }
            } else if (ng.latestSkin != e) {
              jg("c", 0, e, 0);
            }
          } else if (a == 1) {
            if (eg && d != 11 && d != 0) {
              if (ng.latestTail != 0) {
                jg("c", 0, 0, 1);
              }
              return;
            }
            if (ng.tails[d]) {
              if (ng.latestTail != d) {
                jg("c", 0, d, 1);
              }
            } else if (r.autoBuyEquip) {
              let a = Aa(Ic, d);
              if (a) {
                if (ng.points >= a.price) {
                  jg("c", 1, d, 1);
                  jg("c", 0, d, 1);
                } else if (ng.latestTail != 0) {
                  jg("c", 0, 0, 1);
                }
              } else if (ng.latestTail != 0) {
                jg("c", 0, 0, 1);
              }
            } else if (ng.latestTail != 0) {
              jg("c", 0, 0, 1);
            }
          }
        }
      }
      function Zb(c, a) {
        jg("G", c, a);
      }
      function $b(c, a) {
        if (!a) {
          ng.weaponCode = c;
        }
        jg("G", c, 1);
      }
      function _b() {
        jg("K", 1, 1);
      }
      function ac(c, a) {
        jg("d", c, a, 1);
      }
      function bc(c) {
        let a = c % 360 * (Math.PI / 180);
        if (a < 0) {
          return Math.PI * 2 + a;
        } else {
          return a;
        }
      }
      function cc(a, b, c) {
        try {
          if (a == undefined) {
            return;
          }
          let d = Ec.list[ng.items[a]];
          let e = ng.scale + d.scale + (d.placeOffset || 0);
          let f = ng.x2 + e * Math.cos(b);
          let g = ng.y2 + e * Math.sin(b);
          if (a === 0 || L || (ng.alive && Ig && ng.itemCounts[d.group.id] == undefined ? true : ng.itemCounts[d.group.id] < (x.isSandbox ? a === 3 || a === 5 ? 299 : 99 : d.group.limit ? d.group.limit : 99))) {
            n &&= false;
            Zb(ng.items[a]);
            ac(1, b);
            $b(ng.weaponCode, 1);
            if (c && pa("placeVis").checked) {
              Mg.push({
                x: f,
                y: g,
                name: d.name,
                scale: d.scale,
                dir: b
              });
              gg.tickBase(() => {
                Mg.shift();
              }, 1);
            }
          }
        } catch (b) {}
      }
      function dc(g, a) {
        try {
          if (U.count >= 60) {
            return;
          }
          let b = Ec.list[ng.items[g]];
          let c = ng.scale + b.scale + (b.placeOffset || 0);
          let d = ng.x2 + c * Math.cos(a);
          let e = ng.y2 + c * Math.sin(a);
          if (Fc.checkItemLocation(d, e, b.scale, 0.6, b.id, false, ng)) {
            cc(g, a, 1);
          }
        } catch (b) {}
      }
      function ec() {
        if (ng.latestSkin == 6) {
          return 0.75;
        } else {
          return 1;
        }
      }
      function fc(c) {
        let a = qg.filter(c => {
          let a = {
            three: c.attacked
          };
          return a.three;
        });
        return a;
      }
      function gc() {
        for (let b = 0; b < ic(); b++) {
          cc(0, md());
        }
      }
      function hc(b) {
        if (ng.health == 100) {
          return 0;
        }
        if (ng.skinIndex != 45 && ng.skinIndex != 56) {
          return Math.ceil(b / Ec.list[ng.items[0]].healing);
        }
        return 0;
      }
      function ic() {
        if (ng.health == 100) {
          return 0;
        }
        if (ng.skinIndex != 45 && ng.skinIndex != 56) {
          return Math.ceil((100 - ng.health) / Ec.list[ng.items[0]].healing);
        }
        return 0;
      }
      function jc(b) {
        if (b * ng.skinIndex == 6) {
          return 0.75;
        } else {
          return 1;
        }
      }
      function kc() {}
      function lc(c) {
        tg.antiSync = true;
        let a = setInterval(() => {
          if (ng.shameCount < 5) {
            cc(0, md());
          }
        }, 75);
        setTimeout(() => {
          clearInterval(a);
          setTimeout(() => {
            tg.antiSync = false;
          }, gg.tickRate);
        }, gg.tickRate);
      }
      const mc = new Set();
      const nc = new Set();
      function oc(e) {
        const a = ng.x2;
        const b = ng.y2;
        const c = Math.hypot(e[0] - a, e[1] - b);
        return c > 35;
      }
      function pc(c) {
        if (ng.team) {
          return lg.find(a => a === c);
        } else {
          return null;
        }
      }
      function qc(k, a, b) {
        const c = [];
        const d = 16;
        for (let e = 0; e < d; e++) {
          const f = Math.PI * 2 * e / d;
          const g = k + b * Math.cos(f);
          const h = a + b * Math.sin(f);
          const i = [g, h];
          if (!c.some(b => rc(i, b))) {
            c.push(i);
          }
        }
        return c;
      }
      function rc(e, a, b = 50) {
        const c = Math.hypot(e[0] - a[0], e[1] - a[1]);
        return c < b;
      }
      function sc(a, b) {
        if (ng.y2 >= x.mapScale / 2 - x.riverWidth / 2 && ng.y2 <= x.mapScale / 2 + x.riverWidth / 2) {
          if (b) {
            return 31;
          }
          Yb(31, 0);
        } else if (ng.y2 <= x.snowBiomeTop) {
          if (b) {
            if (a && ng.moveDir == undefined) {
              return 22;
            } else {
              return 15;
            }
          }
          Yb(a && ng.moveDir == undefined ? 22 : 15, 0);
        } else {
          if (b) {
            if (a && ng.moveDir == undefined) {
              return 22;
            } else {
              return 12;
            }
          }
          Yb(a && ng.moveDir == undefined ? 22 : 12, 0);
        }
        if (b) {
          return 0;
        }
      }
      function tc(b) {
        Yb(b && ng.moveDir == undefined ? 0 : 0, 1);
      }
      let uc = [];
      class Ng {
        constructor(p, a) {
          this.dist = 0;
          this.aim = 0;
          this.inTrap = false;
          this.replaced = false;
          this.antiTrapped = false;
          this.info = {};
          this.notFast = function () {
            return ng.weapons[1] == 10 && (this.info.health > a.weapons[ng.weapons[0]].dmg || ng.weapons[0] == 5);
          };
          this.testCanPlace = function (b, d = undefined, o = undefined, q = undefined, s, h, i) {
            if (d === undefined) d = -(Math.PI / 2);
            if (o === undefined) o = Math.PI / 2;
            if (q === undefined) q = Math.PI / 18;
            try {
              let j = a.list[ng.items[b]];
              let k = ng.scale + j.scale + (j.placeOffset || 0);
              let l = {
                attempts: 0,
                placed: 0
              };
              let m = [];
              mg.forEach(b => {
                m.push({
                  x: b.x,
                  y: b.y,
                  active: b.active,
                  blocker: b.blocker,
                  scale: b.scale,
                  isItem: b.isItem,
                  type: b.type,
                  colDiv: b.colDiv,
                  getScale: function (c, d) {
                    c = c || 1;
                    return this.scale * (this.isItem || this.type == 2 || this.type == 3 || this.type == 4 ? 1 : c * 0.6) * (d ? 1 : this.colDiv);
                  }
                });
              });
              for (let a = d; a < o; a += q) {
                l.attempts++;
                let c = s + a;
                let d = ng.x2 + k * Math.cos(c);
                let e = ng.y2 + k * Math.sin(c);
                let f = m.find(b => b.active && p.getDistance(d, e, b.x, b.y) < j.scale + (b.blocker ? b.blocker : b.getScale(0.6, b.isItem)));
                if (f) {
                  continue;
                }
                if (j.id != 18 && e >= x.mapScale / 2 - x.riverWidth / 2 && e <= x.mapScale / 2 + x.riverWidth / 2) {
                  continue;
                }
                if (!h && i || eg) {
                  if (eg ? false : i.inTrap) {
                    if (p.getAngleDist(sg.aim2 + Math.PI, c + Math.PI) <= Math.PI) {
                      cc(2, c, 1);
                    } else if (ng.items[4] == 15) {
                      cc(4, c, 1);
                    }
                  } else if (p.getAngleDist(sg.aim2, c) <= x.gatherAngle / 1.5) {
                    cc(2, c, 1);
                  } else if (ng.items[4] == 15) {
                    cc(4, c, 1);
                  }
                } else {
                  cc(b, c, 1);
                }
                m.push({
                  x: d,
                  y: e,
                  active: true,
                  blocker: j.blocker,
                  scale: j.scale,
                  isItem: true,
                  type: null,
                  colDiv: j.colDiv,
                  getScale: function () {
                    return this.scale;
                  }
                });
                if (p.getAngleDist(sg.aim2, c) <= 1) {
                  l.placed++;
                }
              }
              if (l.placed > 0 && h && j.dmg && sg.dist2 <= a.weapons[ng.weapons[0]].range + ng.scale * 1.8 && r.spikeTick) {
                Nc.canSpikeTick = true;
              }
            } catch (b) {}
          };
          this.checkSpikeTick = function () {
            try {
              if (![3, 4, 5].includes(sg.primaryIndex)) {
                return false;
              }
              if (pa("safeAntiSpikeTick").checked || tg.autoPush ? false : sg.primaryIndex == undefined ? true : sg.reloads[sg.primaryIndex] > gg.tickRate) {
                return false;
              }
              if (sg.dist2 <= a.weapons[sg.primaryIndex || 5].range + sg.scale * 1.8) {
                let b = a.list[9];
                let d = sg.scale + b.scale + (b.placeOffset || 0);
                let e = 0;
                let f = {
                  attempts: 0,
                  block: "unblocked"
                };
                for (let a = -1; a <= 1; a += 1 / 10) {
                  f.attempts++;
                  let c = p.getDirect(ng, sg, 2, 2) + a;
                  let g = sg.x2 + d * Math.cos(c);
                  let h = sg.y2 + d * Math.sin(c);
                  let i = mg.find(c => c.active && p.getDistance(g, h, c.x, c.y) < b.scale + (c.blocker ? c.blocker : c.getScale(0.6, c.isItem)));
                  if (i) {
                    continue;
                  }
                  if (h >= x.mapScale / 2 - x.riverWidth / 2 && h <= x.mapScale / 2 + x.riverWidth / 2) {
                    continue;
                  }
                  e++;
                  f.block = "blocked";
                  break;
                }
                if (e) {
                  tg.anti0Tick = 1;
                  return true;
                }
              }
            } catch (b) {
              return null;
            }
            return false;
          };
          this.protect = function (c) {
            if (!r.antiTrap) {
              return;
            }
            if (ng.items[4]) {
              for (let a = 0; a < Math.PI * 2; a += Math.PI / 4) {
                this.testCanPlace(4, -(Math.PI / 2), Math.PI / 2, Math.PI / 18, c + a);
              }
              this.antiTrapped = true;
            }
          };
          const b = async function (h, a, i, j, k, l, f = undefined) {
            if (f === undefined) f = sg;
            a = f && Math.hypot(f.y2 - ng.y2, f.x2 - ng.x2) >= 350 ? ng.items[4] : ng.items[2];
            if (a === ng.items[2]) {
              i = Math.atan2(h.y - ng.y2, h.x - ng.x2);
              j = Math.atan2(f.y - ng.y2, f.x - ng.x2);
              k = Math.abs(i - j);
              a = k <= Math.PI ? ng.items[2] : a;
              for (i = 0; i <= Math.PI * 2; i += Math.PI / 32) {
                this.testCanPlace(4, -(Math.PI / 2), Math.PI / 2, Math.PI / 32, aim + i);
              }
            }
            ;
          };
          this.autoPlace = function () {
            try {
              const f = mg.filter(b => b.trap && b.active).sort((b, a) => p.getDist(b, sg, 0, 2) - p.getDist(a, sg, 0, 2)).find(c => {
                const a = Math.hypot(c.y - sg.y2, c.x - sg.x2);
                return c !== ng && (ng.sid === c.owner.sid || pc(c.owner.sid)) && a <= 50;
              });
              if (f && sg.dist2 <= 160) {
                const k = f.x;
                const b = f.y;
                const c = 102;
                const d = 64;
                for (let e = 0; e < d; e++) {
                  const a = Math.PI * 2 * e / d;
                  const f = k + c * Math.cos(a);
                  const g = b + c * Math.sin(a);
                  const h = [f, g];
                  const i = Math.hypot(h[0] - ng.x2, h[1] - ng.y2);
                  if (!mc.has(JSON.stringify(h)) && oc(h) && i <= 88) {
                    const b = Math.atan2(h[1] - ng.y2, h[0] - ng.x2);
                    dc(2, b);
                    mc.add(JSON.stringify(h));
                  }
                }
              } else if (!f && sg.dist2 <= 266) {
                mc.clear();
                const a = 3;
                const b = 50;
                const g = qc(ng.x2, ng.y2, b);
                let d = 0;
                for (const b of g) {
                  if (d < a && !nc.has(JSON.stringify(b)) && oc(b)) {
                    dc(4, ...b);
                    nc.add(JSON.stringify(b));
                    d++;
                  } else if (!f && sg.dist2 <= 156) {
                    mc.clear();
                    const e = 3;
                    const a = 50;
                    const f = qc(ng.x2, ng.y2, a);
                    let c = 0;
                    for (const a of f) {
                      if (c < e && !nc.has(JSON.stringify(a)) && oc(a)) {
                        dc(2, ...a);
                        nc.add(JSON.stringify(a));
                        c++;
                      }
                    }
                  }
                }
              }
            } catch (b) {}
          };
        }
      }
      function wc() {
        $b(ng.weapons[1]);
        _b();
        Yb(53, 0);
        Yb(21, 1);
        ga.send("D", sg.aim2);
        setTimeout(() => {
          jg("H", 12);
          $b(ng.weapons[1]);
          setTimeout(() => {
            jg("H", 15);
            $b(ng.weapons[1]);
            setTimeout(() => {
              _b();
            }, 100);
          }, 120);
        }, 158);
      }
      function xc() {
        ga.send("D", sg.aim2);
        $b(ng.weapons[1]);
        _b();
        Yb(53, 0);
        Yb(21, 1);
        $b(ng.weapons[1]);
        setTimeout(() => {
          _b();
        }, 100);
      }
      class yc {
        constructor() {
          this.wait = false;
          this.can = false;
          this.isTrue = false;
          this.nobull = false;
          this.ticking = false;
          this.canSpikeTick = false;
          this.startTick = false;
          this.readyTick = false;
          this.canCounter = false;
          this.revTick = false;
          this.syncHit = false;
          this.changeType = function (d) {
            this.wait = false;
            this.isTrue = true;
            tg.autoAim = true;
            Yb(0, 1);
            let a = [d];
            let b = sg.backupNobull;
            sg.backupNobull = false;
            gg.tickBase(() => {
              a.push(ng.skinIndex);
              gg.tickBase(() => {
                if (sg.skinIndex == 22 && pa("backupNobull").checked) {
                  sg.backupNobull = true;
                }
                a.push(ng.skinIndex);
              }, 1);
            }, 1);
            if (d == "rev") {
              $b(ng.weapons[1]);
              _b();
              Yb(0, 1);
              gg.tickBase(() => {
                Yb(53, 0);
                gg.tickBase(() => {
                  $b(ng.weapons[0]);
                  Yb(7, 0);
                  gg.tickBase(() => {
                    _b();
                    this.isTrue = false;
                    tg.autoAim = false;
                  }, 1);
                }, 1);
              }, 1);
            } else if (d == "nobull") {
              $b(ng.weapons[0]);
              if (pa("backupNobull").checked && b) {
                Yb(7, 0);
              } else {
                Yb(6, 0);
              }
              Yb(21, 1);
              _b();
              gg.tickBase(() => {
                if (sg.skinIndex == 22) {
                  if (pa("backupNobull").checked) {
                    sg.backupNobull = true;
                  }
                  Yb(6, 0);
                } else {
                  Yb(53, 0);
                }
                $b(ng.weapons[1]);
                Yb(21, 1);
                gg.tickBase(() => {
                  _b();
                  this.isTrue = false;
                  tg.autoAim = false;
                }, 1);
              }, 1);
            } else if (d == "normal") {
              $b(ng.weapons[0]);
              Yb(7, 0);
              Yb(21, 1);
              _b();
              gg.tickBase(() => {
                $b(ng.weapons[1]);
                Yb(ng.reloads[53] == 0 ? 53 : 6, 0);
                Yb(21, 1);
                gg.tickBase(() => {
                  _b();
                  this.isTrue = false;
                  tg.autoAim = false;
                }, 1);
              }, 1);
            } else {
              setTimeout(() => {
                this.isTrue = false;
                tg.autoAim = false;
              }, 30);
            }
          };
          this.spikeTickType = function () {
            this.isTrue = true;
            tg.autoAim = true;
            $b(ng.weapons[0]);
            Yb(7, 0);
            Yb(21, 1);
            _b();
            gg.tickBase(() => {
              Yb(53, 0);
              $b(ng.weapons[0]);
              Yb(53, 0);
              gg.tickBase(() => {
                _b();
                this.isTrue = false;
                tg.autoAim = false;
                Yb(6, 0);
              }, 3);
            }, 1);
          };
          this.counterType = function () {
            this.isTrue = true;
            tg.autoAim = true;
            $b(ng.weapons[0]);
            Yb(7, 0);
            Yb(21, 1);
            _b();
            gg.tickBase(() => {
              if (ng.reloads[53] == 0 && pa("turretCombat").checked) {
                $b(ng.weapons[0]);
                Yb(53, 0);
                Yb(21, 1);
                gg.tickBase(() => {
                  _b();
                  this.isTrue = false;
                  tg.autoAim = false;
                }, 1);
              } else {
                _b();
                this.isTrue = false;
                tg.autoAim = false;
              }
            }, 1);
          };
          this.antiCounterType = function () {
            tg.autoAim = true;
            this.isTrue = true;
            P = true;
            $b(ng.weapons[0]);
            Yb(6, 0);
            Yb(21, 1);
            ga.send("D", sg.aim2);
            _b();
            gg.tickBase(() => {
              Yb(ng.reloads[53] == 0 ? ng.skins[53] ? 53 : 6 : 6, 0);
              Yb(21, 1);
              gg.tickBase(() => {
                _b();
                this.isTrue = false;
                tg.autoAim = false;
                P = false;
              }, 1);
            }, 1);
          };
          this.rangeType = function (b) {
            this.isTrue = true;
            tg.autoAim = true;
            if (b == "ageInsta") {
              tg.ageInsta = false;
              if (ng.items[5] == 18) {
                cc(5, sg.aim2);
              }
              jg("a", undefined, 1);
              Yb(22, 0);
              Yb(21, 1);
              gg.tickBase(() => {
                $b(ng.weapons[1]);
                Yb(53, 0);
                Yb(21, 1);
                _b();
                gg.tickBase(() => {
                  Vb(12);
                  $b(ng.weapons[1]);
                  Yb(53, 0);
                  Yb(21, 1);
                  gg.tickBase(() => {
                    Vb(15);
                    $b(ng.weapons[1]);
                    Yb(53, 0);
                    Yb(21, 1);
                    gg.tickBase(() => {
                      _b();
                      this.isTrue = false;
                      tg.autoAim = false;
                    }, 1);
                  }, 1);
                }, 1);
              }, 1);
            } else {
              $b(ng.weapons[1]);
              if (ng.reloads[53] == 0 && sg.dist2 <= 700 && sg.skinIndex != 22) {
                Yb(53, 0);
              } else {
                Yb(20, 0);
              }
              Yb(11, 1);
              _b();
              gg.tickBase(() => {
                _b();
                this.isTrue = false;
                tg.autoAim = false;
              }, 1);
            }
          };
          this.oneTickType = function () {
            this.isTrue = true;
            tg.autoAim = true;
            $b(ng.weapons[1]);
            Yb(53, 0);
            Yb(11, 1);
            jg("a", sg.aim2, 1);
            if (ng.weapons[1] == 15) {
              tg.revAim = true;
              _b();
            }
            gg.tickBase(() => {
              const b = mg.filter(b => b.trap && b.active).sort((c, a) => Dc.getDist(c, sg, 0, 2) - Dc.getDist(a, sg, 0, 2)).find(c => {
                const a = Math.hypot(c.y - sg.y2, c.x - sg.x2);
                return c !== ng && (ng.sid === c.owner.sid || pc(c.owner.sid)) && a <= 30;
              });
              if ([6, 22].includes(sg.skinIndex) && b) {
                ga.send("6", "p_OT [2/3]");
              }
              tg.revAim = false;
              $b(ng.weapons[0]);
              Yb(7, 0);
              Yb(19, 1);
              jg("a", sg.aim2, 1);
              if (ng.weapons[1] != 15) {
                _b();
              }
              gg.tickBase(() => {
                _b();
                this.isTrue = false;
                tg.autoAim = false;
                jg("a", undefined, 1);
              }, 1);
            }, 1);
          };
          this.threeOneTickType = function () {
            this.isTrue = true;
            tg.autoAim = true;
            $b(ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0]);
            sc();
            Yb(11, 1);
            jg("a", sg.aim2, 1);
            gg.tickBase(() => {
              $b(ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0]);
              Yb(53, 0);
              Yb(11, 1);
              jg("a", sg.aim2, 1);
              gg.tickBase(() => {
                $b(ng.weapons[0]);
                Yb(7, 0);
                Yb(19, 1);
                _b();
                jg("a", sg.aim2, 1);
                gg.tickBase(() => {
                  _b();
                  this.isTrue = false;
                  tg.autoAim = false;
                  jg("a", undefined, 1);
                }, 1);
              }, 1);
            }, 1);
          };
          this.kmTickType = function () {
            this.isTrue = true;
            tg.autoAim = true;
            tg.revAim = true;
            $b(ng.weapons[1]);
            Yb(53, 0);
            Yb(11, 1);
            _b();
            jg("a", sg.aim2, 1);
            gg.tickBase(() => {
              tg.revAim = false;
              $b(ng.weapons[0]);
              Yb(7, 0);
              Yb(19, 1);
              jg("a", sg.aim2, 1);
              gg.tickBase(() => {
                _b();
                this.isTrue = false;
                tg.autoAim = false;
                jg("a", undefined, 1);
              }, 1);
            }, 1);
          };
          this.boostTickType = function () {
            this.isTrue = true;
            tg.autoAim = true;
            sc();
            Yb(11, 1);
            jg("a", sg.aim2, 1);
            gg.tickBase(() => {
              if (ng.weapons[1] == 15) {
                tg.revAim = true;
              }
              $b(ng.weapons[[9, 12, 13, 15].includes(ng.weapons[1]) ? 1 : 0]);
              Yb(53, 0);
              Yb(11, 1);
              if ([9, 12, 13, 15].includes(ng.weapons[1])) {
                _b();
              }
              jg("a", sg.aim2, 1);
              cc(4, sg.aim2);
              gg.tickBase(() => {
                tg.revAim = false;
                $b(ng.weapons[0]);
                Yb(7, 0);
                Yb(19, 1);
                if (![9, 12, 13, 15].includes(ng.weapons[1])) {
                  _b();
                }
                jg("a", sg.aim2, 1);
                gg.tickBase(() => {
                  _b();
                  this.isTrue = false;
                  tg.autoAim = false;
                  jg("a", undefined, 1);
                }, 1);
              }, 1);
            }, 1);
          };
          this.gotoGoal = function (a, b) {
            let c = a => a * x.playerScale;
            let d = {
              a: a - b,
              b: a + b,
              c: a - c(1),
              d: a + c(1),
              e: a - c(2),
              f: a + c(2),
              g: a - c(4),
              h: a + c(4)
            };
            let e = function (a, b) {
              if (ng.y2 >= x.mapScale / 2 - x.riverWidth / 2 && ng.y2 <= x.mapScale / 2 + x.riverWidth / 2 && b == 0) {
                Yb(31, 0);
              } else {
                Yb(a, b);
              }
            };
            if (qg.length) {
              let b = sg.dist2;
              this.ticking = true;
              if (b >= d.a && b <= d.b) {
                e(22, 0);
                e(11, 1);
                if (ng.weaponIndex != ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0] || ng.buildIndex > -1) {
                  $b(ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0]);
                }
                return {
                  dir: undefined,
                  action: 1
                };
              } else {
                if (b < d.a) {
                  if (b >= d.g) {
                    if (b >= d.e) {
                      if (b >= d.c) {
                        e(40, 0);
                        e(19, 1);
                        if (r.slowOT) {
                          if (ng.buildIndex != ng.items[1]) {
                            Zb(ng.items[1]);
                          }
                        } else if (ng.weaponIndex != ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0] || ng.buildIndex > -1) {
                          $b(ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0]);
                        }
                      } else {
                        e(22, 0);
                        e(19, 1);
                        if (ng.weaponIndex != ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0] || ng.buildIndex > -1) {
                          $b(ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0]);
                        }
                      }
                    } else {
                      e(6, 0);
                      e(19, 1);
                      if (ng.weaponIndex != ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0] || ng.buildIndex > -1) {
                        $b(ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0]);
                      }
                    }
                  } else {
                    sc();
                    if (ng.weaponIndex != ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0] || ng.buildIndex > -1) {
                      $b(ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0]);
                    }
                  }
                  return {
                    dir: sg.aim2 + Math.PI,
                    action: 0
                  };
                } else if (b > d.b) {
                  if (b <= d.h) {
                    if (b <= d.f) {
                      if (b <= d.d) {
                        e(40, 0);
                        e(9, 1);
                        if (r.slowOT) {
                          if (ng.buildIndex != ng.items[1]) {
                            Zb(ng.items[1]);
                          }
                        } else if (ng.weaponIndex != ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0] || ng.buildIndex > -1) {
                          $b(ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0]);
                        }
                      } else {
                        e(22, 0);
                        e(19, 1);
                        if (ng.weaponIndex != ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0] || ng.buildIndex > -1) {
                          $b(ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0]);
                        }
                      }
                    } else {
                      e(6, 0);
                      e(12, 1);
                      if (ng.weaponIndex != ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0] || ng.buildIndex > -1) {
                        $b(ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0]);
                      }
                    }
                  } else {
                    sc();
                    e(11, 1);
                    if (ng.weaponIndex != ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0] || ng.buildIndex > -1) {
                      $b(ng.weapons[[10, 14].includes(ng.weapons[1]) ? 1 : 0]);
                    }
                  }
                  return {
                    dir: sg.aim2,
                    action: 0
                  };
                }
                return {
                  dir: undefined,
                  action: 0
                };
              }
            } else {
              this.ticking = false;
              return {
                dir: undefined,
                action: 0
              };
            }
          };
          this.bowMovement = function () {
            let b = this.gotoGoal(685, 3);
            if (b.action) {
              if (ng.reloads[53] == 0 && !this.isTrue) {
                this.rangeType("ageInsta");
              } else {
                jg("a", b.dir, 1);
              }
            } else {
              jg("a", b.dir, 1);
            }
          };
          this.tickMovement = function () {
            const a = mg.filter(b => b.trap && b.active).sort((c, a) => Dc.getDist(c, sg, 0, 2) - Dc.getDist(a, sg, 0, 2)).find(c => {
              const a = Math.hypot(c.y - sg.y2, c.x - sg.x2);
              return c !== ng && (ng.sid === c.owner.sid || pc(c.owner.sid)) && a <= 50;
            });
            let b = this.gotoGoal([10, 14].includes(ng.weapons[1]) && ng.y2 > x.snowBiomeTop ? 200 : ng.weapons[1] == 15 ? 210 : ng.y2 <= x.snowBiomeTop ? [10, 14].includes(ng.weapons[1]) ? 230 : 225 : 235, 3);
            if (b.action) {
              if ((![6, 22].includes(sg.skinIndex) || [6, 22].includes(sg.skinIndex) && a) && ng.reloads[53] == 0 && !this.isTrue) {
                if ([10, 14].includes(ng.weapons[1]) && ng.y2 > x.snowBiomeTop || ng.weapons[1] == 15) {
                  this.oneTickType();
                } else {
                  this.threeOneTickType();
                }
                if ([6, 22].includes(sg.skinIndex) && a) {
                  ga.send("6", "p_OT [1/3]");
                }
              } else {
                jg("a", b.dir, 1);
              }
            } else {
              jg("a", b.dir, 1);
            }
          };
          this.kmTickMovement = function () {
            let a = this.gotoGoal(240, 3);
            if (a.action) {
              if (sg.skinIndex != 22 && ng.reloads[53] == 0 && !this.isTrue && (gg.tick - sg.poisonTick) % x.serverUpdateRate == 8) {
                this.kmTickType();
              } else {
                jg("a", a.dir, 1);
              }
            } else {
              jg("a", a.dir, 1);
            }
          };
          this.boostTickMovement = function () {
            let d = ng.weapons[1] == 9 ? 365 : ng.weapons[1] == 12 ? 380 : ng.weapons[1] == 13 ? 390 : ng.weapons[1] == 15 ? 365 : 370;
            let a = ng.weapons[1] == 9 ? 2 : ng.weapons[1] == 12 ? 1.5 : ng.weapons[1] == 13 ? 1.5 : ng.weapons[1] == 15 ? 2 : 3;
            let b = this.gotoGoal(d, a);
            if (b.action) {
              if (ng.reloads[53] == 0 && !this.isTrue) {
                this.boostTickType();
              } else {
                jg("a", b.dir, 1);
              }
            } else {
              jg("a", b.dir, 1);
            }
          };
          this.perfCheck = function (a, b) {
            if (b.weaponIndex == 11 && Dc.getAngleDist(b.aim2 + Math.PI, b.d2) <= x.shieldAngle) {
              return false;
            }
            if (![9, 12, 13, 15].includes(ng.weapons[1])) {
              return true;
            }
            let c = {
              x: b.x2 + Math.cos(b.aim2 + Math.PI) * 70,
              y: b.y2 + Math.sin(b.aim2 + Math.PI) * 70
            };
            if (Dc.lineInRect(a.x2 - a.scale, a.y2 - a.scale, a.x2 + a.scale, a.y2 + a.scale, c.x, c.y, c.x, c.y)) {
              return true;
            }
            let d = ka.filter(b => b.visible).find(b => {
              if (Dc.lineInRect(b.x2 - b.scale, b.y2 - b.scale, b.x2 + b.scale, b.y2 + b.scale, c.x, c.y, c.x, c.y)) {
                return true;
              }
            });
            if (d) {
              return false;
            }
            d = mg.filter(b => b.active).find(d => {
              let a = d.getScale();
              if (!d.ignoreCollision && Dc.lineInRect(d.x - a, d.y - a, d.x + a, d.y + a, c.x, c.y, c.x, c.y)) {
                return true;
              }
            });
            if (d) {
              return false;
            }
            return true;
          };
        }
      }
      ;
      class zc {
        constructor(c, a) {
          this.hat = function () {
            c.forEach(c => {
              let a = Aa(Hc, c);
              if (a && !ng.skins[c] && ng.points >= a.price) {
                jg("c", 1, c, 0);
              }
            });
          };
          this.acc = function () {
            a.forEach(c => {
              let a = Aa(Ic, c);
              if (a && !ng.tails[c] && ng.points >= a.price) {
                jg("c", 1, c, 1);
              }
            });
          };
        }
      }
      ;
      class Ac {
        constructor() {
          this.sb = function (b) {
            b(3);
            b(17);
            b(31);
            b(23);
            b(9);
            b(38);
          };
          this.kh = function (b) {
            b(3);
            b(17);
            b(31);
            b(23);
            b(10);
            b(38);
            b(4);
            b(25);
          };
          this.pb = function (b) {
            b(5);
            b(17);
            b(32);
            b(23);
            b(9);
            b(38);
          };
          this.ph = function (b) {
            b(5);
            b(17);
            b(32);
            b(23);
            b(10);
            b(38);
            b(28);
            b(25);
          };
          this.db = function (b) {
            b(7);
            b(17);
            b(31);
            b(23);
            b(9);
            b(34);
          };
          this.km = function (b) {
            b(7);
            b(17);
            b(31);
            b(23);
            b(10);
            b(38);
            b(4);
            b(15);
          };
        }
      }
      ;
      class Bc {
        constructor(e) {
          this.calcDmg = function (c, a) {
            return c * a;
          };
          this.getAllDamage = function (b) {
            return [this.calcDmg(b, 0.75), b, this.calcDmg(b, 1.125), this.calcDmg(b, 1.5)];
          };
          this.weapons = [];
          for (let a = 0; a < e.weapons.length; a++) {
            let b = e.weapons[a];
            let c = b.name.split(" ").length <= 1 ? b.name : b.name.split(" ")[0] + "_" + b.name.split(" ")[1];
            this.weapons.push(this.getAllDamage(a > 8 ? b.Pdmg : b.dmg));
            this[c] = this.weapons[a];
          }
        }
      }
      let Cc = [];
      let Dc = new Gb();
      let Ec = new Kb();
      let Fc = new Lb(Jb, mg, Dc, x);
      let Gc = new Nb();
      let Hc = Gc.hats;
      let Ic = Gc.accessories;
      let Jc = new Ob(Mb, qa, la, ka, Fc, Ec, x, Dc);
      let Kc = new Pb(ka, Qb, la, Ec, null, x, Dc);
      let Lc = new Ib();
      let Mc = new Ng(Dc, Ec);
      let Nc = new yc();
      let Oc = new zc([15, 31, 6, 7, 22, 12, 53, 20, 40], [11, 13, 19, 18, 21]);
      let Pc = new Ac();
      let Qc;
      let Og;
      let Pg = {};
      let Tc = [];
      let Uc;
      let Qg = [];
      let Wc = 0;
      let Xc = [];
      let Rg = {
        active: false,
        grid: 40,
        scale: 1440,
        x: 14400,
        y: 14400,
        chaseNear: false,
        array: [],
        lastX: this.grid / 2,
        lastY: this.grid / 2
      };
      function Zc(b) {
        jg("6", b.slice(0, 30));
      }
      let $c = [];
      function Sg(a, b, c, d, e, f, g, h) {
        let i = f == 0 ? 9 : f == 2 ? 12 : f == 3 ? 13 : f == 5 && 15;
        let j = x.playerScale * 2;
        let k = {
          x: f == 1 ? a : a - j * Math.cos(c),
          y: f == 1 ? b : b - j * Math.sin(c)
        };
        let l = la.filter(b => b.visible && Dc.getDist(k, b, 0, 2) <= b.scale).sort(function (c, a) {
          return Dc.getDist(k, c, 0, 2) - Dc.getDist(k, a, 0, 2);
        })[0];
        if (l) {
          if (f == 1) {
            l.shooting[53] = 1;
          } else {
            l.shootIndex = i;
            l.shooting[1] = 1;
            Tg(l, c, d, e, f, i);
          }
        }
      }
      let ad = 0;
      function Tg(g, a, b, c, d, e) {
        if (!g.isTeam(ng)) {
          Ag = Dc.getDirect(ng, g, 2, 2);
          if (Dc.getAngleDist(Ag, a) <= 0.2) {
            g.bowThreat[e]++;
            if (d == 5) {
              ad++;
            }
            setTimeout(() => {
              g.bowThreat[e]--;
              if (d == 5) {
                ad--;
              }
            }, b / c);
            if (g.bowThreat[9] >= 1 && (g.bowThreat[12] >= 1 || g.bowThreat[15] >= 1)) {
              cc(1, g.aim2);
              tg.anti0Tick = 4;
              if (!tg.antiSync) {
                lc(4);
              }
            } else if (ad >= 2) {
              cc(1, g.aim2);
              tg.anti0Tick = 4;
              if (!tg.antiSync) {
                lc(4);
              }
            }
          }
        }
      }
      function cd(e, a, b) {
        if (ng && e) {
          Dc.removeAllChildren(Xa);
          Xa.classList.add("visible");
          Dc.generateElement({
            id: "itemInfoName",
            text: Dc.capitalizeFirst(e.name),
            parent: Xa
          });
          Dc.generateElement({
            id: "itemInfoDesc",
            text: e.desc,
            parent: Xa
          });
          if (b) {} else if (a) {
            Dc.generateElement({
              class: "itemInfoReq",
              text: !e.type ? "primary" : "secondary",
              parent: Xa
            });
          } else {
            for (let b = 0; b < e.req.length; b += 2) {
              Dc.generateElement({
                class: "itemInfoReq",
                html: e.req[b] + "<span class='itemInfoReqVal'> x" + e.req[b + 1] + "</span>",
                parent: Xa
              });
            }
            if (e.group.limit) {
              Dc.generateElement({
                class: "itemInfoLmt",
                text: (ng.itemCounts[e.group.id] || 0) + "/" + (x.isSandbox ? 99 : e.group.limit),
                parent: Xa
              });
            }
          }
        } else {
          Xa.classList.remove("visible");
        }
      }
      window.addEventListener("resize", Dc.checkTrusted(dd));
      function dd() {
        _a = window.innerWidth;
        ug = window.innerHeight;
      }
      dd();
      const ed = document.getElementById("touch-controls-fullscreen");
      ed.style.display = "block";
      ed.addEventListener("mousemove", fd, false);
      function fd(b) {
        Bg = b.clientX;
        Cg = b.clientY;
      }
      let gd = {
        left: false,
        middle: false,
        right: false
      };
      ed.addEventListener("mousedown", hd, false);
      function hd(b) {
        if (xb != 1) {
          xb = 1;
          if (b.button == 0) {
            gd.left = true;
          } else if (b.button == 1) {
            gd.middle = true;
          } else if (b.button == 2) {
            gd.right = true;
          }
        }
      }
      ed.addEventListener("mouseup", Dc.checkTrusted(id));
      function id(b) {
        if (xb != 0) {
          xb = 0;
          if (b.button == 0) {
            gd.left = false;
          } else if (b.button == 1) {
            gd.middle = false;
          } else if (b.button == 2) {
            gd.right = false;
          }
        }
      }
      ed.addEventListener("wheel", jd, false);
      function jd(b) {
        if (b.deltaY < 0) {
          tg.reSync = true;
        } else {
          tg.reSync = false;
        }
      }
      function kd() {
        let e = 0;
        let f = 0;
        for (let a in Hg) {
          let b = Hg[a];
          e += !!Gg[a] * b[0];
          f += !!Gg[a] * b[1];
        }
        if (e == 0 && f == 0) {
          return undefined;
        } else {
          return Math.atan2(f, e);
        }
      }
      function ld() {
        if (!ng) {
          return 0;
        }
        if (!ng.lockDir) {
          Bb = Math.atan2(Cg - ug / 2, Bg - _a / 2);
        }
        return Bb || 0;
      }
      function md(b) {
        if (b) {
          if (!ng) {
            return "0";
          }
          if (tg.autoAim || (gd.left || eg && sg.dist2 <= Ec.weapons[ng.weapons[0]].range + sg.scale * 1.8 && !Mc.inTrap) && ng.reloads[ng.weapons[0]] == 0) {
            Bb = pa("weaponGrind").checked ? "getSafeDir()" : qg.length ? tg.revAim ? "(near.aim2 + Math.PI)" : "near.aim2" : "getSafeDir()";
          } else if (gd.right && ng.reloads[ng.weapons[1] == 10 ? ng.weapons[1] : ng.weapons[0]] == 0) {
            Bb = "getSafeDir()";
          } else if (Mc.inTrap && ng.reloads[Mc.notFast() ? ng.weapons[1] : ng.weapons[0]] == 0) {
            let e = mg.sort((c, a) => Math.hypot(ng.y2 - c.y, ng.x2 - c.x) - Math.hypot(ng.y2 - a.y, ng.x2 - a.x));
            let a = e.filter(b => ((b.name == "spikes" || b.name == "greater spikes" || b.name == "spinning spikes" || b.name == "poison spikes") && ng.sid !== b.owner.sid && !pc(b.owner.sid) || b.name == "teleporter" && b.owner.sid != ng.sid) && fgdo(ng, b) < (ng.items[1] === 10 ? 145 : 250) && b.active);
            let b = a.length > 0 ? a[0] : null;
            if (a.length > 1) {
              b = a.reduce((c, a) => Math.hypot(ng.y2 - a.y, ng.x2 - a.x) < Math.hypot(ng.y2 - c.y, ng.x2 - c.x) ? a : c);
            }
            let c = Math.atan2(b.y - ng.y2, b.x - ng.x2);
            if (sg && sg.dist2 <= 600 && b) {
              Bb = "angleToNearestSpike";
            } else {
              Bb = "traps.aim";
            }
          } else if (!ng.lockDir) {
            if (r.noDir) {
              return "undefined";
            }
            Bb = "getSafeDir()";
          }
          return Bb;
        } else {
          if (!ng) {
            return 0;
          }
          if (tg.autoAim || (gd.left || eg && sg.dist2 <= Ec.weapons[ng.weapons[0]].range + sg.scale * 1.8 && !Mc.inTrap) && ng.reloads[ng.weapons[0]] == 0) {
            Bb = pa("weaponGrind").checked ? ld() : qg.length ? tg.revAim ? sg.aim2 + Math.PI : sg.aim2 : ld();
          } else if (gd.right && ng.reloads[ng.weapons[1] == 10 ? ng.weapons[1] : ng.weapons[0]] == 0) {
            Bb = ld();
          } else if (Mc.inTrap && ng.reloads[Mc.notFast() ? ng.weapons[1] : ng.weapons[0]] == 0) {
            Bb = Mc.aim;
          } else if (!ng.lockDir) {
            if (r.noDir) {
              return undefined;
            }
            Bb = ld();
          }
          return Bb || 0;
        }
      }
      function nd() {
        if (!ng) {
          return 0;
        }
        if (tg.autoAim || (gd.left || eg && sg.dist2 <= Ec.weapons[ng.weapons[0]].range + sg.scale * 1.8 && !Mc.inTrap) && ng.reloads[ng.weapons[0]] == 0) {
          Bb = pa("weaponGrind").checked ? ld() : qg.length ? tg.revAim ? sg.aim2 + Math.PI : sg.aim2 : ld();
        } else if (gd.right && ng.reloads[ng.weapons[1] == 10 ? ng.weapons[1] : ng.weapons[0]] == 0) {
          Bb = ld();
        } else if (Mc.inTrap && ng.reloads[Mc.notFast() ? ng.weapons[1] : ng.weapons[0]] == 0) {
          Bb = Mc.aim;
        } else if (!ng.lockDir) {
          Bb = ld();
        }
        return Bb || 0;
      }
      function od() {
        return Dg.style.display != "block" && Ua.style.display != "block" && !E;
      }
      function pd() {
        if (A.style.display != "none") {
          Ua.style.display = "none";
          if (D.value != "") {
            let c = function (b) {
              return {
                found: b.startsWith("/") && q[b.slice(1).split(" ")[0]],
                fv: q[b.slice(1).split(" ")[0]]
              };
            };
            let a = c(D.value);
            if (a.found) {
              if (typeof a.fv.action === "function") {
                a.fv.action(D.value);
              }
            } else {
              Zc(D.value);
            }
            D.value = "";
            D.blur();
          } else if (E) {
            D.blur();
          } else {
            D.focus();
          }
        }
      }
      function qd(c) {
        let a = c.which || c.keyCode || 0;
        if (ng && ng.alive && od()) {
          if (!Gg[a]) {
            Gg[a] = 1;
            Jg[c.key] = 1;
            if (a == 27) {
              N = !N;
              $("#menuDiv").toggle();
              $("#menuChatDiv").toggle();
            } else if (a == 71) {
              ga.send("6", "s12345678s123");
            } else if (a == 85) {
              wc();
            } else if (a == 69) {
              _b();
            } else if (a == 67) {
              Mf();
            } else if (ng.weapons[a - 49] != undefined) {
              ng.weaponCode = ng.weapons[a - 49];
            } else if (Hg[a]) {
              sd();
            } else if (c.key == "m") {
              Kg.placeSpawnPads = !Kg.placeSpawnPads;
            } else if (c.key == "z") {
              Kg.place = !Kg.place;
            } else if (c.key == "Z") {
              if (typeof window.debug == "function") {
                window.debug();
              }
            } else if (a == 85) {
              jg("6", "!e");
            } else if (a == 32) {
              jg("d", 1, ld(), 1);
              jg("d", 0, ld(), 1);
            } else if (c.key == ",") {
              ng.sync = true;
            }
          }
        }
      }
      addEventListener("keydown", Dc.checkTrusted(qd));
      function rd(c) {
        if (ng && ng.alive) {
          let a = c.which || c.keyCode || 0;
          if (a == 13) {
            pd();
          } else if (od()) {
            if (Gg[a]) {
              Gg[a] = 0;
              Jg[c.key] = 0;
              if (Hg[a]) {
                sd();
              } else if (c.key == ",") {
                ng.sync = false;
              }
            }
          }
        }
      }
      window.addEventListener("keyup", Dc.checkTrusted(rd));
      function sd() {
        let b = kd();
        if (ca == undefined || b == undefined || Math.abs(b - ca) > 0.3) {
          if (!tg.autoPush) {
            jg("a", b, 1);
          }
          ca = b;
        }
      }
      function td() {}
      td();
      function ud(b) {
        return (ng.scale + b.getScale()) / (ng.maxSpeed * Ec.weapons[ng.weaponIndex].spdMult) + (b.dmg && !b.isTeamObject(ng) ? 35 : 0);
        if (b.colDiv == 0.5) {
          return b.scale * b.colDiv;
        } else if (!b.isTeamObject(ng) && b.dmg) {
          return b.scale + ng.scale;
        } else if (b.isTeamObject(ng) && b.trap) {
          return 0;
        } else {
          return b.scale;
        }
      }
      function vd() {
        let f = mg.filter(b => ng.canSee(b) && b.active);
        for (let a = 0; a < Rg.grid; a++) {
          Xc[a] = [];
          for (let b = 0; b < Rg.grid; b++) {
            let c = {
              x: ng.x2 - Rg.scale / 2 + Rg.scale / Rg.grid * b,
              y: ng.y2 - Rg.scale / 2 + Rg.scale / Rg.grid * a
            };
            if (Dc.getDist(Rg.chaseNear ? sg : Rg, c, Rg.chaseNear ? 2 : 0, 0) <= (Rg.chaseNear ? 35 : 60)) {
              Rg.lastX = b;
              Rg.lastY = a;
              Xc[a][b] = 0;
              continue;
            }
            let d = f.find(b => Dc.getDist(b, c, 0, 0) <= ud(b));
            if (d) {
              if (d.trap) {
                Xc[a][b] = 0;
                continue;
              }
              Xc[a][b] = 1;
            } else {
              Xc[a][b] = 0;
            }
          }
        }
      }
      function wd(d) {
        let a = ~~(d % 3600 / 60);
        let b = ~~d % 60;
        if (b <= 9) {
          b = "0" + b;
        }
        return a + ":" + b;
      }
      let xd = {};
      const yd = new Audio("https:7486356490/Theres_nothing_we_can_do_Napoleo_getmp3.one.mp3?ex=653e6206&is=652bed06&hm=23c73ea5e2be9fd273a7b5cc11c16f8652960425a4de3ce7803a2b9581516b8c&");
      let zd = false;
      let Ug = "";
      function Vg() {
        if (!zd) {
          yd.play();
          yd.ontimeupdate = function (c) {
            let a = xd[wd(Math.round(this.currentTime | 0))];
            if (a && a !== Ug) {
              Ug = a;
              ga.send("6", a);
            }
          };
          yd.onended = function () {
            if (zd) {
              yd.play();
            }
          };
          zd = true;
        } else {
          yd.pause();
          zd = false;
        }
      }
      document.addEventListener("keypress", function (b) {
        if (b.key === "C") {
          Vg();
        }
      });
      function Cd() {
        Xc = [];
        vd();
      }
      function Dd() {
        Rg.scale = x.maxScreenWidth / 2 * 1.3;
        if (!Mc.inTrap && (Rg.chaseNear ? qg.length : true)) {
          if (sg.dist2 <= Ec.weapons[ng.weapons[0]].range) {
            jg("a", undefined, 1);
          } else {
            Cd();
            Y.setGrid(Xc);
            Y.setAcceptableTiles([0]);
            Y.enableDiagonals();
            Y.findPath(Xc[0].length / 2, Xc.length / 2, Rg.lastX, Rg.lastY, function (c) {
              if (c === null) {
                Rg.array = [];
                if (sg.dist2 <= Ec.weapons[ng.weapons[0]].range) {
                  jg("a", undefined, 1);
                } else {
                  jg("a", sg.aim2, 1);
                }
              } else {
                Rg.array = c;
                if (Rg.array.length > 1) {
                  let a = {
                    x: ng.x2 - Rg.scale / 2 + Rg.scale / Rg.grid * c[1].x,
                    y: ng.y2 - Rg.scale / 2 + Rg.scale / Rg.grid * c[1].y
                  };
                  jg("a", Dc.getDirect(a, ng, 0, 2), 1);
                }
              }
            });
            Y.calculate();
          }
        }
      }
      let Ed = [];
      function Fd(e = undefined) {
        if (e === undefined) e = undefined;
        for (let a = 3; a < Ec.list.length; ++a) {
          let b = Ec.list[a].group.id;
          let c = Ec.weapons.length + a;
          if (!Ed[c]) {
            Ed[c] = document.createElement("div");
            Ed[c].id = "itemCount" + c;
            pa("actionBarItem" + c).appendChild(Ed[c]);
            Ed[c].style = "\n                        display: block;\n                        position: absolute;\n                        padding-left: 5px;\n                        font-size: 2em;\n                        color: #fff;\n                        ";
            Ed[c].innerHTML = ng.itemCounts[b] || 0;
          } else if (e == b) {
            Ed[c].innerHTML = ng.itemCounts[e] || 0;
          }
        }
      }
      if (pa("p2").checked) {
        function b() {
          let c = mg.filter(b => b.trap && b.active && b.isTeamObject(ng) && Dc.getDist(b, sg, 0, 2) <= sg.scale + b.getScale() + 5).sort(function (c, a) {
            return Dc.getDist(c, sg, 0, 2) - Dc.getDist(a, sg, 0, 2);
          })[0];
          if (c && sg && sg.dist2 <= 260) {
            let e = mg.filter(a => a.dmg && a.active && a.isTeamObject(ng) && Dc.getDist(a, c, 0, 0) <= sg.scale + c.scale + a.scale).sort(function (c, a) {
              return Dc.getDist(c, sg, 0, 2) - Dc.getDist(a, sg, 0, 2);
            })[0];
            if (e) {
              let f = {
                x: e.x + Math.cos(Dc.getDirect(sg, e, 2, 0)) * 250,
                y: e.y + Math.sin(Dc.getDirect(sg, e, 2, 0)) * 250,
                x2: e.x + (Dc.getDist(sg, e, 2, 0) + ng.scale) * Math.cos(Dc.getDirect(sg, e, 2, 0)),
                y2: e.y + (Dc.getDist(sg, e, 2, 0) + ng.scale) * Math.sin(Dc.getDirect(sg, e, 2, 0))
              };
              let a = mg.filter(b => b.active).find(a => {
                let b = a.getScale();
                if (!a.ignoreCollision && Dc.lineInRect(a.x - b, a.y - b, a.x + b, a.y + b, ng.x2, ng.y2, f.x2, f.y2)) {
                  return true;
                }
              });
              if (a) {
                if (tg.autoPush) {
                  tg.autoPush = false;
                  jg("a", ca || undefined, 1);
                }
              } else {
                tg.autoPush = true;
                tg.pushData = {
                  x: e.x + Math.cos(70),
                  y: e.y + Math.sin(70),
                  x2: f.x2 + Math.cos(30),
                  y2: f.y2 + Math.sin(30)
                };
                let a = ng.scale / 10;
                let b = Dc.getDirect(sg, e, 2, 0) > 70 ? sg.aim2 : undefined;
                if (Dc.lineInRect(ng.x2 - a, ng.y2 - a, ng.x2 + a, ng.y2 + a, sg.x2, sg.y2, f.x, f.y)) {
                  jg("a", b, 1);
                  Lc.showText(ng.x2, ng.y2, 30, 0.15, 1850, "AutoPush", "#fff", 2);
                } else {
                  jg("a", Dc.getDirect(f, ng, 2, 2), 1);
                }
              }
            } else if (tg.autoPush) {
              tg.autoPush = false;
              jg("a", ca || undefined, 1);
            }
          } else if (tg.autoPush) {
            tg.autoPush = false;
            jg("a", ca || undefined, 1);
          }
        }
      }
      function Gd(b) {}
      function Hd(b) {
        ma = b.teams;
      }
      var Id = false;
      function Wg(b) {
        Gg = {};
        Jg = {};
        og = b;
        xb = 0;
        Ig = true;
        Id = true;
        jg("d", 0, md(), 1);
        tg.ageInsta = true;
        if (tb) {
          tb = false;
          mg.length = 0;
        }
      }
      function Kd(a, b) {
        let c = Ca(a[0]);
        if (!c) {
          c = new Ub(a[0], a[1], x, Dc, Jc, Fc, la, ka, Ec, Hc, Ic);
          la.push(c);
          if (a[1] != og) {
            Rd("Game", "Found " + a[2] + " {" + a[1] + "}", "yellow");
          }
        } else if (a[1] != og) {
          Rd("Game", "Encount " + a[2] + " {" + a[1] + "}", "yellow");
        }
        c.spawn(b ? true : null);
        c.visible = false;
        c.oldPos = {
          x2: undefined,
          y2: undefined
        };
        c.x2 = undefined;
        c.y2 = undefined;
        c.x3 = undefined;
        c.y3 = undefined;
        c.setData(a);
        if (b) {
          if (!ng) {
            window.prepareUI(c);
          }
          ng = c;
          yg = ng.x;
          zg = ng.y;
          tg.lastDir = 0;
          ue();
          Ud();
          Fd();
          for (let b = 0; b < 5; b++) {
            ia.push(new Rb(ng.x, ng.y));
          }
          if (ng.skins[7]) {
            tg.reSync = true;
          }
        }
      }
      function Ld(c) {
        for (let a = 0; a < la.length; a++) {
          if (la[a].id == c) {
            Rd("Game", la[a].name + " left the game", "yellow");
            la.splice(a, 1);
            break;
          }
        }
      }
      let Md = undefined;
      let Nd = false;
      let Od = false;
      let Pd = false;
      function Qd(c, a) {
        pg = Da(c);
        if (pg) {
          pg.oldHealth = pg.health;
          pg.health = a;
          pg.judgeShame();
          if (pg.oldHealth > pg.health) {
            pg.damaged = pg.oldHealth - pg.health;
            uc.push([c, a, pg.damaged]);
          } else {}
          if (pg.health <= 0) {}
        }
      }
      function Sd() {
        ia = [];
        Ig = false;
        Qc = {
          x: ng.x,
          y: ng.y
        };
        if (r.autoRespawn) {
          pa("ot-sdk-btn-floating").style.display = "none";
          jg("M", {
            name: ig[0],
            moofoll: ig[1],
            skin: ig[2]
          });
        }
      }
      function Td(c, a) {
        if (ng) {
          ng.itemCounts[c] = a;
          Fd(c);
        }
      }
      function Ud(d, a, b) {
        if (d != undefined) {
          ng.XP = d;
        }
        if (a != undefined) {
          ng.maxXP = a;
        }
        if (b != undefined) {
          ng.age = b;
        }
      }
      function Vd(c, d) {
        ng.upgradePoints = c;
        ng.upgrAge = d;
        if (c > 0) {
          Cc.length = 0;
          Dc.removeAllChildren(Ra);
          for (let c = 0; c < Ec.weapons.length; ++c) {
            if (Ec.weapons[c].age == d && (L || Ec.weapons[c].pre == undefined || ng.weapons.indexOf(Ec.weapons[c].pre) >= 0)) {
              let a = Dc.generateElement({
                id: "upgradeItem" + c,
                class: "actionBarItem",
                onmouseout: function () {
                  cd();
                },
                parent: Ra
              });
              a.style.backgroundImage = pa("actionBarItem" + c).style.backgroundImage;
              Cc.push(c);
            }
          }
          for (let e = 0; e < Ec.list.length; ++e) {
            if (Ec.list[e].age == d && (L || Ec.list[e].pre == undefined || ng.items.indexOf(Ec.list[e].pre) >= 0)) {
              let a = Ec.weapons.length + e;
              let b = Dc.generateElement({
                id: "upgradeItem" + a,
                class: "actionBarItem",
                onmouseout: function () {
                  cd();
                },
                parent: Ra
              });
              b.style.backgroundImage = pa("actionBarItem" + a).style.backgroundImage;
              Cc.push(a);
            }
          }
          for (let b = 0; b < Cc.length; b++) {
            (function (c) {
              let a = pa("upgradeItem" + c);
              a.onmouseover = function () {
                if (Ec.weapons[c]) {
                  cd(Ec.weapons[c], true);
                } else {
                  cd(Ec.list[c - Ec.weapons.length]);
                }
              };
              a.onclick = Dc.checkTrusted(function () {
                jg("H", c);
              });
              Dc.hookTouchEvents(a);
            })(Cc[b]);
          }
          if (Cc.length) {
            Ra.style.display = "block";
            Sa.style.display = "block";
            Sa.innerHTML = "SELECT ITEMS (" + c + ")";
          } else {
            Ra.style.display = "none";
            Sa.style.display = "none";
            cd();
          }
        } else {
          Ra.style.display = "none";
          Sa.style.display = "none";
          cd();
        }
      }
      function Wd(c, a) {
        try {
          return Math.hypot((a.y2 || a.y) - (c.y2 || c.y), (a.x2 || a.x) - (c.x2 || c.x));
        } catch (b) {
          return Infinity;
        }
      }
      function Xd(c, a) {
        try {
          return Math.atan2((a.y2 || a.y) - (c.y2 || c.y), (a.x2 || a.x) - (c.x2 || c.x));
        } catch (b) {
          return 0;
        }
      }
      function Yd(g = 0, a = 1, b, c = 1) {
        let d = [];
        for (let e = g; e < a; e += c) {
          d.push(e);
          if (typeof b == "function") {
            b(e);
          }
        }
        return d;
      }
      function Zd(c) {
        var a = c * Math.PI / 180 % (Math.PI * 2);
        if (a > Math.PI) {
          return Math.PI - a;
        } else {
          return a;
        }
      }
      function $d(c) {
        var a = c / Math.PI * 360 % 360;
        if (a >= 360) {
          return a - 360;
        } else {
          return a;
        }
      }
      function _d(c, a) {
        try {
          return Math.hypot((a.y2 || a.y) - (c.y2 || c.y), (a.x2 || a.x) - (c.x2 || c.x));
        } catch (b) {
          return Infinity;
        }
      }
      function ae(c) {
        let m = Fa(c);
        Fc.disableBySid(c);
        if (m && Wd(ng, m) < 200 && rg.length > 0) {
          let b = sg;
          let o = ng;
          let a = Wd(o, b);
          let c = Xd(o, b);
          let e = Xd(ng, c + 180);
          let f = [0, 0];
          let p = Math.atan2(m.y - ng.y2, m.x - ng.x2);
          let d = Math.hypot(m.y - ng.y2, m.x - ng.x2);
          let g = mg.filter(b => b.trap && b.active && b.isTeamObject(ng) && Dc.getDist(b, sg, 0, 2) <= sg.scale + b.getScale() + 5);
          let h = mg.find(b => b.dmg && b.active && b.isTeamObject(ng) && Dc.getDist(b, sg, 0, 2) < 87 && !g);
          let i = h ? 4 : 2;
          if (d <= 190 && sg.dist2 <= 188 && i != 4 && !Mc.checkSpikeTick()) {
            Nc.canSpikeTick = true;
            Nc.syncHit = true;
          }
          if (a < 200) {
            for (let b = 0; b < Math.PI; b += i === 4 || i === 2 && !Mc.checkSpikeTick() ? Zd(Ec.list[o.items[2]].scale) + 0.6 : Math.PI) {
              let a = false;
              if (!f[0]) {
                n = true;
                for (let a = 0; a < Math.PI * 0.7; a += i === 4 || i === 2 && !Mc.checkSpikeTick() ? 0.9274 : Math.PI * 0.7) {
                  let d = _d(m, o) <= 87 && _d(m, o) > 35 ? p : (c * 0.5 || e * 0.5) + b / Math.PI + a;
                  cc(i, d);
                  if (d === p) {
                    cc(i, (c * 0.5 || e * 0.5) + b / Math.PI + a);
                  } else {
                    cc(i, p);
                  }
                }
                f[0] = Math.ceil(Ec.list[o.items[2]].scale / $d(Math.PI / 12));
              }
              if (a) {
                f[1] = Math.ceil(Ec.list[o.items[2]].scale / $d(Math.PI / 12));
              }
              if (Dc.getAngleDist(c + b, c - b) > Zd(Ec.list[o.items[2]].scale)) {
                if (!f[1]) {
                  n = true;
                  let a = _d(m, o) <= 87 && _d(m, o) > 35 ? p : c - b;
                  cc(i, a);
                  if (a === p) {
                    cc(i, c - b);
                  } else {
                    cc(i, p);
                  }
                  f[1] = Math.ceil(Ec.list[o.items[2]].scale / $d(Math.PI / 12));
                }
              }
            }
            for (let b of mc) {
              let a = JSON.parse(b);
              let c = Math.hypot(a[0] - m.x, a[1] - m.y);
              if (c <= 80) {
                mc.delete(b);
                break;
              }
            }
          }
        }
      }
      function be(b) {
        if (ng) {
          Fc.removeAllItems(b);
        }
      }
      let ce = {
        tick: 0,
        delay: 0,
        time: [],
        manage: []
      };
      function de(c, a) {
        if (!ce.manage[ce.tick + a]) {
          ce.manage[ce.tick + a] = [c];
        } else {
          ce.manage[ce.tick + a].push(c);
        }
      }
      function ee(b) {
        ge.push(b);
      }
      function fe() {}
      let ge = [];
      let Xg;
      function Yg(d) {
        if (ce.tick % 300 === 0) {
          ne.max = window.pingTime;
          ne.min = window.pingTime;
        }
        gg.tick++;
        qg = [];
        rg = [];
        sg = [];
        gg.tickSpeed = performance.now() - gg.lastTick;
        gg.lastTick = performance.now();
        ce.tick++;
        ce.time.push(Date.now() - ce.delay <= 50 || Date.now() - ce.delay >= 175 ? "lag" : 1);
        if (ce.tick % 10 === 0) {
          ce.time = [];
        }
        if (ce.tick % 300 === 0) {}
        ce.delay = Date.now();
        la.forEach(b => {
          b.forcePos = !b.visible;
          b.visible = false;
        });
        for (let b = 0; b < d.length;) {
          pg = Da(d[b]);
          if (pg) {
            pg.t1 = pg.t2 === undefined ? gg.lastTick : pg.t2;
            pg.t2 = gg.lastTick;
            pg.oldPos.x2 = pg.x2;
            pg.oldPos.y2 = pg.y2;
            pg.x1 = pg.x;
            pg.y1 = pg.y;
            pg.x2 = d[b + 1];
            pg.y2 = d[b + 2];
            pg.x3 = pg.x2 + (pg.x2 - pg.oldPos.x2);
            pg.y3 = pg.y2 + (pg.y2 - pg.oldPos.y2);
            pg.d1 = pg.d2 === undefined ? d[b + 3] : pg.d2;
            pg.d2 = d[b + 3];
            pg.dt = 0;
            pg.buildIndex = d[b + 4];
            pg.weaponIndex = d[b + 5];
            pg.weaponVariant = d[b + 6];
            pg.team = d[b + 7];
            pg.isLeader = d[b + 8];
            pg.oldSkinIndex = pg.skinIndex;
            pg.oldTailIndex = pg.tailIndex;
            pg.skinIndex = d[b + 9];
            pg.tailIndex = d[b + 10];
            pg.iconIndex = d[b + 11];
            pg.zIndex = d[b + 12];
            pg.visible = true;
            pg.update(gg.tickSpeed);
            pg.dist2 = Dc.getDist(pg, ng, 2, 2);
            pg.aim2 = Dc.getDirect(pg, ng, 2, 2);
            pg.dist3 = Dc.getDist(pg, ng, 3, 3);
            pg.aim3 = Dc.getDirect(pg, ng, 3, 3);
            pg.damageThreat = 0;
            if (pg.skinIndex == 45 && pg.shameTimer <= 0) {
              pg.addShameTimer();
            }
            if (pg.oldSkinIndex == 35 && pg.skinIndex != 45) {
              pg.shameTimer = 0;
              pg.shameCount = 0;
              if (pg == ng) {
                gc();
              }
            }
            Xg = pg;
            if (pg == ng) {
              if (mg.length) {
                mg.forEach(b => {
                  b.onNear = false;
                  if (b.active) {
                    if (!b.onNear && Dc.getDist(b, pg, 0, 2) <= b.scale + Ec.weapons[pg.weapons[0]].range) {
                      b.onNear = true;
                    }
                    if (b.isItem && b.owner && !b.pps && pg.sid == b.owner.sid && Dc.getDist(b, pg, 0, 2) > (parseInt(pa("breakRange").value) || 0) && !b.breakObj && ![13, 14, 20].includes(b.id)) {
                      b.breakObj = true;
                      sa.push({
                        x: b.x,
                        y: b.y,
                        sid: b.sid
                      });
                    }
                  }
                });
                let b = mg.filter(b => b.trap && b.active && Dc.getDist(b, pg, 0, 2) <= pg.scale + b.getScale() + 5 && !b.isTeamObject(pg)).sort(function (c, a) {
                  return Dc.getDist(c, pg, 0, 2) - Dc.getDist(a, pg, 0, 2);
                })[0];
                if (b) {
                  Mc.dist = Dc.getDist(b, pg, 0, 2);
                  Mc.aim = Dc.getDirect(b, pg, 0, 2);
                  if (!Mc.inTrap) {
                    Mc.protect(Mc.aim);
                  }
                  Mc.inTrap = true;
                  Mc.info = b;
                } else {
                  Mc.inTrap = false;
                  Mc.info = {};
                }
              } else {
                Mc.inTrap = false;
              }
            }
            if (pg.weaponIndex < 9) {
              pg.primaryIndex = pg.weaponIndex;
              pg.primaryVariant = pg.weaponVariant;
            } else if (pg.weaponIndex > 8) {
              pg.secondaryIndex = pg.weaponIndex;
              pg.secondaryVariant = pg.weaponVariant;
            }
          }
          b += 13;
        }
        if (ge.length) {
          ge.forEach(b => {
            b();
          });
          ge = [];
        }
        if ($c.length) {
          $c.forEach(b => {
            Sg(...b);
          });
          $c = [];
        }
        if (Lc.stack.length) {
          let b = 0;
          let c = 0;
          let d = {
            x: null,
            y: null
          };
          let e = {
            x: null,
            y: null
          };
          Lc.stack.forEach(f => {
            if (f.value >= 0) {
              if (b == 0) {
                d = {
                  x: f.x,
                  y: f.y
                };
              }
              b += Math.abs(f.value);
            } else {
              if (c == 0) {
                e = {
                  x: f.x,
                  y: f.y
                };
              }
              c += Math.abs(f.value);
            }
          });
          if (c > 0) {}
          if (b > 0) {}
          Lc.stack = [];
        }
        if ($c.length) {
          $c.forEach(b => {
            Sg(...b);
          });
          $c = [];
        }
        for (let b = 0; b < d.length;) {
          pg = Da(d[b]);
          if (pg) {
            if (!pg.isTeam(ng)) {
              qg.push(pg);
              if (pg.dist2 <= Ec.weapons[pg.primaryIndex == undefined ? 5 : pg.primaryIndex].range + ng.scale * 2) {
                rg.push(pg);
              }
            }
            pg.manageReload();
            if (pg != ng) {
              pg.addDamageThreat(ng);
            }
          }
          b += 13;
        }
        if (ng && ng.alive) {
          if (qg.length) {
            sg = qg.sort(function (c, a) {
              return c.dist2 - a.dist2;
            })[0];
          } else {}
          if (gg.tickQueue[gg.tick]) {
            gg.tickQueue[gg.tick].forEach(b => {
              b();
            });
            gg.tickQueue[gg.tick] = null;
          }
          if (uc.length) {
            uc.forEach(f => {
              let a = f[0];
              let b = f[1];
              let h = f[2];
              pg = Da(a);
              let d = false;
              if (pg && pg.health <= 0 && !pg.death) {
                pg.death = true;
                if (pg != ng) {
                  Rd("", pg.name + " " + se(), "red");
                }
                Gd(pg);
              }
              if (pg == ng) {
                if (pg.skinIndex == 7 && (h == 5 || pg.latestTail == 13 && h == 2)) {
                  if (tg.reSync) {
                    tg.reSync = false;
                    pg.setBullTick = true;
                  }
                  d = true;
                }
                if (Ig) {
                  let e = fc(h);
                  let a = [0.15, 0.45].map(b => b * Ec.weapons[ng.weapons[0]].dmg * ec());
                  let b = !d && a.includes(h);
                  let c = 80 - window.ping;
                  let f = function (b) {
                    setTimeout(() => {
                      gc();
                    }, b);
                  };
                  if (h >= (b ? 8 : 20) && pg.damageThreat >= 25 && gg.tick - pg.antiTimer > 1) {
                    pg.canEmpAnti = true;
                    pg.antiTimer = gg.tick;
                    let b = 5;
                    if (pg.shameCount < b) {
                      gc();
                    } else {
                      f(c);
                    }
                  } else {
                    f(c);
                  }
                  if (h >= 20 && ng.skinIndex == 11) {
                    Nc.canCounter = true;
                  }
                }
              } else if (!pg.setPoisonTick && (pg.damaged == 5 || pg.latestTail == 13 && pg.damaged == 2)) {
                pg.setPoisonTick = true;
              }
            });
            uc = [];
          }
          la.forEach(b => {
            if (!b.visible && ng != b) {
              b.reloads = {
                0: 0,
                1: 0,
                2: 0,
                3: 0,
                4: 0,
                5: 0,
                6: 0,
                7: 0,
                8: 0,
                9: 0,
                10: 0,
                11: 0,
                12: 0,
                13: 0,
                14: 0,
                15: 0,
                53: 0
              };
            }
            if (b.setBullTick) {
              b.bullTimer = 0;
            }
            if (b.setPoisonTick) {
              b.poisonTimer = 0;
            }
            b.updateTimer();
          });
          if (Ig) {
            if (qg.length) {
              if (ng.canEmpAnti) {
                ng.canEmpAnti = false;
                if (sg.dist2 <= 300 && !tg.safePrimary(sg) && !tg.safeSecondary(sg)) {
                  if (sg.reloads[53] == 0) {
                    ng.empAnti = true;
                    ng.soldierAnti = false;
                  } else {
                    ng.empAnti = false;
                    ng.soldierAnti = true;
                  }
                }
              }
              let e = null;
              let a = Infinity;
              for (let b of mg) {
                if (b.dmg && b.active && b.isTeamObject(ng)) {
                  let c = Dc.getDist(b, sg, 0, 3);
                  if (c <= b.scale + sg.scale && c < a) {
                    e = b;
                    a = c;
                  }
                }
              }
              if (e) {
                let c = Ec.weapons[ng.weapons[0]].range + ng.scale * 1.8;
                let a = sg.dist2 + sg.speed;
                if (a <= c && r.predictTick) {
                  Nc.canSpikeTick = true;
                  Nc.syncHit = true;
                  if (r.revTick && ng.weapons[1] == 15 && ng.reloads[53] == 0 && Nc.perfCheck(ng, sg)) {
                    Nc.revTick = true;
                  }
                }
              }
              let b = mg.filter(b => b.dmg && b.active && !b.isTeamObject(ng) && Dc.getDist(b, ng, 0, 3) < b.scale + ng.scale).sort(function (c, a) {
                return Dc.getDist(c, ng, 0, 2) - Dc.getDist(a, ng, 0, 2);
              })[0];
              if (b && !Mc.inTrap && sg.dist2 <= Ec.weapons[5].range + sg.scale * 1.8) {
                tg.anti0Tick = 1;
              }
            }
            if ((eg ? true : (ng.checkCanInsta(true) >= 100 ? ng.checkCanInsta(true) : ng.checkCanInsta(false)) >= (ng.weapons[1] == 10 ? 75 : 100)) && sg.dist2 <= Ec.weapons[ng.weapons[1] == 10 ? ng.weapons[1] : ng.weapons[0]].range + sg.scale * 1.8 && (Nc.wait || eg && Math.floor(Math.random() * 5) == 0) && !Nc.isTrue && !tg.waitHit && ng.reloads[ng.weapons[0]] == 0 && ng.reloads[ng.weapons[1]] == 0 && (eg ? true : pa("instaType").value == "oneShot" ? ng.reloads[53] <= (ng.weapons[1] == 10 ? 0 : gg.tickRate) : true) && Nc.perfCheck(ng, sg)) {
              if (ng.checkCanInsta(true) >= 100) {
                Nc.nobull = eg ? false : Nc.canSpikeTick ? false : true;
              } else {
                Nc.nobull = false;
              }
              Nc.can = true;
            } else {
              Nc.can = false;
            }
            if (Jg.q) {
              cc(0, md());
            }
            if (Jg.f) {
              cc(4, ld());
            }
            if (Jg.v) {
              cc(2, ld());
            }
            if (Jg.y) {
              cc(5, ld());
            }
            if (Jg.h) {
              cc(ng.getItemType(22), ld());
            }
            if (Jg.n) {
              cc(3, ld());
            }
            if (gg.tick % 2 == 0) {
              if (Kg.place) {
                let c = 1.25;
                for (let a = -c; a <= c; a += c) {
                  dc(3, Dc.getDirect(ng.oldPos, ng, 2, 2) + a);
                }
              } else if (Kg.placeSpawnPads) {
                for (let b = 0; b < Math.PI * 2; b += Math.PI / 2) {
                  dc(ng.getItemType(20), Dc.getDirect(ng.oldPos, ng, 2, 2) + b);
                }
              }
            }
            if (Nc.can) {
              Nc.changeType(ng.weapons[1] == 10 ? "rev" : Nc.nobull ? "nobull" : "normal");
            }
            if (Nc.canCounter) {
              Nc.canCounter = false;
              if (ng.reloads[ng.weapons[0]] == 0 && !Nc.isTrue) {
                Nc.counterType();
              }
            }
            if (Nc.canSpikeTick) {
              Nc.canSpikeTick = false;
              if (Nc.revTick) {
                Nc.revTick = false;
                if ([1, 2, 3, 4, 5, 6].includes(ng.weapons[0]) && ng.reloads[ng.weapons[1]] == 0 && !Nc.isTrue) {
                  Nc.changeType("rev");
                  Rd("Mod", "Rev SyncHit", "lightBlue");
                }
              } else if ([1, 2, 3, 4, 5, 6].includes(ng.weapons[0]) && ng.reloads[ng.weapons[0]] == 0 && !Nc.isTrue) {
                Nc.spikeTickType();
                if (Nc.syncHit) {
                  Rd("Mod", "SyncHit", "lightBlue");
                }
              }
            }
            if (!gd.middle && (gd.left || gd.right) && !Nc.isTrue) {
              if (ng.weaponIndex != (gd.right && ng.weapons[1] == 10 ? ng.weapons[1] : ng.weapons[0]) || ng.buildIndex > -1) {
                $b(gd.right && ng.weapons[1] == 10 ? ng.weapons[1] : ng.weapons[0]);
              }
              if (ng.reloads[gd.right && ng.weapons[1] == 10 ? ng.weapons[1] : ng.weapons[0]] == 0 && !tg.waitHit) {
                _b();
                tg.waitHit = 1;
                gg.tickBase(() => {
                  _b();
                  tg.waitHit = 0;
                }, 1);
              }
            }
            if (eg && !gd.left && !gd.right && !Nc.isTrue && sg.dist2 <= Ec.weapons[ng.weapons[0]].range + sg.scale * 1.8 && !Mc.inTrap) {
              if (ng.weaponIndex != ng.weapons[0] || ng.buildIndex > -1) {
                $b(ng.weapons[0]);
              }
              if (ng.reloads[ng.weapons[0]] == 0 && !tg.waitHit) {
                _b();
                tg.waitHit = 1;
                gg.tickBase(() => {
                  _b();
                  tg.waitHit = 0;
                }, 1);
              }
            }
            if (Mc.inTrap && !gd.left && !gd.right && !Nc.isTrue) {
              if (ng.weaponIndex != (Mc.notFast() ? ng.weapons[1] : ng.weapons[0]) || ng.buildIndex > -1) {
                $b(Mc.notFast() ? ng.weapons[1] : ng.weapons[0]);
              }
              if (ng.reloads[Mc.notFast() ? ng.weapons[1] : ng.weapons[0]] == 0 && !tg.waitHit) {
                _b();
                tg.waitHit = 1;
                gg.tickBase(() => {
                  _b();
                  tg.waitHit = 0;
                }, 1);
              }
            }
            if (gd.middle && !Mc.inTrap && !Nc.isTrue && ng.reloads[ng.weapons[1]] == 0) {
              if (tg.ageInsta && ng.weapons[0] != 4 && ng.weapons[1] == 9 && ng.age >= 9 && qg.length) {
                Nc.bowMovement();
              } else {
                Nc.rangeType();
              }
            }
            if (Jg.t && !Mc.inTrap && !Nc.isTrue && ng.reloads[ng.weapons[0]] == 0 && (ng.weapons[1] == 15 ? ng.reloads[ng.weapons[1]] == 0 : true) && (ng.weapons[0] == 5 || ng.weapons[0] == 4 && ng.weapons[1] == 15)) {
              Nc[ng.weapons[0] == 4 && ng.weapons[1] == 15 ? "kmTickMovement" : "tickMovement"]();
            }
            if (Jg["."] && !Mc.inTrap && !Nc.isTrue && ng.reloads[ng.weapons[0]] == 0 && ([9, 12, 13, 15].includes(ng.weapons[1]) ? ng.reloads[ng.weapons[1]] == 0 : true)) {
              Nc.boostTickMovement();
            }
            if (ng.weapons[1] && !gd.left && !gd.right && !Mc.inTrap && !Nc.isTrue && (!eg || sg.dist2 > Ec.weapons[ng.weapons[0]].range + sg.scale * 1.8)) {
              if (ng.reloads[ng.weapons[0]] == 0 && ng.reloads[ng.weapons[1]] == 0) {
                if (!tg.reloaded) {
                  tg.reloaded = true;
                  let b = Ec.weapons[ng.weapons[0]].spdMult < Ec.weapons[ng.weapons[1]].spdMult ? 1 : 0;
                  if (ng.weaponIndex != ng.weapons[b] || ng.buildIndex > -1) {
                    $b(ng.weapons[b]);
                  }
                }
              } else {
                tg.reloaded = false;
                if (ng.reloads[ng.weapons[0]] > 0) {
                  if (ng.weaponIndex != ng.weapons[0] || ng.buildIndex > -1) {
                    $b(ng.weapons[0]);
                  }
                } else if (ng.reloads[ng.weapons[0]] == 0 && ng.reloads[ng.weapons[1]] > 0 && (ng.weaponIndex != ng.weapons[1] || ng.buildIndex > -1)) {
                  $b(ng.weapons[1]);
                }
              }
            }
            if (!Nc.isTrue && !Mc.inTrap && !Mc.replaced) {
              Mc.autoPlace();
            }
            if (!Jg.q && !Jg.f && !Jg.v && !Jg.h && !Jg.n) {
              jg("D", md());
            }
            let a = function () {
              if (tg.anti0Tick > 0) {
                Yb(6, 0);
              } else if (gd.left || gd.right) {
                if ((ng.shameCount > 0 && (gg.tick - ng.bullTick) % x.serverUpdateRate === 0 && ng.skinIndex != 45 || tg.reSync) && (sg.dist2 > 140 || !sg)) {
                  Yb(7, 0);
                  Yb(19, 1);
                } else if (gd.left) {
                  Yb(ng.reloads[ng.weapons[0]] == 0 ? pa("weaponGrind").checked ? 40 : 7 : ng.empAnti ? 22 : ng.soldierAnti ? 6 : pa("antiBullType").value == "abreload" && sg.antiBull > 0 ? 11 : sg.dist2 <= 300 ? pa("antiBullType").value == "abalway" && sg.reloads[sg.primaryIndex] == 0 ? 11 : 6 : sc(1, 1), 0);
                } else if (gd.right) {
                  Yb(ng.reloads[gd.right && ng.weapons[1] == 10 ? ng.weapons[1] : ng.weapons[0]] == 0 ? 40 : ng.empAnti ? 22 : ng.soldierAnti ? 6 : pa("antiBullType").value == "abreload" && sg.antiBull > 0 ? 11 : sg.dist2 <= 300 ? pa("antiBullType").value == "abalway" && sg.reloads[sg.primaryIndex] == 0 ? 11 : 6 : sc(1, 1), 0);
                }
              } else if (Mc.inTrap) {
                if (Mc.info.health <= Ec.weapons[ng.weaponIndex].dmg ? false : ng.reloads[ng.weapons[1] == 10 ? ng.weapons[1] : ng.weapons[0]] == 0) {
                  Yb(40, 0);
                  Yb(19, 1);
                } else if ((ng.shameCount > 0 && (gg.tick - ng.bullTick) % x.serverUpdateRate === 0 && ng.skinIndex != 45 || tg.reSync) && (sg.dist2 > 140 || !sg)) {
                  Yb(7, 0);
                  Yb(19, 1);
                } else {
                  Yb(ng.empAnti || sg.dist2 > 300 || !qg.length ? 22 : 6, 0);
                }
              } else if (ng.empAnti || ng.soldierAnti) {
                Yb(ng.empAnti ? 22 : 6, 0);
                Yb(19, 1);
              } else if ((ng.shameCount > 0 && (gg.tick - ng.bullTick) % x.serverUpdateRate === 0 && ng.skinIndex != 45 || tg.reSync) && (sg.dist2 > 140 || !sg)) {
                Yb(7, 0);
              } else if (sg.dist2 <= 300) {
                Yb(pa("antiBullType").value == "abreload" && sg.antiBull > 0 ? 11 : pa("antiBullType").value == "abalway" && sg.reloads[sg.primaryIndex] == 0 ? 11 : 6, 0);
                Yb(19, 1);
              } else {
                sc(1);
              }
            };
            let b = function () {
              if (gd.left || gd.right) {
                Yb(pa("antiBullType").value != "noab" ? 21 : gd.right ? 0 : ng.reloads[ng.weapons[0]] == 0 ? 0 : 0, 1);
              } else if (Mc.inTrap) {
                Yb(pa("antiBullType").value != "noab" ? 21 : 0, 1);
              } else if (sg.dist2 <= 560) {
                Yb(pa("antiBullType").value != "noab" ? 21 : 0, 1);
              } else {
                Yb(11, 1);
              }
            };
            let c = function () {
              if (tg.anti0Tick > 0) {
                Yb(6, 0);
              } else if (gd.left || gd.right) {
                if (ng.shameCount > 0 && (gg.tick - ng.bullTick) % x.serverUpdateRate === 0 && ng.skinIndex != 45 || tg.reSync) {
                  Yb(7, 0);
                } else if (gd.left) {
                  Yb(ng.reloads[ng.weapons[0]] == 0 ? pa("weaponGrind").checked ? 40 : 7 : ng.empAnti ? 22 : 6, 0);
                } else if (gd.right) {
                  Yb(ng.reloads[gd.right && ng.weapons[1] == 10 ? ng.weapons[1] : ng.weapons[0]] == 0 ? 40 : ng.empAnti ? 22 : 6, 0);
                }
              } else if (sg.dist2 <= Ec.weapons[ng.weapons[0]].range + sg.scale * 1.8 && !Mc.inTrap) {
                if (ng.shameCount > 0 && (gg.tick - ng.bullTick) % x.serverUpdateRate === 0 && ng.skinIndex != 45 || tg.reSync) {
                  Yb(7, 0);
                } else {
                  Yb(ng.reloads[ng.weapons[0]] == 0 ? 7 : ng.empAnti ? 22 : 6, 0);
                }
              } else if (Mc.inTrap) {
                if (Mc.info.health <= Ec.weapons[ng.weaponIndex].dmg ? false : ng.reloads[ng.weapons[1] == 10 ? ng.weapons[1] : ng.weapons[0]] == 0) {
                  Yb(40, 0);
                  Yb(19, 1);
                } else if (ng.shameCount > 0 && (gg.tick - ng.bullTick) % x.serverUpdateRate === 0 && ng.skinIndex != 45 || tg.reSync) {
                  Yb(7, 0);
                } else {
                  Yb(sg && sg.weapons[0] === 7 ? 26 : 6, 0);
                }
              } else if (ng.empAnti) {
                Yb(22, 0);
                Yb(19, 1);
              } else if (ng.shameCount > 0 && (gg.tick - ng.bullTick) % x.serverUpdateRate === 0 && ng.skinIndex != 45 || tg.reSync) {
                Yb(7, 0);
              } else {
                Yb(6, 0);
                Yb(19, 1);
              }
              if (gd.left || gd.right) {
                if (gd.left) {
                  Yb(0, 1);
                } else if (gd.right) {
                  Yb(0, 1);
                }
              } else if (sg.dist2 <= Ec.weapons[ng.weapons[0]].range + sg.scale * 1.8 && !Mc.inTrap) {
                Yb(0, 1);
              } else if (Mc.inTrap) {
                Yb(0, 1);
              } else if (sg.dist2 <= 260) {
                Yb(0, 1);
              } else {
                Yb(11, 1);
              }
            };
            if (Pa.style.display != "block" && !Nc.isTrue && !Nc.ticking) {
              if (eg) {
                c();
              } else {
                a();
                b();
              }
            }
            if (r.autoPush && qg.length && !Mc.inTrap && !Nc.ticking) {
              autoPush();
            } else if (tg.autoPush) {
              tg.autoPush = false;
              jg("a", ca || undefined, 1);
            }
            if (!tg.autoPush && Rg.active) {
              Dd();
            }
            Nc.ticking &&= false;
            Nc.syncHit &&= false;
            ng.empAnti &&= false;
            ng.soldierAnti &&= false;
            if (tg.anti0Tick > 0) {
              tg.anti0Tick--;
            }
            Mc.replaced &&= false;
            Mc.antiTrapped &&= false;
          }
        }
        if (c.length) {
          c.forEach(b => {
            if (true) {
              b[0].ssend("player", ng, sg, $f);
            }
          });
        }
      }
      function je(d) {
        Dc.removeAllChildren(Wa);
        var a = 1;
        for (var e = 0; e < d.length; e += 3) {
          (function (a) {
            Dc.generateElement({
              class: "leaderHolder",
              parent: Wa,
              children: [Dc.generateElement({
                class: "leaderboardItem",
                style: d[a] == ng.sid ? "color: rgba(255,255,255,1); font-size: 18px;" : "color: rgba(255,255,255,0.6); font-size: 18px; padding: 1px;",
                text: d[a + 1] != "" ? d[a + 1] : "unknown"
              }), Dc.generateElement({
                class: "a",
                style: d[a] == ng.sid ? "color: rgba(255,255,255,1); font-size: 18px;" : "color: rgba(255,255,255,0.6); font-size: 18px; padding: 1px;",
                text: "‎ " + Dc.kFormat(d[a + 2]) || "‎ 0"
              })]
            });
          })(e);
          a++;
        }
      }
      function ke(c) {
        for (let a = 0; a < c.length;) {
          Fc.add(c[a], c[a + 1], c[a + 2], c[a + 3], c[a + 4], c[a + 5], Ec.list[c[a + 6]], true, c[a + 7] >= 0 ? {
            sid: c[a + 7]
          } : null);
          a += 8;
        }
      }
      function le(a) {
        for (let b = 0; b < ka.length; ++b) {
          ka[b].forcePos = !ka[b].visible;
          ka[b].visible = false;
        }
        if (a) {
          let b = performance.now();
          for (let c = 0; c < a.length;) {
            pg = Ea(a[c]);
            if (pg) {
              pg.index = a[c + 1];
              pg.t1 = pg.t2 === undefined ? b : pg.t2;
              pg.t2 = b;
              pg.x1 = pg.x;
              pg.y1 = pg.y;
              pg.x2 = a[c + 2];
              pg.y2 = a[c + 3];
              pg.d1 = pg.d2 === undefined ? a[c + 4] : pg.d2;
              pg.d2 = a[c + 4];
              pg.health = a[c + 5];
              pg.dt = 0;
              pg.visible = true;
            } else {
              pg = Kc.spawn(a[c + 2], a[c + 3], a[c + 4], a[c + 1]);
              pg.x2 = pg.x;
              pg.y2 = pg.y;
              pg.d2 = pg.dir;
              pg.health = a[c + 5];
              if (!Kc.aiTypes[a[c + 1]].name) {
                pg.name = x.cowNames[a[c + 6]];
              }
              pg.forcePos = true;
              pg.sid = a[c];
              pg.visible = true;
            }
            c += 7;
          }
        }
      }
      function me(b) {
        pg = Ea(b);
        if (pg) {
          pg.startAnim();
        }
      }
      let ne = {
        avg: 0,
        max: 0,
        min: 0,
        delay: 0
      };
      function oe(a, b, f) {
        pg = Da(a);
        if (pg) {
          pg.startAnim(b, f);
          pg.gatherIndex = f;
          pg.gathering = 1;
          if (b) {
            let b = Fc.hitObj;
            Fc.hitObj = [];
            gg.tickBase(() => {
              pg = Da(a);
              let c = Ec.weapons[f].dmg * x.weaponVariants[pg[(f < 9 ? "prima" : "seconda") + "ryVariant"]].val * (Ec.weapons[f].sDmg || 1) * (pg.skinIndex == 40 ? 3.3 : 1);
              b.forEach(b => {
                b.health -= c;
              });
            }, 1);
          }
        }
      }
      function pe(a, b) {
        pg = Fa(b);
        if (pg) {
          pg.xWiggle += x.gatherWiggle * Math.cos(a);
          pg.yWiggle += x.gatherWiggle * Math.sin(a);
          if (pg.health) {
            Fc.hitObj.push(pg);
          }
        }
      }
      function qe(a, b) {
        pg = Fa(a);
        if (pg) {
          if (x.anotherVisual) {
            pg.lastDir = b;
          } else {
            pg.dir = b;
          }
          pg.xWiggle += x.gatherWiggle * Math.cos(b + Math.PI);
          pg.yWiggle += x.gatherWiggle * Math.sin(b + Math.PI);
        }
      }
      function re() {
        const b = ["Sieg Heil", "Blitzkrieg 1939", "NORTH AFRICAN CAMPAIGN", "Battle of France 1940", "Battle of Stalingrad", "Battle of Normandy", "Battle of Britain 1940", "Zwei Frontenkrieg", "Stellungskrieg", "The Fuehrer", "Final Solution", "Field Marshal Erwin Rommel", "Operation Barbarossa", "Enigma Machine", "Volkssturm", "Wolfpack Tactics", "Maginot Line", "Nuremberg Laws", "V-2 Rocket", "Operation Valkyrie", "Hitler Youth", "Einsatzgruppen", "The Night of the Long Knives", "Battle of the Bulge", "Invasion of Norway and Denmark", "Operation Weseruebung", "The \"Channel Dash\"", "Fall Blau 1942"];
        return b[Math.floor(Math.random() * b.length)];
      }
      function se() {
        const b = ["were slain...", "met their demise...", "life was extinguished...", "perished...", "were overwhelmed...", "were defeated...", "were vanquished...", "bit the dust...", "met a tragic end...", "were obliterated...", "met a gruesome fate...", "were eradicated...", "were annihilated...", "were crushed...", "were overwhelmed...", "were turned to ash...", "were reduced to rubble...", "were shattered...", "were disintegrated...", "were torn apart...", "were consumed by darkness...", "were consumed by the void...", "were consumed by the abyss...", "were consumed by chaos...", "were consumed by despair...", "were consumed by madness...", "were consumed by the unknown...", "were consumed by the shadows..."];
        return b[Math.floor(Math.random() * b.length)];
      }
      function te(d, a, b) {
        if (ng) {
          ng[d] = a;
          if (d == "points") {
            if (r.autoBuy) {
              Oc.hat();
              Oc.acc();
            }
          } else if (d == "kills" && r.killChat) {
            Zc(re());
          }
        }
      }
      function ue(d, a) {
        if (d) {
          if (a) {
            ng.weapons = d;
            ng.primaryIndex = ng.weapons[0];
            ng.secondaryIndex = ng.weapons[1];
            if (!Nc.isTrue) {
              $b(ng.weapons[0]);
            }
          } else {
            ng.items = d;
          }
        }
        for (let b = 0; b < Ec.list.length; b++) {
          let c = Ec.weapons.length + b;
          pa("actionBarItem" + c).style.display = ng.items.indexOf(Ec.list[b].id) >= 0 ? "inline-block" : "none";
        }
        for (let b = 0; b < Ec.weapons.length; b++) {
          pa("actionBarItem" + b).style.display = ng.weapons[Ec.weapons[b].type] == Ec.weapons[b].id ? "inline-block" : "none";
        }
        let b = ng.weapons[0] == 3 && ng.weapons[1] == 15;
        if (b) {
          pa("actionBarItem3").style.display = "none";
          pa("actionBarItem4").style.display = "inline-block";
        }
      }
      function ve(i, a, b, c, d, e, f, g) {
        Jc.addProjectile(i, a, b, c, d, e, null, null, f, Lg).sid = g;
        $c.push(Array.prototype.slice.call(arguments));
      }
      function we(d, e) {
        for (let f = 0; f < qa.length; ++f) {
          if (qa[f].sid == d) {
            qa[f].range = e;
            let c = Fc.hitObj;
            Fc.hitObj = [];
            gg.tickBase(() => {
              let d = qa[f].dmg;
              c.forEach(b => {
                if (b.projDmg) {
                  b.health -= d;
                }
              });
            }, 1);
          }
        }
      }
      function xe(d, a) {
        let b = Ba(Ee, d);
        if (b) {}
      }
      function ye(c, a) {
        if (ng) {
          ng.team = c;
          ng.isOwner = a;
          if (c == null) {
            lg = [];
          }
        }
      }
      function ze(b) {
        lg = b;
      }
      function Ae(d, a, b) {
        if (b) {
          if (!d) {
            ng.tails[a] = 1;
          } else {
            ng.latestTail = a;
          }
        } else if (!d) {
          ng.skins[a] = 1;
          if (a == 7) {
            tg.reSync = true;
          }
        } else {
          ng.latestSkin = a;
        }
      }
      function Be(a, b) {
        let h = Da(a);
        if (b === "s12345678s123" && ng.reloads[ng.weapons[0]] == 0 && ng.reloads[ng.weapons[1]] == 0) {
          tg.autoAim = true;
          $b(ng.weapons[0]);
          Yb(7, 0);
          _b();
          gg.tickBase(() => {
            $b(ng.weapons[1]);
            Yb(ng.reloads[53] == 0 ? 53 : 6, 0);
            gg.tickBase(() => {
              _b();
              this.isTrue = false;
              tg.autoAim = false;
            }, 1);
          }, 1);
        }
        let d = 0;
        let i = false;
        if (document.getElementById("aichatbot").checked && h.sid !== ng.sid && !i) {
          d++;
          i = true;
          const e = h.chatMessage;
          const a = "https://lollo.andorrturtle.repl.co/get_response";
          console.log(a);
          const f = new XMLHttpRequest();
          f.open("POST", a, true);
          f.setRequestHeader("Content-Type", "application/json");
          f.onreadystatechange = function () {
            if (f.readyState == 4 && f.status == 200) {
              const b = JSON.parse(f.responseText);
              let c = b.cnt;
              var g = [];
              while (c.length > 24) {
                let a = c.substring(0, 24);
                a = a.replace(/\b(ing)\b/g, "in'");
                a = a.replace(/\b(you)\b/g, " yoo ");
                a = a.replace(/\b(Hello)\b/g, " Ugga ");
                a = a.replace(/\b(are)\b/g, "");
                a = a.replace(/\b(today)\b/g, " todae ");
                a = a.replace(/\b(angry)\b/g, " ANGERY ");
                a = a.replace(/\b(I )\b/g, " Me ");
                a = a.replace(/\b(I'm)\b/g, " Me am ");
                a = a.replace(/\b(my)\b/g, " Me's ");
                a = a.replace(/\b(good)\b/g, " gud ");
                a = a.replace(/\b(bad)\b/g, " bad ");
                a = a.replace(/\b(great)\b/g, " grate ");
                a = a.replace(/\b(how)\b/g, " how ");
                a = a.replace(/\b(fine)\b/g, " fine ");
                a = a.replace(/\b(Thank you)\b/g, " Thank ");
                a = a.replace(/\b(Thank)\b/g, " Tank ");
                a = a.replace(/\b(very)\b/g, " varee ");
                a = a.replace(/\b(well)\b/g, " well ");
                a = a.replace(/\b(happy)\b/g, " happee ");
                a = a.replace(/\b(cool)\b/g, " coo ");
                a = a.replace(/\b(yes)\b/g, " yep ");
                a = a.replace(/\b(no)\b/g, " nope ");
                a = a.replace(/\b(sad)\b/g, " saad ");
                a = a.replace(/\b(mad)\b/g, " mad ");
                a = a.replace(/\b(laugh)\b/g, " hehe ");
                a = a.replace(/\b(what)\b/g, " wat ");
                a = a.replace(/\b(why)\b/g, " whai ");
                a = a.replace(/\b(where)\b/g, " ware ");
                a = a.replace(/\b(who)\b/g, " hoo ");
                a = a.replace(/\b(quick)\b/g, " quik ");
                a = a.replace(/\b(slow)\b/g, " sloo ");
                a = a.replace(/\b(yay)\b/g, " yay ");
                a = a.replace(/\b(sad)\b/g, " saad ");
                a = a.replace(/\b(anger)\b/g, " ANGERY ");
                a = a.replace(/\b(great)\b/g, " grate ");
                g.push(a);
                c = c.substring(24);
              }
              if (c.length > 0) {
                c = c.replace(/ing/g, "in'");
                c = c.replace(/you/g, " yoo ");
                c = c.replace(/\b(Hello)\b/g, " Ooga Booga ");
                c = c.replace(/\b(are)\b/g, "");
                c = c.replace(/\b(today)\b/g, " todae ");
                c = c.replace(/\b(angry)\b/g, " ME EAT YOO ");
                c = c.replace(/\b(I )\b/g, " Me ");
                c = c.replace(/\b(I'm)\b/g, " Me am ");
                c = c.replace(/\b(my)\b/g, " Me's ");
                c = c.replace(/\b(good)\b/g, " gud ");
                c = c.replace(/\b(bad)\b/g, " bad ");
                c = c.replace(/\b(great)\b/g, " grate ");
                c = c.replace(/\b(how)\b/g, " how ");
                c = c.replace(/\b(fine)\b/g, " fine ");
                c = c.replace(/\b(Thank you)\b/g, " Thank ");
                c = c.replace(/\b(Thank)\b/g, " Tank ");
                c = c.replace(/\b(very)\b/g, " varee ");
                c = c.replace(/\b(well)\b/g, " well ");
                c = c.replace(/\b(happy)\b/g, " happee ");
                c = c.replace(/\b(cool)\b/g, " coo ");
                c = c.replace(/\b(yes)\b/g, " yep ");
                c = c.replace(/\b(no)\b/g, " nope ");
                c = c.replace(/\b(sad)\b/g, " saad ");
                c = c.replace(/\b(mad)\b/g, " mad ");
                c = c.replace(/\b(laugh)\b/g, " hehe ");
                c = c.replace(/\b(what)\b/g, " wat ");
                c = c.replace(/\b(why)\b/g, " whai ");
                c = c.replace(/\b(where)\b/g, " ware ");
                c = c.replace(/\b(who)\b/g, " hoo ");
                c = c.replace(/\b(quick)\b/g, " quik ");
                c = c.replace(/\b(slow)\b/g, " sloo ");
                c = c.replace(/\b(yay)\b/g, " yay ");
                c = c.replace(/\b(sad)\b/g, " saad ");
                c = c.replace(/\b(anger)\b/g, " ANGERY ");
                c = c.replace(/\b(great)\b/g, " grate ");
                g.push(c);
              }
              var a = 1;
              g.forEach(function (b, c) {
                setTimeout(function () {
                  ga.send("6", "AI: " + b);
                  if (c === g.length - 1) {
                    i = false;
                  }
                }, c * a);
                a = 1000;
              });
            } else {
              console.log("error");
            }
          };
          var j = {
            message: e
          };
          f.send(JSON.stringify(j));
        }
        if (h) {
          Rd(h.name + " {" + h.sid + "}", b, "white");
          if (x.anotherVisual) {
            kg.push(new Sb(h.x, h.y, b, h));
          } else {
            h.chatMessage = (f => {
              let g;
              Fb.forEach(a => {
                if (f.indexOf(a) > -1) {
                  g = "";
                  for (var b = 0; b < a.length; ++b) {
                    g += g.length ? "o" : "M";
                  }
                  var c = new RegExp(a, "g");
                  f = f.replace(c, g);
                }
              });
              return f;
            })(b);
            h.chatCountdown = x.chatCountdown;
            if (h) {}
            if (h.chatMessage == "Tsunami") {
              xc();
            }
          }
        } else {
          Rd("Anonymous {null}", b, "white");
        }
      }
      function Ce(b) {
        Og = b;
      }
      function De(e, a, b, c) {
        Lc.showText(e, a, 50, 0.68, 1850, Math.abs(b), b >= 0 ? "#fff" : "#8ecc51");
      }
      let Ee = [];
      let Zg = {
        x: Dc.randInt(35, 14365),
        y: Dc.randInt(35, 14365)
      };
      class Ge {
        constructor(a, b, c, d) {
          this.id = a;
          this.sid = b;
          this.team = null;
          this.skinIndex = 0;
          this.tailIndex = 0;
          this.hitTime = 0;
          this.iconIndex = 0;
          this.enemy = [];
          this.near = [];
          this.dist2 = 0;
          this.aim2 = 0;
          this.tick = 0;
          this.itemCounts = {};
          this.latestSkin = 0;
          this.latestTail = 0;
          this.points = 0;
          this.tails = {};
          for (let e = 0; e < d.length; ++e) {
            if (d[e].price <= 0) {
              this.tails[d[e].id] = 1;
            }
          }
          this.skins = {};
          for (let e = 0; e < c.length; ++e) {
            if (c[e].price <= 0) {
              this.skins[c[e].id] = 1;
            }
          }
          this.spawn = function (a) {
            this.upgraded = 0;
            this.enemy = [];
            this.near = [];
            this.active = true;
            this.alive = true;
            this.lockMove = false;
            this.lockDir = false;
            this.minimapCounter = 0;
            this.chatCountdown = 0;
            this.shameCount = 0;
            this.shameTimer = 0;
            this.sentTo = {};
            this.gathering = 0;
            this.autoGather = 0;
            this.animTime = 0;
            this.animSpeed = 0;
            this.mouseState = 0;
            this.buildIndex = -1;
            this.weaponIndex = 0;
            this.dmgOverTime = {};
            this.noMovTimer = 0;
            this.maxXP = 300;
            this.XP = 0;
            this.age = 1;
            this.kills = 0;
            this.upgrAge = 2;
            this.upgradePoints = 0;
            this.x = 0;
            this.y = 0;
            this.zIndex = 0;
            this.xVel = 0;
            this.yVel = 0;
            this.slowMult = 1;
            this.dir = 0;
            this.nDir = 0;
            this.dirPlus = 0;
            this.targetDir = 0;
            this.targetAngle = 0;
            this.maxHealth = 100;
            this.health = this.maxHealth;
            this.oldHealth = this.maxHealth;
            this.scale = x.playerScale;
            this.speed = x.playerSpeed;
            this.resetMoveDir();
            this.resetResources(a);
            this.items = [0, 3, 6, 10];
            this.weapons = [0];
            this.shootCount = 0;
            this.weaponXP = [];
            this.reloads = {};
            this.whyDie = "";
          };
          this.resetMoveDir = function () {
            this.moveDir = undefined;
          };
          this.resetResources = function (a) {
            for (let b = 0; b < x.resourceTypes.length; ++b) {
              this[x.resourceTypes[b]] = a ? 100 : 0;
            }
          };
          this.setData = function (b) {
            this.id = b[0];
            this.sid = b[1];
            this.name = b[2];
            this.x = b[3];
            this.y = b[4];
            this.dir = b[5];
            this.health = b[6];
            this.maxHealth = b[7];
            this.scale = b[8];
            this.skinColor = b[9];
          };
          this.closeSockets = function (b) {
            b.close();
          };
          this.whyDieChat = function (c, a) {
            c.sendWS("6", "XDDD why die " + a);
          };
        }
      }
      ;
      class He {
        constructor(b) {
          this.sid = b;
          this.init = function (h, a, b, c, d, e, i) {
            e = e || {};
            this.active = true;
            this.x = h;
            this.y = a;
            this.scale = c;
            this.owner = i;
            this.id = e.id;
            this.dmg = e.dmg;
            this.trap = e.trap;
            this.teleport = e.teleport;
            this.isItem = this.id != undefined;
          };
        }
      }
      ;
      class Ie {
        constructor(e, m) {
          this.disableObj = function (a) {
            a.active = false;
            if (x.anotherVisual) {} else {
              a.alive = false;
            }
          };
          let b;
          this.add = function (c, a, d, f, g, h, i, j, k) {
            b = m(c);
            if (!b) {
              b = e.find(b => !b.active);
              if (!b) {
                b = new He(c);
                e.push(b);
              }
            }
            if (j) {
              b.sid = c;
            }
            b.init(a, d, f, g, h, i, k);
          };
          this.disableBySid = function (c) {
            let a = m(c);
            if (a) {
              this.disableObj(a);
            }
          };
          this.removeAllItems = function (d, a) {
            e.filter(a => a.active && a.owner && a.owner.sid == d).forEach(b => this.disableObj(b));
          };
        }
      }
      ;
      function Je(a) {
        let l;
        if (L) {
          return;
          l = a && new WebSocket("wss://elon_musk_hentai.io/websocket");
        } else {
          l = a && new WebSocket(cg.url.split("&")[0] + "&token=" + encodeURIComponent(a));
        }
        let m = new Map();
        let n;
        let o = [];
        let f = [];
        let p = {
          x: 0,
          y: 0,
          inGame: false,
          closeSocket: false,
          whyDie: ""
        };
        let h = {
          x: 0,
          y: 0
        };
        let q = new Ie(o, function (b) {
          return Ba(o, b);
        });
        l.binaryType = "arraybuffer";
        l.first = true;
        l.sendWS = function (c) {
          let a = Array.prototype.slice.call(arguments, 1);
          let b = window.msgpack.encode([c, a]);
          l.send(b);
        };
        l.spawn = function () {
          l.sendWS("M", {
            name: "AAAAAAAAAAAAAAA",
            moofoll: 1,
            skin: "__proto__"
          });
        };
        l.sendUpgrade = function (b) {
          l.sendWS("H", b);
        };
        l.place = function (a, b) {
          try {
            let c = Ec.list[m.items[a]];
            if (m.itemCounts[c.group.id] == undefined ? true : m.itemCounts[c.group.id] < (x.isSandbox ? 99 : c.group.limit ? c.group.limit : 99)) {
              l.sendWS("G", m.items[a]);
              l.sendWS("d", 1, b);
              l.sendWS("G", m.weaponIndex, true);
            }
          } catch (b) {}
        };
        l.buye = function (c, a) {
          let d = 0;
          if (m.alive && m.inGame) {
            if (a == 0) {
              if (m.skins[c]) {
                if (m.latestSkin != c) {
                  l.sendWS("c", 0, c, 0);
                }
              } else {
                let a = Aa(Hc, c);
                if (a) {
                  if (m.points >= a.price) {
                    l.sendWS("c", 1, c, 0);
                    l.sendWS("c", 0, c, 0);
                  } else if (m.latestSkin != d) {
                    l.sendWS("c", 0, d, 0);
                  }
                } else if (m.latestSkin != d) {
                  l.sendWS("c", 0, d, 0);
                }
              }
            } else if (a == 1) {
              if (m.tails[c]) {
                if (m.latestTail != c) {
                  l.sendWS("c", 0, c, 1);
                }
              } else {
                let a = Aa(Ic, c);
                if (a) {
                  if (m.points >= a.price) {
                    l.sendWS("c", 1, c, 1);
                    l.sendWS("c", 0, c, 1);
                  } else if (m.latestTail != 0) {
                    l.sendWS("c", 0, 0, 1);
                  }
                } else if (m.latestTail != 0) {
                  l.sendWS("c", 0, 0, 1);
                }
              }
            }
          }
        };
        l.fastGear = function () {
          if (m.y2 >= x.mapScale / 2 - x.riverWidth / 2 && m.y2 <= x.mapScale / 2 + x.riverWidth / 2) {
            l.buye(31, 0);
          } else if (m.moveDir == undefined) {
            l.buye(22, 0);
          } else if (m.y2 <= x.snowBiomeTop) {
            l.buye(15, 0);
          } else {
            l.buye(12, 0);
          }
        };
        let b = function () {
          let c = function () {
            if (m.health == 100) {
              return 0;
            }
            if (m.skinIndex != 45 && m.skinIndex != 56) {
              return Math.ceil((100 - m.health) / Ec.list[m.items[0]].healing);
            }
            return 0;
          };
          for (let a = 0; a < c(); a++) {
            l.place(0, m.nDir);
          }
        };
        l.onmessage = function (c) {
          let d = new Uint8Array(c.data);
          let a = window.msgpack.decode(d);
          let e = a[0];
          d = a[1];
          if (e == "io-init") {
            l.spawn();
          }
          if (e == "1") {
            n = d[0];
          }
          if (e == "D" && d[1]) {
            m = new Ge(d[0][0], d[0][1], Hc, Ic);
            m.setData(d[0]);
            m.inGame = true;
            m.alive = true;
            m.x2 = undefined;
            m.y2 = undefined;
            m.spawn(1);
            h = {
              x: d[0][3],
              y: d[0][4]
            };
            p.inGame = true;
            l.sendWS("K", 1);
            if (l.first) {
              l.first = false;
              Ee.push(p);
            }
          }
          if (e == "P") {
            l.spawn();
            m.inGame = false;
            p.inGame = false;
          }
          if (e == "a") {
            let c = d[0];
            m.tick++;
            m.enemy = [];
            m.near = [];
            f = [];
            for (let a = 0; a < c.length;) {
              if (c[a] == m.sid) {
                m.x2 = c[a + 1];
                m.y2 = c[a + 2];
                m.d2 = c[a + 3];
                m.buildIndex = c[a + 4];
                m.weaponIndex = c[a + 5];
                m.weaponVariant = c[a + 6];
                m.team = c[a + 7];
                m.isLeader = c[a + 8];
                m.skinIndex = c[a + 9];
                m.tailIndex = c[a + 10];
                m.iconIndex = c[a + 11];
                m.zIndex = c[a + 12];
                m.visible = true;
                p.x2 = m.x2;
                p.y2 = m.y2;
              }
              a += 13;
            }
            if (p.closeSocket) {
              m.closeSockets(l);
            }
            if (p.whyDie != "") {
              m.whyDieChat(l, p.whyDie);
              p.whyDie = "";
            }
            if (m.alive) {
              if (ng.team && m.team != ng.team && m.tick % 9 === 0) {
                if (m.team) {
                  l.sendWS("N");
                }
                l.sendWS("b", ng.team);
              }
              if (m.inGame) {
                if (o.length > 0) {
                  if (sa.length > 0) {
                    let c = Dc.getDist(sa[0], m, 0, 2);
                    let a = Dc.getDirect(sa[0], m, 0, 2);
                    f = o.filter(b => b.active && (Ba(sa, b.sid) ? true : !b.trap || ng.sid != b.owner.sid && !ng.findAllianceBySid(b.owner.sid)) && b.isItem && Dc.getDist(b, m, 0, 2) <= Ec.weapons[m.weaponIndex].range + b.scale).sort(function (c, a) {
                      return Dc.getDist(c, m, 0, 2) - Dc.getDist(a, m, 0, 2);
                    })[0];
                    if (f) {
                      let b = Dc.getDist(sa[0], f, 0, 0);
                      if (c - b > 0) {
                        if (Ba(sa, f.sid) ? true : f.dmg || f.trap || f.teleport) {
                          if (m.moveDir != undefined) {
                            m.moveDir = undefined;
                            l.sendWS("a", m.moveDir);
                          }
                        } else {
                          m.moveDir = a;
                          l.sendWS("a", m.moveDir);
                        }
                        if (m.nDir != Dc.getDirect(f, m, 0, 2)) {
                          m.nDir = Dc.getDirect(f, m, 0, 2);
                          l.sendWS("D", m.nDir);
                        }
                        l.buye(40, 0);
                        l.buye(11, 1);
                      } else {
                        m.moveDir = a;
                        l.sendWS("a", m.moveDir);
                        l.fastGear();
                        l.buye(11, 1);
                      }
                    } else {
                      m.moveDir = a;
                      l.sendWS("a", m.moveDir);
                      l.fastGear();
                      l.buye(11, 1);
                    }
                    if (c > 300) {
                      if (Dc.getDist(h, m, 0, 2) > 90) {
                        let b = Dc.getDirect(h, m, 0, 2);
                        l.place(3, b + Math.PI / 2.3);
                        l.place(3, b - Math.PI / 2.3);
                        l.place(3, b);
                        h = {
                          x: m.x2,
                          y: m.y2
                        };
                      }
                    }
                  } else {
                    if (m.moveDir != undefined) {
                      m.moveDir = undefined;
                      l.sendWS("a", m.moveDir);
                    }
                    f = o.filter(b => b.active && (Ba(sa, b.sid) ? true : !b.trap || ng.sid != b.owner.sid && !ng.findAllianceBySid(b.owner.sid)) && b.isItem && Dc.getDist(b, m, 0, 2) <= Ec.weapons[m.weaponIndex].range + b.scale).sort(function (c, a) {
                      return Dc.getDist(c, m, 0, 2) - Dc.getDist(a, m, 0, 2);
                    })[0];
                    if (f) {
                      if (m.nDir != Dc.getDirect(f, m, 0, 2)) {
                        m.nDir = Dc.getDirect(f, m, 0, 2);
                        l.sendWS("D", m.nDir);
                      }
                      l.buye(40, 0);
                      l.buye(11, 1);
                    } else {
                      l.fastGear();
                      l.buye(11, 1);
                    }
                  }
                } else if (m.moveDir != undefined) {
                  m.moveDir = undefined;
                  l.sendWS("a", m.moveDir);
                }
              }
            }
          }
          if (e == "H") {
            let c = d[0];
            for (let a = 0; a < c.length;) {
              q.add(c[a], c[a + 1], c[a + 2], c[a + 3], c[a + 4], c[a + 5], Ec.list[c[a + 6]], true, c[a + 7] >= 0 ? {
                sid: c[a + 7]
              } : null);
              a += 8;
            }
          }
          if (e == "N") {
            let b = d[0];
            let a = d[1];
            if (m) {
              m[b] = a;
            }
          }
          if (e == "h" && d[0] == n) {
            m.oldHealth = m.health;
            m.health = d[1];
            m.judgeShame();
            if (m.oldHealth > m.health) {
              if (m.shameCount < 5) {
                b();
              } else {
                setTimeout(() => {
                  b();
                }, 70);
              }
            }
          }
          if (e == "Q") {
            let b = d[0];
            q.disableBySid(b);
          }
          if (e == "13") {
            let b = d[0];
            if (m.alive) {
              q.removeAllItems(b);
            }
          }
          if (e == "14") {
            let b = d[0];
            let a = d[1];
            if (m) {
              m.itemCounts[b] = a;
            }
          }
          if (e == "16") {
            if (d[0] > 0) {
              if (m.upgraded == 0) {
                l.sendUpgrade(3);
              } else if (m.upgraded == 1) {
                l.sendUpgrade(17);
              } else if (m.upgraded == 2) {
                l.sendUpgrade(31);
              } else if (m.upgraded == 3) {
                l.sendUpgrade(27);
              } else if (m.upgraded == 4) {
                l.sendUpgrade(9);
              } else if (m.upgraded == 5) {
                l.sendUpgrade(38);
              } else if (m.upgraded == 6) {
                l.sendUpgrade(4);
              } else if (m.upgraded == 7) {
                l.sendUpgrade(25);
              }
              m.upgraded++;
            }
          }
          if (e == "17") {
            let b = d[0];
            let a = d[1];
            if (b) {
              if (a) {
                m.weapons = b;
              } else {
                m.items = b;
              }
            }
            l.sendWS("G", m.weapons[0], true);
          }
          if (e == "us") {
            let b = d[0];
            let a = d[1];
            let c = d[2];
            if (c) {
              if (!b) {
                m.tails[a] = 1;
              } else {
                m.latestTail = a;
              }
            } else if (!b) {
              m.skins[a] = 1;
            } else {
              m.latestSkin = a;
            }
          }
        };
        l.onclose = function () {
          m.inGame = false;
          p.inGame = false;
        };
      }
      function Ke(i, a, b, c, d) {
        let e = i + b * Math.cos(c);
        let f = a + b * Math.sin(c);
        let g = b * 0.4;
        d.moveTo(i, a);
        d.beginPath();
        d.quadraticCurveTo((i + e) / 2 + g * Math.cos(c + Math.PI / 2), (a + f) / 2 + g * Math.sin(c + Math.PI / 2), e, f);
        d.quadraticCurveTo((i + e) / 2 - g * Math.cos(c + Math.PI / 2), (a + f) / 2 - g * Math.sin(c + Math.PI / 2), i, a);
        d.closePath();
        d.fill();
        d.stroke();
      }
      function Le(g, a, b, c, h, e) {
        c = c || Ma;
        c.beginPath();
        c.arc(g, a, b, 0, Math.PI * 2);
        if (!e) {
          c.fill();
        }
        if (!h) {
          c.stroke();
        }
      }
      function Me(g, a, b, c, h, e) {
        c = c || Ma;
        c.beginPath();
        c.arc(g, a, b, 0, Math.PI * 2);
        if (!e) {
          c.fill();
        }
        if (!h) {
          c.stroke();
        }
      }
      function Ne(i, a, b, c) {
        let d = Math.PI / 2 * 3;
        let j;
        let k;
        let l = Math.PI / a;
        i.beginPath();
        i.moveTo(0, -b);
        for (let e = 0; e < a; e++) {
          j = Math.cos(d) * b;
          k = Math.sin(d) * b;
          i.lineTo(j, k);
          d += l;
          j = Math.cos(d) * c;
          k = Math.sin(d) * c;
          i.lineTo(j, k);
          d += l;
        }
        i.lineTo(0, -b);
        i.closePath();
      }
      function Oe(i, a, b, c) {
        let d = Math.PI / 2 * 3;
        let j;
        let k;
        let l = Math.PI / a;
        i.beginPath();
        i.moveTo(0, -b);
        for (let e = 0; e < a; e++) {
          j = Math.cos(d) * b;
          k = Math.sin(d) * b;
          i.lineTo(j, k);
          d += l;
          j = Math.cos(d) * c;
          k = Math.sin(d) * c;
          i.lineTo(j, k);
          d += l;
        }
        i.lineTo(0, -b);
        i.closePath();
      }
      function Pe(h, a, b, c, d, e, f) {
        if (!f) {
          d.fillRect(h - b / 2, a - c / 2, b, c);
        }
        if (!e) {
          d.strokeRect(h - b / 2, a - c / 2, b, c);
        }
      }
      function Qe(h, a, b, c, d, e, f) {
        if (!f) {
          d.fillRect(h - b / 2, a - c / 2, b, c);
        }
        if (!e) {
          d.strokeRect(h - b / 2, a - c / 2, b, c);
        }
      }
      function Re(i, a, b, c, d, j, f, g) {
        j.save();
        j.translate(i, a);
        d = Math.ceil(d / 2);
        for (let e = 0; e < d; e++) {
          Pe(0, 0, b * 2, c, j, f, g);
          j.rotate(Math.PI / d);
        }
        j.restore();
      }
      function Se(j, a, b, c) {
        let d = Math.PI / 2 * 3;
        let k;
        let f;
        let g = Math.PI / a;
        let h;
        j.beginPath();
        j.moveTo(0, -c);
        for (let e = 0; e < a; e++) {
          h = Dc.randInt(b + 0.9, b * 1.2);
          j.quadraticCurveTo(Math.cos(d + g) * h, Math.sin(d + g) * h, Math.cos(d + g * 2) * c, Math.sin(d + g * 2) * c);
          d += g * 2;
        }
        j.lineTo(0, -c);
        j.closePath();
      }
      function Te(d, a) {
        a = a || Ma;
        let e = d * (Math.sqrt(3) / 2);
        a.beginPath();
        a.moveTo(0, -e / 2);
        a.lineTo(-d / 2, e / 2);
        a.lineTo(d / 2, e / 2);
        a.lineTo(0, -e / 2);
        a.fill();
        a.closePath();
      }
      function Ue() {
        let f = x.mapScale / 2;
        let b = 0;
        for (let c = 0; c < Ec.list.length * 3;) {
          if (b >= 1000) {
            break;
          }
          b++;
          let a = Ec.list[Dc.randInt(0, Ec.list.length - 1)];
          let d = {
            x: f + Dc.randFloat(-1000, 1000),
            y: f + Dc.randFloat(-600, 600),
            dir: Dc.fixTo(Math.random() * (Math.PI * 2), 2)
          };
          if (Fc.checkItemLocation(d.x, d.y, a.scale, 0.6, a.id, true)) {
            Fc.add(c, d.x, d.y, d.dir, a.scale, a.id, a);
          } else {
            continue;
          }
          c++;
        }
      }
      const Ve = 1;
      function We(j, a) {
        Ma.fillStyle = "#91b2db";
        const b = Date.now();
        ra.filter(b => b.active).forEach(c => {
          if (!c.startTime) {
            c.startTime = b;
            c.angle = 0;
            c.radius = 0.1;
          }
          const d = b - c.startTime;
          const e = 1;
          c.alpha = Math.max(0, e - d / 3000);
          c.animate(eb);
          Ma.globalAlpha = c.alpha;
          Ma.strokeStyle = Fg;
          Ma.save();
          Ma.translate(c.x - j, c.y - a);
          c.radius -= 0.001;
          c.angle += bc(1);
          const f = 1;
          const g = c.radius * Math.cos(c.angle);
          const h = c.radius * Math.sin(c.angle);
          c.x += g * f;
          c.y += h * f;
          Ma.rotate(c.angle);
          $e(c, Ma);
          Ma.restore();
          Ma.fillStyle = "#91b2db";
          if (d >= 3000) {
            c.active = false;
            c.startTime = null;
          }
        });
      }
      let Xe = 1;
      let $g = -1;
      document.addEventListener("keydown", function (b) {
        if (b.key === "4") {
          Xe += $g * 0.1;
          if (Xe <= 0.5 || Xe >= 1) {
            $g *= -1;
          }
          Ma.globalAlpha = Xe;
        }
      });
      function _g(e, a, b) {
        Ma.globalAlpha = Xe;
        Ma.fillStyle = "#91b2db";
        for (var c = 0; c < la.length; ++c) {
          pg = la[c];
          if (pg.zIndex == b) {
            pg.animate(eb);
            if (pg.visible) {
              pg.skinRot += eb * 0.002;
              Ag = !r.showDir && !eg && pg == ng ? r.attackDir ? nd() : ld() : pg.dir || 0;
              Ma.save();
              Ma.translate(pg.x - e, pg.y - a);
              Ma.rotate(Ag + pg.dirPlus);
              _e(pg, Ma);
              Ma.restore();
            }
          }
        }
      }
      function $e(a, b) {
        b = b || Ma;
        b.lineWidth = rb;
        b.lineJoin = "miter";
        let h = Math.PI / 4 * (Ec.weapons[a.weaponIndex].armS || 1);
        let d = a.buildIndex < 0 ? Ec.weapons[a.weaponIndex].hndS || 1 : 1;
        let e = a.buildIndex < 0 ? Ec.weapons[a.weaponIndex].hndD || 1 : 1;
        nf(13, b, a);
        if (a.buildIndex < 0 && !Ec.weapons[a.weaponIndex].aboveHand) {
          pf(Ec.weapons[a.weaponIndex], x.weaponVariants[a.weaponVariant || 0].src || "", a.scale, 0, b);
          if (Ec.weapons[a.weaponIndex].projectile != undefined && !Ec.weapons[a.weaponIndex].hideProjectile) {
            vf(a.scale, 0, Ec.projectiles[Ec.weapons[a.weaponIndex].projectile], Ma);
          }
        }
        b.fillStyle = "#ececec";
        Le(a.scale * Math.cos(h), a.scale * Math.sin(h), 14);
        Le(a.scale * e * Math.cos(-h * d), a.scale * e * Math.sin(-h * d), 14);
        if (a.buildIndex < 0 && Ec.weapons[a.weaponIndex].aboveHand) {
          pf(Ec.weapons[a.weaponIndex], x.weaponVariants[a.weaponVariant || 0].src || "", a.scale, 0, b);
          if (Ec.weapons[a.weaponIndex].projectile != undefined && !Ec.weapons[a.weaponIndex].hideProjectile) {
            vf(a.scale, 0, Ec.projectiles[Ec.weapons[a.weaponIndex].projectile], Ma);
          }
        }
        if (a.buildIndex >= 0) {
          var f = ch(Ec.list[a.buildIndex]);
          b.drawImage(f, a.scale - Ec.list[a.buildIndex].holdOffset, -f.width / 2);
        }
        Le(0, 0, a.scale, b);
        cf(48, b, null, a);
      }
      function _e(a, b) {
        b = b || Ma;
        b.lineWidth = rb;
        b.lineJoin = "miter";
        let i = Math.PI / 4 * (Ec.weapons[a.weaponIndex].armS || 1);
        let d = a.buildIndex < 0 ? Ec.weapons[a.weaponIndex].hndS || 1 : 1;
        let e = a.buildIndex < 0 ? Ec.weapons[a.weaponIndex].hndD || 1 : 1;
        let f = a == ng && a.weapons[0] == 3 && a.weapons[1] == 15;
        if (a.tailIndex > 0) {
          kf(a.tailIndex, b, a);
        }
        if (a.buildIndex < 0 && !Ec.weapons[a.weaponIndex].aboveHand) {
          pf(Ec.weapons[f ? 4 : a.weaponIndex], x.weaponVariants[a.weaponVariant].src, a.scale, 0, b);
          if (Ec.weapons[a.weaponIndex].projectile != undefined && !Ec.weapons[a.weaponIndex].hideProjectile) {
            vf(a.scale, 0, Ec.projectiles[Ec.weapons[a.weaponIndex].projectile], Ma);
          }
        }
        b.fillStyle = x.skinColors[a.skinColor];
        Le(a.scale * Math.cos(i), a.scale * Math.sin(i), 14);
        Le(a.scale * e * Math.cos(-i * d), a.scale * e * Math.sin(-i * d), 14);
        if (a.buildIndex < 0 && Ec.weapons[a.weaponIndex].aboveHand) {
          pf(Ec.weapons[a.weaponIndex], x.weaponVariants[a.weaponVariant].src, a.scale, 0, b);
          if (Ec.weapons[a.weaponIndex].projectile != undefined && !Ec.weapons[a.weaponIndex].hideProjectile) {
            vf(a.scale, 0, Ec.projectiles[Ec.weapons[a.weaponIndex].projectile], Ma);
          }
        }
        if (a.buildIndex >= 0) {
          var g = ch(Ec.list[a.buildIndex]);
          b.drawImage(g, a.scale - Ec.list[a.buildIndex].holdOffset, -g.width / 2);
        }
        Le(0, 0, a.scale, b);
        if (a.skinIndex > 0) {
          b.rotate(Math.PI / 2);
          ah(a.skinIndex, b, null, a);
        }
      }
      var af = {};
      var bf = {};
      function cf(h, a, b, c) {
        ff = af[h];
        if (!ff) {
          var d = new Image();
          d.onload = function () {
            this.isLoaded = true;
            this.onload = null;
          };
          d.src = "https://moomoo.io/img/hats/hat_" + h + ".png";
          af[h] = d;
          ff = d;
        }
        var e = b || bf[h];
        if (!e) {
          for (var i = 0; i < Hc.length; ++i) {
            if (Hc[i].id == h) {
              e = Hc[i];
              break;
            }
          }
          bf[h] = e;
        }
        if (ff.isLoaded) {
          a.drawImage(ff, -e.scale / 2, -e.scale / 2, e.scale, e.scale);
        }
        if (!b && e.topSprite) {
          a.save();
          a.rotate(c.skinRot);
          cf(h + "_top", a, e, c);
          a.restore();
        }
      }
      let df = {};
      let ef = {};
      let ff;
      function ah(f, a, b, c) {
        ff = df[f];
        if (!ff) {
          let a = new Image();
          a.onload = function () {
            this.isLoaded = true;
            this.onload = null;
          };
          a.src = "https://moomoo.io/img/hats/hat_" + f + ".png";
          df[f] = a;
          ff = a;
        }
        let d = b || ef[f];
        if (!d) {
          for (let a = 0; a < Hc.length; ++a) {
            if (Hc[a].id == f) {
              d = Hc[a];
              break;
            }
          }
          ef[f] = d;
        }
        if (ff.isLoaded) {
          a.drawImage(ff, -d.scale / 2, -d.scale / 2, d.scale, d.scale);
        }
        if (!b && d.topSprite) {
          a.save();
          a.rotate(c.skinRot);
          ah(f + "_top", a, d, c);
          a.restore();
        }
      }
      let hf = {};
      let jf = {};
      function kf(e, a, b) {
        ff = hf[e];
        if (!ff) {
          let a = new Image();
          a.onload = function () {
            this.isLoaded = true;
            this.onload = null;
          };
          a.src = "https://moomoo.io/img/accessories/access_" + e + ".png";
          hf[e] = a;
          ff = a;
        }
        let c = jf[e];
        if (!c) {
          for (let a = 0; a < Ic.length; ++a) {
            if (Ic[a].id == e) {
              c = Ic[a];
              break;
            }
          }
          jf[e] = c;
        }
        if (ff.isLoaded) {
          a.save();
          a.translate(-20 - (c.xOff || 0), 0);
          if (c.spin) {
            a.rotate(b.skinRot);
          }
          a.drawImage(ff, -(c.scale / 2), -(c.scale / 2), c.scale, c.scale);
          a.restore();
        }
      }
      var lf = {};
      var mf = {};
      function nf(g, a, b) {
        ff = lf[g];
        if (!ff) {
          var c = new Image();
          c.onload = function () {
            this.isLoaded = true;
            this.onload = null;
          };
          c.src = "https://moomoo.io/img/accessories/access_" + g + ".png";
          lf[g] = c;
          ff = c;
        }
        var d = mf[g];
        if (!d) {
          for (var h = 0; h < Ic.length; ++h) {
            if (Ic[h].id == g) {
              d = Ic[h];
              break;
            }
          }
          mf[g] = d;
        }
        if (ff.isLoaded) {
          a.save();
          a.translate(-20 - (d.xOff || 0), 0);
          if (d.spin) {
            a.rotate(b.skinRot);
          }
          a.drawImage(ff, -(d.scale / 2), -(d.scale / 2), d.scale, d.scale);
          a.restore();
        }
      }
      let of = {};
      function pf(h, a, b, c, d) {
        let e = h.src + (a || "");
        let f = of[e];
        if (!f) {
          f = new Image();
          f.onload = function () {
            this.isLoaded = true;
          };
          f.src = "https://moomoo.io/img/weapons/" + e + ".png";
          of[e] = f;
        }
        if (f.isLoaded) {
          d.drawImage(f, b + h.xOff - h.length / 2, c + h.yOff - h.width / 2, h.length, h.width);
        }
      }
      var qf = {};
      function rf(d, a, b) {
        if (a.weaponVariant == 3) {
          if (d.id == 0) {
            return "https://i.imgur.com/oRXUfW8.png";
          } else if (d.id == 1) {
            return "https://i.imgur.com/kr8H9g7.png";
          } else if (d.id == 2) {
            return "https://i.imgur.com/UZ2HcQw.png";
          } else if (d.id == 3) {
            return "https://i.imgur.com/vxLZW0S.png";
          } else if (d.id == 4) {
            return "https://i.imgur.com/vxLZW0S.png";
          } else if (d.id == 5) {
            return "https://i.imgur.com/UY7SV7j.png";
          } else if (d.id == 6) {
            return "https://i.imgur.com/6ayjbIz.png";
          } else if (d.id == 7) {
            return "https://i.imgur.com/CDAmjux.png";
          } else if (d.id == 8) {
            return "https://i.imgur.com/aEs3FSU.png";
          } else if (d.id == 9) {
            return "https://i.imgur.com/Oneg3oF.png";
          } else if (d.id == 10) {
            return "https://i.imgur.com/tmUzurk.png";
          } else if (d.id == 11) {
            return "https://i.imgur.com/SNFV2dc.png";
          } else if (d.id == 12) {
            return "https://i.imgur.com/EVesBtw.png";
          } else if (d.id == 13) {
            return "https://i.imgur.com/z4CyaXk.png";
          } else if (d.id == 15) {
            return "https://i.imgur.com/jPE54IT.png";
          } else {
            return ".././img/weapons/" + b + ".png";
          }
        } else if (a.weaponVariant == 2) {
          if (d.id == 0) {
            return "https://i.imgur.com/WPWU8zC.png";
          } else if (d.id == 1) {
            return "https://i.imgur.com/OU5os0h.png";
          } else if (d.id == 2) {
            return "https://i.imgur.com/aAJyHBB.png";
          } else if (d.id == 3) {
            return "https://sandbox.moomoo.io/img/weapons/samurai_1_d.png";
          } else if (d.id == 4) {
            return "https://sandbox.moomoo.io/img/weapons/samurai_1_d.png";
          } else if (d.id == 5) {
            return "https://i.imgur.com/HSWcyku.png";
          } else if (d.id == 6) {
            return "https://i.imgur.com/phXTNsa.png";
          } else if (d.id == 7) {
            return "https://i.imgur.com/ROTb7Ks.png";
          } else if (d.id == 8) {
            return "https://i.imgur.com/RnkmWgs.png";
          } else if (d.id == 9) {
            return "https://i.imgur.com/qu7HHT5.png";
          } else if (d.id == 10) {
            return "https://i.imgur.com/Fg93gj3.png";
          } else if (d.id == 11) {
            return "https://i.imgur.com/hSqLP3t.png";
          } else if (d.id == 12) {
            return "https://i.imgur.com/TRqDlgX.png";
          } else if (d.id == 13) {
            return "https://i.imgur.com/DVjCdwI.png";
          } else if (d.id == 15) {
            return "https://i.imgur.com/jwH99zm.png";
          } else {
            return ".././img/weapons/" + b + ".png";
          }
        } else if (a.weaponVariant == 1) {
          if (d.id == 3) {
            return "https://i.imgur.com/QKBc2ou.png";
          } else if (d.id == 4) {
            return "https://i.imgur.com/QKBc2ou.png";
          } else if (d.id == 5) {
            return "https://i.imgur.com/jKDdyvc.png";
          } else if (d.id == 6) {
            return "https://i.imgur.com/ivLPh10.png";
          } else if (d.id == 8) {
            return "https://i.imgur.com/DTd8Xl6.png";
          } else if (d.id == 15) {
            return "https://i.imgur.com/mAW9JAW.png";
          } else {
            return ".././img/weapons/" + b + ".png";
          }
        } else {
          return ".././img/weapons/" + b + ".png";
        }
      }
      function sf(i, a, b, c, d, e) {
        var f = i.src + (a || "");
        var g = qf[f];
        if (!g) {
          g = new Image();
          g.onload = function () {
            this.isLoaded = true;
          };
          g.src = rf(i, e, f);
          qf[f] = g;
        }
        if (g.isLoaded) {
          d.drawImage(g, b + i.xOff - i.length / 2, c + i.yOff - i.width / 2, i.length, i.width);
        }
      }
      function tf(e, a, b) {
        for (let c = 0; c < qa.length; c++) {
          pg = qa[c];
          if (pg.active && pg.layer == e && pg.inWindow) {
            pg.update(eb);
            if (pg.active && Gf(pg.x - a, pg.y - b, pg.scale)) {
              Ma.save();
              Ma.translate(pg.x - a, pg.y - b);
              Ma.rotate(pg.dir);
              vf(0, 0, pg, Ma, 1);
              Ma.restore();
            }
          }
        }
        ;
      }
      let uf = {};
      function vf(g, a, b, c, d) {
        if (b.src) {
          let d = Ec.projectiles[b.indx].src;
          let e = uf[d];
          if (!e) {
            e = new Image();
            e.onload = function () {
              this.isLoaded = true;
            };
            e.src = "https://moomoo.io/img/weapons/" + d + ".png";
            uf[d] = e;
          }
          if (e.isLoaded) {
            c.drawImage(e, g - b.scale / 2, a - b.scale / 2, b.scale, b.scale);
          }
        } else if (b.indx == 1) {
          c.fillStyle = "#939393";
          Le(g, a, b.scale, c);
        }
      }
      let wf = {};
      function xf(e, a) {
        let f = e.index;
        let g = wf[f];
        if (!g) {
          let a = new Image();
          a.onload = function () {
            this.isLoaded = true;
            this.onload = null;
          };
          a.src = "https://moomoo.io/img/animals/" + e.src + ".png";
          g = a;
          wf[f] = g;
        }
        if (g.isLoaded) {
          let b = e.scale * 1.2 * (e.spriteMlt || 1);
          a.drawImage(g, -b, -b, b * 2, b * 2);
        }
      }
      function yf(a, b, c, d) {
        let e = x.riverWidth + d;
        let f = x.mapScale / 2 - b - e / 2;
        if (f < cb && f + e > 0) {
          c.fillRect(0, f, vg, e);
        }
      }
      let zf = {};
      function bh(h) {
        let f = h.y >= x.mapScale - x.snowBiomeTop ? 2 : h.y <= x.snowBiomeTop ? 1 : 0;
        let b = h.type + "_" + h.scale + "_" + f;
        let c = zf[b];
        if (!c) {
          let d = 15;
          let a = document.createElement("canvas");
          a.width = a.height = h.scale * 2.1 + rb;
          let e = a.getContext("2d");
          e.translate(a.width / 2, a.height / 2);
          e.rotate(Dc.randFloat(0, Math.PI));
          e.strokeStyle = Fg;
          e.lineWidth = rb;
          if (sb) {}
          if (h.type == 0) {
            let c;
            let a = Dc.randInt(5, 7);
            e.globalAlpha = sb ? 0.6 : 0.8;
            for (let b = 0; b < 2; ++b) {
              c = pg.scale * (!b ? 1 : 0.5);
              Ne(e, a, c, c * 0.7);
              e.fillStyle = !f ? !b ? "#9ebf57" : "#b4db62" : !b ? "#e3f1f4" : "#fff";
              e.fill();
              if (!b) {
                e.stroke();
                e.globalAlpha = 1;
              }
            }
          } else if (h.type == 1) {
            if (f == 2) {
              e.fillStyle = "#606060";
              Ne(e, 6, h.scale * 0.3, h.scale * 0.71);
              e.fill();
              e.stroke();
              e.fillStyle = "#89a54c";
              Le(0, 0, h.scale * 0.55, e);
              e.fillStyle = "#a5c65b";
              Le(0, 0, h.scale * 0.3, e, true);
            } else {
              Se(e, 6, pg.scale, pg.scale * 0.7);
              e.fillStyle = f ? "#e3f1f4" : "#89a54c";
              e.fill();
              e.stroke();
              e.fillStyle = f ? "#6a64af" : "#c15555";
              let g;
              let a = 4;
              let b = Math.PI * 2 / a;
              for (let d = 0; d < a; ++d) {
                g = Dc.randInt(pg.scale / 3.5, pg.scale / 2.3);
                Le(g * Math.cos(b * d), g * Math.sin(b * d), Dc.randInt(10, 12), e);
              }
            }
          } else if (h.type == 2 || h.type == 3) {
            e.fillStyle = h.type == 2 ? f == 2 ? "#938d77" : "#939393" : "#e0c655";
            Ne(e, 3, h.scale, h.scale);
            e.fill();
            e.stroke();
            e.fillStyle = h.type == 2 ? f == 2 ? "#b2ab90" : "#bcbcbc" : "#ebdca3";
            Ne(e, 3, h.scale * 0.55, h.scale * 0.65);
            e.fill();
          }
          c = a;
          zf[b] = c;
        }
        return c;
      }
      let Bf = [];
      function ch(h, b) {
        let a = Bf[h.id];
        if (!a || b) {
          let c = !b && sb ? 15 : 0;
          let i = document.createElement("canvas");
          let d = !b && h.name == "windmill" ? Ec.list[4].scale : h.scale;
          i.width = i.height = d * 2.5 + rb + (Ec.list[h.id].spritePadding || 0) + c;
          if (x.useWebGl) {
            let k = i.getContext("webgl");
            k.clearColor(0, 0, 0, 0);
            k.clear(k.COLOR_BUFFER_BIT);
            let a = k.createBuffer();
            k.bindBuffer(k.ARRAY_BUFFER, a);
            function f(a, b, c, d) {
              let e = k.createShader(k.VERTEX_SHADER);
              k.shaderSource(e, a);
              k.compileShader(e);
              k.getShaderParameter(e, k.COMPILE_STATUS);
              let f = k.createShader(k.FRAGMENT_SHADER);
              k.shaderSource(f, b);
              k.compileShader(f);
              k.getShaderParameter(f, k.COMPILE_STATUS);
              let g = k.createProgram();
              k.attachShader(g, e);
              k.attachShader(g, f);
              k.linkProgram(g);
              k.getProgramParameter(g, k.LINK_STATUS);
              k.useProgram(g);
              let h = k.getAttribLocation(g, "vertex");
              k.enableVertexAttribArray(h);
              k.vertexAttribPointer(h, 2, k.FLOAT, false, 0, 0);
              let i = c.length / 2;
              k.bufferData(k.ARRAY_BUFFER, new Float32Array(c), k.DYNAMIC_DRAW);
              k.drawArrays(d, 0, i);
            }
            function b(b) {
              return b.slice(1).match(/.{1,2}/g).map(b => parseInt(b, 16));
            }
            function c(d, a, b) {
              return [d / 255, a / 255, b / 255].join(", ");
            }
            let e = 100;
            for (let a = 0; a < e; a++) {
              let b = Math.PI * (a / (e / 2));
              f("\n                           \n                            ", [0 + Math.cos(b) * 0.5, 0 + Math.sin(b) * 0.5, 0, 0], k.LINE_LOOP);
            }
          } else {
            let g = i.getContext("2d");
            g.translate(i.width / 2, i.height / 2);
            g.rotate(b ? 0 : Math.PI / 2);
            g.strokeStyle = Fg;
            g.lineWidth = rb * (b ? i.width / 81 : 1);
            if (sb && !b) {}
            if (h.name == "apple") {
              g.fillStyle = "#c15555";
              Le(0, 0, h.scale, g);
              g.fillStyle = "#89a54c";
              let a = -(Math.PI / 2);
              Ke(h.scale * Math.cos(a), h.scale * Math.sin(a), 25, a + Math.PI / 2, g);
            } else if (h.name == "cookie") {
              g.fillStyle = "#cca861";
              Le(0, 0, h.scale, g);
              g.fillStyle = "#937c4b";
              let a = 4;
              let b = Math.PI * 2 / a;
              let c;
              for (let d = 0; d < a; ++d) {
                c = Dc.randInt(h.scale / 2.5, h.scale / 1.7);
                Le(c * Math.cos(b * d), c * Math.sin(b * d), Dc.randInt(4, 5), g, true);
              }
            } else if (h.name == "cheese") {
              g.fillStyle = "#f4f3ac";
              Le(0, 0, h.scale, g);
              g.fillStyle = "#c3c28b";
              let a = 4;
              let b = Math.PI * 2 / a;
              let c;
              for (let d = 0; d < a; ++d) {
                c = Dc.randInt(h.scale / 2.5, h.scale / 1.7);
                Le(c * Math.cos(b * d), c * Math.sin(b * d), Dc.randInt(4, 5), g, true);
              }
            } else if (h.name == "wood wall" || h.name == "stone wall" || h.name == "castle wall") {
              g.fillStyle = h.name == "castle wall" ? "#83898e" : h.name == "wood wall" ? "#a5974c" : "#939393";
              let a = h.name == "castle wall" ? 4 : 3;
              Ne(g, a, h.scale * 1.1, h.scale * 1.1);
              g.fill();
              g.stroke();
              g.fillStyle = h.name == "castle wall" ? "#9da4aa" : h.name == "wood wall" ? "#c9b758" : "#bcbcbc";
              Ne(g, a, h.scale * 0.65, h.scale * 0.65);
              g.fill();
            } else if (h.name == "spikes" || h.name == "greater spikes" || h.name == "poison spikes" || h.name == "spinning spikes") {
              g.fillStyle = h.name == "poison spikes" ? "#7b935d" : "#939393";
              let a = h.scale * 0.6;
              Ne(g, h.name == "spikes" ? 5 : 6, h.scale, a);
              g.fill();
              g.stroke();
              g.fillStyle = "#a5974c";
              Le(0, 0, a, g);
              g.fillStyle = "#c9b758";
              Le(0, 0, a / 2, g, true);
            } else if (h.name == "windmill" || h.name == "faster windmill" || h.name == "power mill") {
              g.fillStyle = "#a5974c";
              Le(0, 0, h.scale, g);
              g.fillStyle = "#c9b758";
              g.fillStyle = "#a5974c";
              Le(0, 0, h.scale * 0.5, g);
            } else if (h.name == "mine") {
              g.fillStyle = "#939393";
              Ne(g, 3, h.scale, h.scale);
              g.fill();
              g.stroke();
              g.fillStyle = "#bcbcbc";
              Ne(g, 3, h.scale * 0.55, h.scale * 0.65);
              g.fill();
            } else if (h.name == "sapling") {
              for (let a = 0; a < 2; ++a) {
                let b = h.scale * (!a ? 1 : 0.5);
                Ne(g, 7, b, b * 0.7);
                g.fillStyle = !a ? "#9ebf57" : "#b4db62";
                g.fill();
                if (!a) {
                  g.stroke();
                }
              }
            } else if (h.name == "pit trap") {
              g.fillStyle = "#a5974c";
              Ne(g, 3, h.scale * 1.1, h.scale * 1.1);
              g.fill();
              g.stroke();
              g.fillStyle = Fg;
              Ne(g, 3, h.scale * 0.65, h.scale * 0.65);
              g.fill();
            } else if (h.name == "boost pad") {
              g.fillStyle = "#7e7f82";
              Pe(0, 0, h.scale * 2, h.scale * 2, g);
              g.fill();
              g.stroke();
              g.fillStyle = "#dbd97d";
              Te(h.scale * 1, g);
            } else if (h.name == "turret") {
              g.fillStyle = "#a5974c";
              Le(0, 0, h.scale, g);
              g.fill();
              g.stroke();
              g.fillStyle = "#939393";
              let a = 50;
              Pe(0, -a / 2, h.scale * 0.9, a, g);
              Le(0, 0, h.scale * 0.6, g);
              g.fill();
              g.stroke();
            } else if (h.name == "platform") {
              g.fillStyle = "#cebd5f";
              let a = 4;
              let b = h.scale * 2;
              let c = b / a;
              let d = -(h.scale / 2);
              for (let e = 0; e < a; ++e) {
                Pe(d - c / 2, 0, c, h.scale * 2, g);
                g.fill();
                g.stroke();
                d += b / a;
              }
            } else if (h.name == "healing pad") {
              g.fillStyle = "#7e7f82";
              Pe(0, 0, h.scale * 2, h.scale * 2, g);
              g.fill();
              g.stroke();
              g.fillStyle = "#db6e6e";
              Re(0, 0, h.scale * 0.65, 20, 4, g, true);
            } else if (h.name == "spawn pad") {
              g.fillStyle = "#7e7f82";
              Pe(0, 0, h.scale * 2, h.scale * 2, g);
              g.fill();
              g.stroke();
              g.fillStyle = "#71aad6";
              Le(0, 0, h.scale * 0.6, g);
            } else if (h.name == "blocker") {
              g.fillStyle = "#7e7f82";
              Le(0, 0, h.scale, g);
              g.fill();
              g.stroke();
              g.rotate(Math.PI / 4);
              g.fillStyle = "#db6e6e";
              Re(0, 0, h.scale * 0.65, 20, 4, g, true);
            } else if (h.name == "teleporter") {
              g.fillStyle = "#7e7f82";
              Le(0, 0, h.scale, g);
              g.fill();
              g.stroke();
              g.rotate(Math.PI / 4);
              g.fillStyle = "#d76edb";
              Le(0, 0, h.scale * 0.5, g, true);
            }
          }
          a = i;
          if (!b) {
            Bf[h.id] = a;
          }
        }
        return a;
      }
      function Df(g, a, b) {
        let h = Ma;
        let c = g.name == "windmill" ? Ec.list[4].scale : g.scale;
        h.save();
        h.translate(a, b);
        h.rotate(g.dir);
        h.strokeStyle = Fg;
        h.lineWidth = rb;
        if (g.name == "apple") {
          h.fillStyle = "#c15555";
          Le(0, 0, g.scale, h);
          h.fillStyle = "#89a54c";
          let a = -(Math.PI / 2);
          Ke(g.scale * Math.cos(a), g.scale * Math.sin(a), 25, a + Math.PI / 2, h);
        } else if (g.name == "cookie") {
          h.fillStyle = "#cca861";
          Le(0, 0, g.scale, h);
          h.fillStyle = "#937c4b";
          let a = 4;
          let b = Math.PI * 2 / a;
          let c;
          for (let d = 0; d < a; ++d) {
            c = Dc.randInt(g.scale / 2.5, g.scale / 1.7);
            Le(c * Math.cos(b * d), c * Math.sin(b * d), Dc.randInt(4, 5), h, true);
          }
        } else if (g.name == "cheese") {
          h.fillStyle = "#f4f3ac";
          Le(0, 0, g.scale, h);
          h.fillStyle = "#c3c28b";
          let a = 4;
          let b = Math.PI * 2 / a;
          let c;
          for (let d = 0; d < a; ++d) {
            c = Dc.randInt(g.scale / 2.5, g.scale / 1.7);
            Le(c * Math.cos(b * d), c * Math.sin(b * d), Dc.randInt(4, 5), h, true);
          }
        } else if (g.name == "wood wall" || g.name == "stone wall" || g.name == "castle wall") {
          h.fillStyle = g.name == "castle wall" ? "#83898e" : g.name == "wood wall" ? "#a5974c" : "#939393";
          let a = g.name == "castle wall" ? 4 : 3;
          Ne(h, a, g.scale * 1.1, g.scale * 1.1);
          h.fill();
          h.stroke();
          h.fillStyle = g.name == "castle wall" ? "#9da4aa" : g.name == "wood wall" ? "#c9b758" : "#bcbcbc";
          Ne(h, a, g.scale * 0.65, g.scale * 0.65);
          h.fill();
        } else if (g.name == "spikes" || g.name == "greater spikes" || g.name == "poison spikes" || g.name == "spinning spikes") {
          h.fillStyle = g.name == "poison spikes" ? "#7b935d" : "#939393";
          let a = g.scale * 0.6;
          Ne(h, g.name == "spikes" ? 5 : 6, g.scale, a);
          h.fill();
          h.stroke();
          h.fillStyle = "#a5974c";
          Le(0, 0, a, h);
          h.fillStyle = "#c9b758";
          Le(0, 0, a / 2, h, true);
        } else if (g.name == "windmill" || g.name == "faster windmill" || g.name == "power mill") {
          h.fillStyle = "#a5974c";
          Le(0, 0, c, h);
          h.fillStyle = "#c9b758";
          Re(0, 0, c * 1.5, 29, 4, h);
          h.fillStyle = "#a5974c";
          Le(0, 0, c * 0.5, h);
        } else if (g.name == "mine") {
          h.fillStyle = "#939393";
          Ne(h, 3, g.scale, g.scale);
          h.fill();
          h.stroke();
          h.fillStyle = "#bcbcbc";
          Ne(h, 3, g.scale * 0.55, g.scale * 0.65);
          h.fill();
        } else if (g.name == "sapling") {
          for (let a = 0; a < 2; ++a) {
            let b = g.scale * (!a ? 1 : 0.5);
            Ne(h, 7, b, b * 0.7);
            h.fillStyle = !a ? "#9ebf57" : "#b4db62";
            h.fill();
            if (!a) {
              h.stroke();
            }
          }
        } else if (g.name == "pit trap") {
          h.fillStyle = "#a5974c";
          Ne(h, 3, g.scale * 1.1, g.scale * 1.1);
          h.fill();
          h.stroke();
          h.fillStyle = Fg;
          Ne(h, 3, g.scale * 0.65, g.scale * 0.65);
          h.fill();
        } else if (g.name == "boost pad") {
          h.fillStyle = "#7e7f82";
          Pe(0, 0, g.scale * 2, g.scale * 2, h);
          h.fill();
          h.stroke();
          h.fillStyle = "#dbd97d";
          Te(g.scale * 1, h);
        } else if (g.name == "turret") {
          h.fillStyle = "#a5974c";
          Le(0, 0, g.scale, h);
          h.fill();
          h.stroke();
          h.fillStyle = "#939393";
          let a = 50;
          Pe(0, -a / 2, g.scale * 0.9, a, h);
          Le(0, 0, g.scale * 0.6, h);
          h.fill();
          h.stroke();
        } else if (g.name == "platform") {
          h.fillStyle = "#cebd5f";
          let a = 4;
          let b = g.scale * 2;
          let c = b / a;
          let d = -(g.scale / 2);
          for (let e = 0; e < a; ++e) {
            Pe(d - c / 2, 0, c, g.scale * 2, h);
            h.fill();
            h.stroke();
            d += b / a;
          }
        } else if (g.name == "healing pad") {
          h.fillStyle = "#7e7f82";
          Pe(0, 0, g.scale * 2, g.scale * 2, h);
          h.fill();
          h.stroke();
          h.fillStyle = "#db6e6e";
          Re(0, 0, g.scale * 0.65, 20, 4, h, true);
        } else if (g.name == "spawn pad") {
          h.fillStyle = "#7e7f82";
          Pe(0, 0, g.scale * 2, g.scale * 2, h);
          h.fill();
          h.stroke();
          h.fillStyle = "#71aad6";
          Le(0, 0, g.scale * 0.6, h);
        } else if (g.name == "blocker") {
          h.fillStyle = "#7e7f82";
          Le(0, 0, g.scale, h);
          h.fill();
          h.stroke();
          h.rotate(Math.PI / 4);
          h.fillStyle = "#db6e6e";
          Re(0, 0, g.scale * 0.65, 20, 4, h, true);
        } else if (g.name == "teleporter") {
          h.fillStyle = "#7e7f82";
          Le(0, 0, g.scale, h);
          h.fill();
          h.stroke();
          h.rotate(Math.PI / 4);
          h.fillStyle = "#d76edb";
          Le(0, 0, g.scale * 0.5, h, true);
        }
        h.restore();
      }
      let Ef = [];
      function dh(f) {
        let a = Ef[f.id];
        if (!a) {
          let b = sb ? 15 : 0;
          let c = document.createElement("canvas");
          c.width = c.height = f.scale * 2.5 + rb + (Ec.list[f.id].spritePadding || 0) + b;
          let d = c.getContext("2d");
          d.translate(c.width / 2, c.height / 2);
          d.rotate(Math.PI / 2);
          d.strokeStyle = Fg;
          d.lineWidth = rb;
          if (sb) {}
          if (f.name == "spikes" || f.name == "greater spikes" || f.name == "poison spikes" || f.name == "spinning spikes") {
            d.fillStyle = f.name == "poison spikes" ? "#7b935d" : "#939393";
            let a = f.scale * 0.6;
            Ne(d, f.name == "spikes" ? 5 : 6, f.scale, a);
            d.fill();
            d.stroke();
            d.fillStyle = "#a5974c";
            Le(0, 0, a, d);
            d.fillStyle = "#cc5151";
            Le(0, 0, a / 2, d, true);
          } else if (f.name == "pit trap") {
            d.fillStyle = "#a5974c";
            Ne(d, 3, f.scale * 1.1, f.scale * 1.1);
            d.fill();
            d.stroke();
            d.fillStyle = "#cc5151";
            Ne(d, 3, f.scale * 0.65, f.scale * 0.65);
            d.fill();
          }
          a = c;
          Ef[f.id] = a;
        }
        return a;
      }
      function Gf(d, a, b) {
        return d + b >= 0 && d - b <= vg && a + b >= 0 && (a, b, cb);
      }
      function Hf(g, a, b) {
        let c;
        let h;
        let i;
        mg.forEach(d => {
          pg = d;
          if (pg.alive) {
            h = pg.x + pg.xWiggle - a;
            i = pg.y + pg.yWiggle - b;
            if (g == 0) {
              pg.update(eb);
            }
            Ma.globalAlpha = pg.alpha;
            if (pg.layer == g && Gf(h, i, pg.scale + (pg.blocker || 0))) {
              if (pg.isItem) {
                if ((pg.dmg || pg.trap) && !pg.isTeamObject(ng)) {
                  c = dh(pg);
                } else {
                  c = ch(pg);
                }
                Ma.save();
                Ma.translate(h, i);
                Ma.rotate(pg.dir);
                if (!pg.active) {
                  Ma.scale(pg.visScale / pg.scale, pg.visScale / pg.scale);
                }
                Ma.drawImage(c, -(c.width / 2), -(c.height / 2));
                if (pg.blocker) {
                  Ma.strokeStyle = "#db6e6e";
                  Ma.globalAlpha = 0.3;
                  Ma.lineWidth = 6;
                  Le(0, 0, pg.blocker, Ma, false, true);
                }
                Ma.restore();
              } else {
                c = bh(pg);
                Ma.drawImage(c, h - c.width / 2, i - c.height / 2);
              }
            }
            if (g == 3 && !eg && ng && pg.active && pg.health < pg.maxHealth) {
              const b = pg.health / pg.maxHealth;
              if (pg && pg.active && Dc.getDistance(pg.x, pg.y, ng.x, ng.y) <= 400) {
                const d = pg.health / pg.maxHealth * 360 * (Math.PI / 180);
                const a = 14;
                const b = 22;
                Ma.save();
                Ma.strokeStyle = "";
                Ma.lineWidth = 14;
                Ma.lineCap = "round";
                Ma.shadowColor = "";
                Ma.shadowBlur = 20;
                Ma.translate(h, i);
                Ma.beginPath();
                Ma.arc(0, 0, b, 0, d);
                Ma.stroke();
                Ma.restore();
                Ma.save();
                Ma.strokeStyle = pg.isTeamObject(ng) ? "#00FF00" : "#FF3399";
                Ma.lineWidth = 14 / 2.5;
                Ma.lineCap = "round";
                Ma.shadowColor = "";
                Ma.shadowBlur = 20;
                Ma.translate(h, i);
                Ma.beginPath();
                Ma.arc(0, 0, b, 0, d);
                Ma.stroke();
                Ma.restore();
              }
            }
          }
        });
      }
      function If(d, a, b) {
        Jf(Ma, a, b);
      }
      function Jf(d, a, b) {
        d.fillStyle = "rgba(0, 255, 255, 0.5)";
        d.beginPath();
        d.arc(a, b, 50, 0, Math.PI * 2);
        d.fill();
        d.closePath();
        d.globalAlpha = 1;
      }
      class Kf {
        constructor(a, e) {
          this.init = function (c, a) {
            this.scale = 0;
            this.x = c;
            this.y = a;
            this.active = true;
          };
          this.update = function (a, b) {
            if (this.active) {
              this.scale += b * 0.05;
              if (this.scale >= e) {
                this.active = false;
              } else {
                a.globalAlpha = 1 - Math.max(0, this.scale / e);
                a.beginPath();
                a.arc(this.x / x.mapScale * Na.width, this.y / x.mapScale * Na.width, this.scale, 0, Math.PI * 2);
                a.stroke();
              }
            }
          };
          this.color = a;
        }
      }
      function Lf(a, b) {
        Uc = Tc.find(b => !b.active);
        if (!Uc) {
          Uc = new Kf("#fff", x.mapPingScale);
          Tc.push(Uc);
        }
        Uc.init(a, b);
      }
      function Mf() {
        Pg.x = ng.x;
        Pg.y = ng.y;
      }
      function Nf(c) {
        if (ng && ng.alive) {
          Oa.clearRect(0, 0, Na.width, Na.height);
          Oa.lineWidth = 4;
          for (let b = 0; b < Tc.length; ++b) {
            Uc = Tc[b];
            Oa.strokeStyle = Uc.color;
            Uc.update(Oa, c);
          }
          Oa.globalAlpha = 1;
          Oa.fillStyle = "#ff0000";
          if (Qg.length) {
            Oa.fillStyle = "#abcdef";
            Oa.font = "34px Hammersmith One";
            Oa.textBaseline = "middle";
            Oa.textAlign = "center";
            for (let a = 0; a < Qg.length;) {
              Oa.fillText("!", Qg[a].x / x.mapScale * Na.width, Qg[a].y / x.mapScale * Na.height);
              a += 2;
            }
          }
          Oa.globalAlpha = 1;
          Oa.fillStyle = "#fff";
          Le(ng.x / x.mapScale * Na.width, ng.y / x.mapScale * Na.height, 7, Oa, true);
          Oa.fillStyle = "rgba(255,255,255,0.35)";
          if (ng.team && Og) {
            for (let a = 0; a < Og.length;) {
              Le(Og[a] / x.mapScale * Na.width, Og[a + 1] / x.mapScale * Na.height, 7, Oa, true);
              a += 2;
            }
          }
          if (Ee.length) {
            Ee.forEach(a => {
              if (a.inGame) {
                Oa.globalAlpha = 1;
                Oa.strokeStyle = "#cc5151";
                Le(a.x2 / x.mapScale * Na.width, a.y2 / x.mapScale * Na.height, 7, Oa, false, true);
              }
            });
          }
          if (Qc) {
            Oa.fillStyle = "#fc5553";
            Oa.font = "34px Hammersmith One";
            Oa.textBaseline = "middle";
            Oa.textAlign = "center";
            Oa.fillText("x", Qc.x / x.mapScale * Na.width, Qc.y / x.mapScale * Na.height);
          }
          if (Pg) {
            Oa.fillStyle = "#fff";
            Oa.font = "34px Hammersmith One";
            Oa.textBaseline = "middle";
            Oa.textAlign = "center";
            Oa.fillText("x", Pg.x / x.mapScale * Na.width, Pg.y / x.mapScale * Na.height);
          }
        }
      }
      let Of = ["https://cdn.discordapp.com/attachments/1001384433078779927/1149285168780165170/100px-Crosshairs_Red.png", "https://cdn.discordapp.com/attachments/1001384433078779927/1149285168780165170/100px-Crosshairs_Red.png"];
      let Pf = {};
      let Qf = {
        crown: new Image(),
        skull: new Image(),
        trust: new Image()
      };
      function Rf() {
        Qf.crown.onload = function () {
          this.isLoaded = true;
        };
        Qf.skull.onload = function () {
          this.isLoaded = true;
        };
        Qf.skull.src = "./../img/icons/skull.png";
        Qf.trust.onload = function () {
          this.isLoaded = true;
        };
        Qf.trust.src = "https://media.discordapp.net/attachments/904703116404998196/921671387716931625/trust-icon-png-17.jpg?width=494&height=494";
        for (let c = 0; c < Of.length; ++c) {
          let a = new Image();
          a.onload = function () {
            this.isLoaded = true;
          };
          a.src = Of[c];
          Pf[c] = a;
        }
      }
      Rf();
      function Sf() {
        if (x.resetRender) {
          Ma.clearRect(0, 0, La.width, La.height);
          Ma.beginPath();
        }
        if (true) {
          let h = 0.15;
          if (ng) {
            let b = ng.x + 32;
            let a = ng.y + 32;
            yg += (b - yg) * h;
            zg += (a - zg) * h;
          } else {
            yg = x.mapScale / 2;
            zg = x.mapScale / 2;
          }
          let j = wg - 1000 / x.serverUpdateRate;
          let c;
          for (let b = 0; b < la.length + ka.length; ++b) {
            pg = la[b] || ka[b - la.length];
            if (pg && pg.visible) {
              if (pg.forcePos) {
                pg.x = pg.x2;
                pg.y = pg.y2;
                pg.dir = pg.d2;
              } else {
                let d = pg.t2 - pg.t1;
                let a = j - pg.t1;
                let b = a / d;
                let e = 170;
                pg.dt += eb;
                let f = Math.min(1.7, pg.dt / e);
                c = pg.x2 - pg.x1;
                pg.x = pg.x1 + c * f;
                c = pg.y2 - pg.y1;
                pg.y = pg.y1 + c * f;
              }
            }
          }
          let o = yg - vg / 2;
          let e = zg - cb / 2;
          if (x.snowBiomeTop - e <= 0 && x.mapScale - x.snowBiomeTop - e >= cb) {
            Ma.fillStyle = "#b6db66";
            Ma.fillRect(0, 0, vg, cb);
          } else if (x.mapScale - x.snowBiomeTop - e <= 0) {
            Ma.fillStyle = "#dbc666";
            Ma.fillRect(0, 0, vg, cb);
          } else if (x.snowBiomeTop - e >= cb) {
            Ma.fillStyle = "#fff";
            Ma.fillRect(0, 0, vg, cb);
          } else if (x.snowBiomeTop - e >= 0) {
            Ma.fillStyle = "#fff";
            Ma.fillRect(0, 0, vg, x.snowBiomeTop - e);
            Ma.fillStyle = "#b6db66";
            Ma.fillRect(0, x.snowBiomeTop - e, vg, cb - (x.snowBiomeTop - e));
          } else {
            Ma.fillStyle = "#b6db66";
            Ma.fillRect(0, 0, vg, x.mapScale - x.snowBiomeTop - e);
            Ma.fillStyle = "#dbc666";
            Ma.fillRect(0, x.mapScale - x.snowBiomeTop - e, vg, cb - (x.mapScale - x.snowBiomeTop - e));
          }
          if (!tb) {
            nb += Eg * x.waveSpeed * eb;
            if (nb >= x.waveMax) {
              nb = x.waveMax;
              Eg = -1;
            } else if (nb <= 1) {
              nb = Eg = 1;
            }
            Ma.globalAlpha = 1;
            Ma.fillStyle = "#dbc666";
            yf(o, e, Ma, x.riverPadding);
            Ma.fillStyle = "#91b2db";
            yf(o, e, Ma, (nb - 1) * 250);
          }
          Ma.lineWidth = 6;
          Ma.strokeStyle = "#000";
          Ma.globalAlpha = 0.2;
          Ma.beginPath();
          for (let b = -yg; b < vg; b += eg ? 60 : 2062) {
            if (b > 0) {
              Ma.moveTo(b, 0);
              Ma.lineTo(b, cb);
            }
          }
          for (let b = -zg; b < cb; b += eg ? 60 : 2062) {
            if (b > 0) {
              Ma.moveTo(0, b);
              Ma.lineTo(vg, b);
            }
          }
          Ma.stroke();
          if (ng) {
            if (Qc) {
              Ma.globalAlpha = 1;
              Ma.fillStyle = "#fc5553";
              Ma.font = "100px Hammersmith One";
              Ma.textBaseline = "middle";
              Ma.textAlign = "center";
              Ma.fillText("", Qc.x - o, Qc.y - e);
            }
            if (Rg.active && Rg.array && (Rg.chaseNear ? qg.length : true)) {
              Ma.lineWidth = ng.scale / 5;
              Ma.globalAlpha = 1;
              Ma.strokeStyle = "red";
              Ma.beginPath();
              Rg.array.forEach((f, a) => {
                let b = {
                  x: Rg.scale / Rg.grid * f.x,
                  y: Rg.scale / Rg.grid * f.y
                };
                let c = {
                  x: ng.x2 - Rg.scale / 2 + b.x - o,
                  y: ng.y2 - Rg.scale / 2 + b.y - e
                };
                if (a == 0) {
                  Ma.moveTo(c.x, c.y);
                } else {
                  Ma.lineTo(c.x, c.y);
                }
              });
              Ma.stroke();
            }
          }
          if (Lg && Id) {
            Ma.globalAlpha = 1;
            Ma.strokeStyle = Fg;
            We(o, e);
          }
          Ma.globalAlpha = 1;
          Ma.strokeStyle = Fg;
          Hf(-1, o, e);
          Ma.globalAlpha = 1;
          Ma.lineWidth = rb;
          tf(0, o, e);
          _g(o, e, 0);
          Ma.globalAlpha = 1;
          for (let b = 0; b < ka.length; ++b) {
            pg = ka[b];
            if (pg.active && pg.visible) {
              pg.animate(eb);
              Ma.save();
              Ma.translate(pg.x - o, pg.y - e);
              Ma.rotate(pg.dir + pg.dirPlus - Math.PI / 2);
              xf(pg, Ma);
              Ma.restore();
            }
          }
          Hf(0, o, e);
          tf(1, o, e);
          Hf(1, o, e);
          _g(o, e, 1);
          Hf(2, o, e);
          Hf(3, o, e);
          Ma.fillStyle = "#000";
          Ma.globalAlpha = 0.09;
          if (o <= 0) {
            Ma.fillRect(0, 0, -o, cb);
          }
          if (x.mapScale - o <= vg) {
            let a = Math.max(0, -e);
            Ma.fillRect(x.mapScale - o, a, vg - (x.mapScale - o), cb - a);
          }
          if (e <= 0) {
            Ma.fillRect(-o, 0, vg + o, -e);
          }
          if (x.mapScale - e <= cb) {
            let a = Math.max(0, -o);
            let b = 0;
            if (x.mapScale - o <= vg) {
              b = vg - (x.mapScale - o);
            }
            Ma.fillRect(a, x.mapScale - e, vg - a - b, cb - (x.mapScale - e));
          }
          Ma.globalAlpha = 1;
          Ma.fillStyle = "rgba(0, 0, 40, 0.525)";
          Ma.fillRect(0, 0, vg, cb);
          Ma.strokeStyle = qb;
          Ma.globalAlpha = 1;
          for (let a = 0; a < la.length + ka.length; ++a) {
            pg = la[a] || ka[a - la.length];
            if (pg.visible) {
              Ma.strokeStyle = qb;
              function f(b) {
                if (z) {
                  if (b == ng) {
                    return i;
                  } else {
                    return b.name;
                  }
                } else {
                  return b.name;
                }
              }
              let a = new Image();
              a.src = "https://media.discordapp.net/attachments/904703116404998196/921671387716931625/trust-icon-png-17.jpg";
              let b = new Image();
              b.src = "https://cdn.discordapp.com/attachments/1164293764479725649/1168619636653314208/my-image_3.png?ex=65526cd9&is=653ff7d9&hm=0cd608eef45a14e471d40e741377e326ba867c6abce074674cf5fac908f5ec5d&";
              let k = new Image();
              k.src = "https://cdn.discordapp.com/attachments/1164293764479725649/1168623440119468173/image-removebg-preview.png?ex=65527064&is=653ffb64&hm=9d561f7728d48339e2a3313e6699dd161d0e9e9b7838c286c4782f0028cc617b&";
              let l = new Image();
              l.src = "https://cdn.discordapp.com/attachments/1164293764479725649/1168642216835694752/kake.png?ex=655281e0&is=65400ce0&hm=2cf2838ea30190deb4229cc7d81e812580952b9275b6ab6c36b5856f43f8f2e3&";
              let v = new Image();
              v.src = "https://cdn.discordapp.com/attachments/1164293764479725649/1168631982524207195/image-removebg-preview_1.png?ex=65527858&is=65400358&hm=3de4f91a0e1d3db8b3a4bab0c2aa5e54f11839a588ee734b8ec44224642038e7&";
              let j = new Image();
              j.src = "https://cdn.discordapp.com/attachments/1164293764479725649/1168628842114592927/pngtree-cartoon-caveman-with-a-knife-cartoon-sticker-vector-png-image_6823861.png?ex=6552756c&is=6540006c&hm=6b88635db673a77d3ebad80e942d7eac036ada8646a393ddfef01fd876c2ab4c&";
              let m = new Image();
              m.src = "https://cdn.discordapp.com/attachments/1164293764479725649/1168636032254742719/caveman-carving-wheel-illustration-depicts-large-stone-36118049-removebg-preview.png?ex=65527c1e&is=6540071e&hm=fad21217c9276c602faa133f280d022765d7f1b3b460f9a0e8d2e18aa032ac92&";
              let c = new Image();
              c.src = "https://cdn.discordapp.com/attachments/1164293764479725649/1168628220615196754/caveman-warrior-illustration-depicts-holding-stick-wooden-shield-59300404.png?ex=655274d7&is=653fffd7&hm=723f4dcfaabcf67fc4e9636afb272fd737b698079f7e5dd27ba8b96226eb70a0&";
              let n = new Image();
              n.src = "https://cdn.discordapp.com/attachments/1164293764479725649/1168635375523221645/image-removebg-preview_2.png?ex=65527b81&is=65400681&hm=a078f11625afd90add9f829a25446d1b6398d6a293ce350ba079f57a6e0df516&";
              let p = new Image();
              p.src = "https://cdn.discordapp.com/attachments/1164293764479725649/1168636450879840276/image-removebg-preview_3.png?ex=65527c82&is=65400782&hm=fbb970c56a782cc59b74831ae5b5b065310fe136d777cd2c81fce9d2aa0cdc46&";
              let q = new Image();
              q.src = "https://cdn.discordapp.com/attachments/1164293764479725649/1168642455399317504/O1RD.png?ex=65528219&is=65400d19&hm=adea7f7cc215bdc5395ddd08fba036cd8faa063edd5ad47c8b6533a5e4f83601&";
              let r = new Image();
              r.src = "https://cdn.discordapp.com/attachments/1164293764479725649/1168642884694716518/O1RD-removebg-preview.png?ex=65528280&is=65400d80&hm=2887ab4a1b782878bdc62aaa56929a33e016d86447739652e5ee2a7c6ae1407d&";
              if (pg.skinIndex != 10 || pg == ng || pg.team && pg.team == ng.team) {
                let a = z ? pg == ng ? "ðŸ¤‘ Subscribe to O1RD ðŸ¤‘" : pg.name : pg.name;
                let f = (pg.team ? "[" + pg.team + "] " : "") + (pg.name + "" || "") + (pg.isPlayer ? " {" + pg.sid + "}" : "");
                if (f != "") {
                  Ma.font = (pg.nameScale || 30) + "px Hammersmith One";
                  Ma.fillStyle = pg == ng || pg.team && pg.team == ng.team ? t : u;
                  Ma.textBaseline = "middle";
                  Ma.textAlign = "center";
                  Ma.lineWidth = pg.nameScale ? 11 : 8;
                  Ma.lineJoin = "round";
                  Ma.fillText(f, pg.x - o, pg.y + +15 - e - pg.scale - x.nameY);
                  Ma.fillStyle = "#fff";
                  Ma.textBaseline = "middle";
                  Ma.textAlign = "center";
                  Ma.lineWidth = 0;
                  Ma.lineJoin = "round";
                  Ma.strokeStyle = qb;
                  Ma.lineWidth = 5;
                  if (pg.isLeader && Qf.crown.isLoaded) {
                    let a = x.crownIconScale;
                    let b = pg.x - o - a / 2 - Ma.measureText(f).width / 2 - x.crownPad;
                    Ma.drawImage(Qf.crown, b, pg.y - e - pg.scale - x.nameY - a / 2 - 5, a, a);
                  }
                  if (pg.iconIndex == 1 && Qf.skull.isLoaded) {
                    let a = x.crownIconScale;
                    let b = pg.x - o - a / 2 + Ma.measureText(f).width / 2 + x.crownPad;
                    Ma.drawImage(Qf.skull, b, pg.y - e - pg.scale - x.nameY - a / 2 - 5, a, a);
                  }
                  if (pg.isPlayer && Nc.wait && sg == pg && (pg.backupNobull ? Pf[1].isLoaded : Pf[0].isLoaded) && qg.length && !eg) {
                    let b = pg.scale * 2.2;
                    Ma.drawImage(pg.backupNobull ? Pf[1] : Pf[0], pg.x - o - b / 2, pg.y - e - b / 2, b, b);
                  }
                }
                if (pg.health) {
                  if (pg.isPlayer && b.complete && pa("visualType").value !== "oogabooga") {}
                  if (pg.isPlayer && pg.weaponIndex == 5 && k.complete && pa("visualType").value === "oogabooga") {
                    let a = 60;
                    let b = 50;
                    let c = Ma.measureText(f).width;
                    let d = pg.x - o + c / 2 + 5;
                    let g = pg.y - e - pg.scale - x.nameY - b / 2 - 2;
                    Ma.drawImage(k, d, g, a, b);
                  }
                  if (pg.isPlayer && pg.weaponIndex == 3 && j.complete && pa("visualType").value === "oogabooga") {
                    let a = 60;
                    let b = 50;
                    let c = Ma.measureText(f).width;
                    let d = pg.x - o + c / 2 + 5;
                    let g = pg.y - e - pg.scale - x.nameY - b / 2 - 2;
                    Ma.drawImage(j, d, g, a, b);
                  }
                  if (pg.isPlayer && pg.weaponIndex == 0 && m.complete && pa("visualType").value === "oogabooga") {
                    let a = 60;
                    let b = 50;
                    let c = Ma.measureText(f).width;
                    let d = pg.x - o + c / 2 + 5;
                    let g = pg.y - e - pg.scale - x.nameY - b / 2 - 2;
                    Ma.drawImage(m, d, g, a, b);
                  }
                  if (pg.isPlayer && v.complete && pa("visualType").value === "oogabooga") {
                    let a = 60;
                    let b = 50;
                    let c = Ma.measureText(f).width;
                    let d = pg.x - o + c / 2 + 5;
                    let g = pg.y + 135 - e - pg.scale - x.nameY - b / 2 - 2;
                    Ma.drawImage(v, d, g, a, b);
                  }
                  if (pg.isPlayer && pg.weaponIndex == 1 && n.complete && pa("visualType").value === "oogabooga") {
                    let a = 60;
                    let b = 50;
                    let c = Ma.measureText(f).width;
                    let d = pg.x - o + c / 2 + 5;
                    let g = pg.y - e - pg.scale - x.nameY - b / 2 - 2;
                    Ma.drawImage(n, d, g, a, b);
                  }
                  if (pg.isPlayer && pg.weaponIndex == 7 && p.complete && pa("visualType").value === "oogabooga") {
                    let a = 60;
                    let b = 50;
                    let c = Ma.measureText(f).width;
                    let d = pg.x - o + c / 2 + 5;
                    let g = pg.y - e - pg.scale - x.nameY - b / 2 - 2;
                    Ma.drawImage(p, d, g, a, b);
                  }
                  if (pg.isPlayer && pg.weaponIndex == 4 && q.complete && pa("visualType").value === "oogabooga") {
                    let a = 60;
                    let b = 50;
                    let c = Ma.measureText(f).width;
                    let d = pg.x - o + c / 2 + 5;
                    let g = pg.y - e - pg.scale - x.nameY - b / 2 - 2;
                    Ma.drawImage(q, d, g, a, b);
                  }
                  if (pg.isPlayer && pg.weaponIndex == 6 && l.complete && pa("visualType").value === "oogabooga") {
                    let a = 60;
                    let b = 50;
                    let c = Ma.measureText(f).width;
                    let d = pg.x - o + c / 2 + 5;
                    let g = pg.y - e - pg.scale - x.nameY - b / 2 - 2;
                    Ma.drawImage(l, d, g, a, b);
                  }
                  if (pg.isPlayer && pg.weaponIndex == 8 && r.complete && pa("visualType").value === "oogabooga") {
                    let a = 60;
                    let b = 50;
                    let c = Ma.measureText(f).width;
                    let d = pg.x - o + c / 2 + 5;
                    let g = pg.y - e - pg.scale - x.nameY - b / 2 - 2;
                    Ma.drawImage(r, d, g, a, b);
                  }
                  if (pg.isPlayer && pa("visualType").value == "o1rd1") {
                    Ma.globalAlpha = 1;
                    const f = G();
                    let a = pg.primaryIndex !== undefined ? (Ec.weapons[pg.primaryIndex].speed - pg.reloads[pg.primaryIndex]) / Ec.weapons[pg.primaryIndex].speed : 1;
                    let b = pg.secondaryIndex !== undefined ? (Ec.weapons[pg.secondaryIndex].speed - pg.reloads[pg.secondaryIndex]) / Ec.weapons[pg.secondaryIndex].speed : 1;
                    const c = pg.x - o;
                    const d = pg.y - e;
                    const g = 35;
                    const h = 10;
                    const i = Math.PI;
                    const j = -Math.PI / 2;
                    const k = j + i * b;
                    const l = Math.PI / 2;
                    const m = l + i * a;
                    Ma.save();
                    if (a < 1) {
                      Ma.beginPath();
                      Ma.lineCap = "round";
                      Ma.arc(c, d, g, l, m);
                      Ma.lineWidth = 5;
                      Ma.strokeStyle = qb;
                      Ma.stroke();
                      Ma.beginPath();
                      Ma.lineCap = "round";
                      Ma.arc(c, d, g, l, m);
                      Ma.lineWidth = 5;
                      Ma.strokeStyle = f;
                      Ma.stroke();
                    }
                    if (b < 1) {
                      Ma.beginPath();
                      Ma.lineCap = "round";
                      Ma.arc(c, d, g, j, k);
                      Ma.lineWidth = 5;
                      Ma.strokeStyle = qb;
                      Ma.stroke();
                      Ma.beginPath();
                      Ma.lineCap = "round";
                      Ma.arc(c, d, g, j, k);
                      Ma.lineWidth = 5;
                      Ma.strokeStyle = f;
                      Ma.stroke();
                    }
                    Ma.restore();
                  }
                  if (pg.isPlayer) {
                    let a = new Image();
                    if (!pg.isTeam(ng)) {
                      let b = {
                        x: _a / 2,
                        y: ug / 2
                      };
                      let c = Math.min(1, Dc.getDistance(0, 0, ng.x - pg.x, (ng.y - pg.y) * (16 / 9)) * 100 / (x.maxScreenHeight / 2) / b.y);
                      let d = b.y * c;
                      let f = d * Math.cos(Dc.getDirect(pg, ng, 0, 0));
                      let g = d * Math.sin(Dc.getDirect(pg, ng, 0, 0));
                      Ma.save();
                      Ma.translate(ng.x - o + f, ng.y - e + g);
                      Ma.rotate(pg.aim2 - Math.PI / 2);
                      Ma.scale(-1, 1);
                      Ma.drawImage(a, -12, -12, 24, 24);
                      Ma.restore();
                    }
                  }
                  if (pg.isPlayer && pa("visualType").value != "o1rd1") {
                    Ma.globalAlpha = 1;
                    let a = {
                      primary: pg.primaryIndex == undefined ? 1 : (Ec.weapons[pg.primaryIndex].speed - pg.reloads[pg.primaryIndex]) / Ec.weapons[pg.primaryIndex].speed,
                      secondary: pg.secondaryIndex == undefined ? 1 : (Ec.weapons[pg.secondaryIndex].speed - pg.reloads[pg.secondaryIndex]) / Ec.weapons[pg.secondaryIndex].speed,
                      turret: (2500 - pg.reloads[53]) / 2500
                    };
                    if (!pg.currentReloads) {
                      pg.currentReloads = {
                        primary: a.primary,
                        secondary: a.secondary,
                        turret: a.turret
                      };
                    }
                    const b = 0.1;
                    pg.currentReloads.primary = (1 - b) * pg.currentReloads.primary + b * a.primary;
                    pg.currentReloads.secondary = (1 - b) * pg.currentReloads.secondary + b * a.secondary;
                    pg.currentReloads.turret = (1 - b) * pg.currentReloads.turret + b * a.turret;
                    if (pg == ng) {
                      if (pg.dir != undefined) {}
                    }
                    Ma.globalAlpha = 1;
                    Ma.font = "20px Hammersmith One";
                    Ma.fillStyle = "#fff";
                    Ma.strokeStyle = qb;
                    Ma.textBaseline = "middle";
                    Ma.textAlign = "center";
                    Ma.lineWidth = 8;
                    Ma.lineJoin = "round";
                    if (pg.health) {
                      const a = x.healthBarWidth;
                      const b = x.healthBarWidth * 2 * (pg.health / pg.maxHealth);
                      const c = pg.shameCount / 7 * 2 * (x.healthBarWidth - x.healthBarPad);
                      if (!pg.currentHealthWidth) {
                        pg.currentHealthWidth = b;
                      }
                      if (!pg.currentShameWidth) {
                        pg.currentShameWidth = c;
                      }
                      const d = 0.1;
                      pg.currentHealthWidth = (1 - d) * pg.currentHealthWidth + d * b;
                      pg.currentShameWidth = (1 - d) * pg.currentShameWidth + d * c;
                      let f = pg.currentHealthWidth;
                      const g = x.healthBarWidth - x.healthBarPad * 2;
                      if (f > g) {
                        f = g;
                      }
                      let h = 2.75;
                      let i = -1;
                      let j = x.healthBarWidth - h;
                      const k = 7;
                      const l = pg.x - o - x.healthBarWidth + x.healthBarPad * 2;
                      Ma.fillStyle = qb;
                      Ma.roundRect(pg.x - o - x.healthBarWidth - x.healthBarPad + h, pg.y + 28.5 - e + pg.scale + x.nameY - 19 + i, j + x.healthBarPad * 13, 17, 8);
                      Ma.fill();
                      Ma.fillStyle = qb;
                      Ma.roundRect(pg.x - o - x.healthBarWidth - x.healthBarPad, pg.y + 28.5 - e + pg.scale + x.nameY - 19 + i, j + x.healthBarPad * 13, 17, 8);
                      Ma.fill();
                      Ma.fillStyle = pg == ng || pg.team && pg.team == ng.team ? w : y;
                      Ma.roundRect(pg.x - o - x.healthBarWidth - x.healthBarPad, pg.y + 28.5 - e + pg.scale + x.nameY - 19 + x.healthBarPad, pg.currentHealthWidth, 17 - x.healthBarPad * 2, 9);
                      Ma.fill();
                      Ma.restore();
                    }
                    let c = new Image();
                  }
                }
              }
            }
          }
          function a(i, a, b, c, d, e, f, g) {}
          if (ng) {
            if (tg.autoPush) {
              Ma.lineWidth = 8;
              Ma.globalAlpha = 2;
              Ma.beginPath();
              Ma.strokeStyle = "#050505";
              Ma.moveTo(ng.x - o, ng.y - e);
              Ma.lineTo(tg.pushData.x2 - o, tg.pushData.y2 - e);
              Ma.lineTo(tg.pushData.x - o, tg.pushData.y - e);
              Ma.stroke();
            }
            if (ia.length && pa("funni").checked) {
              ng.spinDir += 2.5 / 60;
              let h = 0;
              if (gd.left) {
                h = 100;
              } else if (gd.right) {
                h = 15;
              } else {
                h = 40;
              }
              h += ng.scale;
              ia.forEach((i, a) => {
                if (i.active) {
                  let b = Math.PI * (a / (ia.length / 2));
                  let c = {
                    x: ng.x + h * Math.cos(ng.spinDir + b),
                    y: ng.y + h * Math.sin(ng.spinDir + b)
                  };
                  let d = Dc.getDirect(c, i, 0, 0);
                  let e = Dc.getDist(c, i, 0, 0);
                  i.x += e / 7 * Math.cos(d);
                  i.y += e / 7 * Math.sin(d);
                  la.filter(b => b.visible && b != ng).forEach(b => {
                    let g = Dc.getDirect(i, b, 0, 0);
                    let c = Dc.getDist(i, b, 0, 0);
                    let d = i.scale + b.scale;
                    if (c <= d) {
                      let b = c - d;
                      let a = -b;
                      i.x += a * Math.cos(g);
                      i.y += a * Math.sin(g);
                      i.health -= 10;
                      i.damaged += 125;
                      if (i.health <= 0) {
                        i.active = false;
                      }
                    }
                  });
                } else {
                  i.time += eb;
                  if (i.alive) {
                    i.alpha -= eb / 200;
                    i.visScale += eb / (i.scale * 2);
                    if (i.alpha <= 0) {
                      i.alpha = 0;
                      i.alive = false;
                    }
                  }
                  if (i.time >= i.timer) {
                    i.time = 0;
                    i.active = true;
                    i.alive = true;
                    i.x = ng.x;
                    i.y = ng.y;
                    i.health = i.maxHealth;
                    i.damaged = 0;
                    i.alpha = 1;
                    i.visScale = i.scale;
                  }
                }
                if (i.alive) {
                  let b = function (e, a, b, c) {
                    return "rgb(" + (Math.min(255, e + Math.floor(c)) + ", " + Math.max(0, a - Math.floor(c)) + ", " + Math.max(0, b - Math.floor(c))) + ")";
                  };
                  Ma.globalAlpha = i.alpha;
                  Ma.lineWidth = 3;
                  Ma.fillStyle = b(255, 255, 255, i.damaged);
                  Ma.strokeStyle = b(200, 200, 200, i.damaged);
                  Ma.beginPath();
                  Ma.arc(i.x - o, i.y - e, i.visScale, 0, Math.PI * 2);
                  Ma.fill();
                  Ma.stroke();
                  i.damaged = Math.max(0, i.damaged - eb / 2);
                }
              });
            }
          }
          Ma.globalAlpha = 1;
          Lc.update(eb, Ma, o, e);
          for (let b = 0; b < la.length; ++b) {
            pg = la[b];
            if (pg.visible) {
              if (pg.chatCountdown > 0) {
                pg.chatCountdown -= eb;
                if (pg.chatCountdown <= 0) {
                  pg.chatCountdown = 0;
                }
                Ma.font = "32px Hammersmith One";
                let f = Ma.measureText(pg.chatMessage);
                Ma.textBaseline = "middle";
                Ma.textAlign = "center";
                let a = pg.x - o;
                let b = pg.y - pg.scale - e - 90;
                let c = 47;
                let d = f.width + 17;
                Ma.fillStyle = "rgba(0,0,0,0.2)";
                Ma.roundRect(a - d / 2, b - c / 2, d, c, 6);
                Ma.fill();
                Ma.fillStyle = "#fff";
                Ma.fillText(pg.chatMessage, a, b);
              }
              if (pg.chat.count > 0) {
                if (!eg) {
                  pg.chat.count -= eb;
                  if (pg.chat.count <= 0) {
                    pg.chat.count = 0;
                  }
                  Ma.font = "32px Hammersmith One";
                  let f = Ma.measureText(pg.chat.message);
                  Ma.textBaseline = "middle";
                  Ma.textAlign = "center";
                  let a = pg.x - o;
                  let b = pg.y - pg.scale - e + 180;
                  let c = 47;
                  let d = f.width + 17;
                  Ma.fillStyle = "rgba(0,0,0,0.2)";
                  Ma.roundRect(a - d / 2, b - c / 2, d, c, 6);
                  Ma.fill();
                  Ma.fillStyle = "#ffffff99";
                  Ma.fillText(pg.chat.message, a, b);
                } else {
                  pg.chat.count = 0;
                }
              }
            }
          }
          if (kg.length) {
            kg.filter(b => b.active).forEach(f => {
              if (!f.alive) {
                if (f.alpha <= 1) {
                  f.alpha += eb / 250;
                  if (f.alpha >= 1) {
                    f.alpha = 1;
                    f.alive = true;
                  }
                }
              } else {
                f.alpha -= eb / 5000;
                if (f.alpha <= 0) {
                  f.alpha = 0;
                  f.active = false;
                }
              }
              if (f.active) {
                Ma.font = "20px Hammersmith One";
                let a = Ma.measureText(f.chat);
                Ma.textBaseline = "middle";
                Ma.textAlign = "center";
                let b = f.owner.x - o;
                let c = f.owner.y - f.owner.scale - e - 90;
                let d = 47;
                let g = a.width + 17;
                Ma.globalAlpha = f.alpha;
                Ma.fillStyle = f.owner.isTeam(ng) ? "rgba(255,215,0,1)" : "#cc5151";
                Ma.strokeStyle = "rgb(25, 25, 25)";
                Ma.lineWidth = 5;
                Ma.fillStyle = "rgba(0,0,0,0.4)";
                Ma.strokeStyle = "rgba(0,0,0,0.0)";
                Ma.roundRect(b - g / 2, c - d / 2, g, d, 6);
                Ma.stroke();
                Ma.fill();
                Ma.fillStyle = "#fff";
                Ma.strokeStyle = "#000";
                Ma.strokeText(f.chat, b, c);
                Ma.fillText(f.chat, b, c);
                f.y -= eb / 100;
              }
            });
          }
        }
        Ma.globalAlpha = 1;
        Nf(eb);
      }
      var Tf = -1;
      function eh() {
        if (b > ne.max || isNaN(ne.max)) {
          ne.max = b;
        }
        if (b < ne.min || isNaN(ne.min)) {
          ne.min = b;
        }
        var b = Date.now() - Tf;
        window.pingTime = b;
      }
      function Vf() {
        Tf = Date.now();
        ga.send("0");
      }
      window.requestAnimFrame = function () {
        return null;
      };
      window.rAF = function () {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (b) {
          window.setTimeout(b, 1000 / 240);
        };
      }();
      function Wf() {
        ne.avg = Math.round((ne.min + ne.max) / 2);
        wg = performance.now();
        eb = wg - xg;
        xg = wg;
        let c = performance.now();
        let a = c - hg.last;
        if (a >= 1000) {
          hg.ltime = hg.time * (1000 / a);
          hg.last = c;
          hg.time = 0;
        }
        hg.time++;
        Sf();
        rAF(Wf);
      }
      Ue();
      Wf();
      function Xf(b) {
        pa("instaType").disabled = b;
        pa("antiBullType").disabled = b;
        pa("predictType").disabled = b;
        pa("visualType").disabled = b;
      }
      Xf(eg);
      let Yf = {};
      window.debug = function () {
        tg.waitHit = 0;
        tg.autoAim = false;
        Nc.isTrue = false;
        Mc.inTrap = false;
        Bf = [];
        Ef = [];
        zf = [];
      };
      window.startGrind = function () {
        if (pa("weaponGrind").checked) {
          for (let b = 0; b < Math.PI * 2; b += Math.PI / 2) {
            dc(ng.getItemType(22), b);
          }
        }
      };
      let Zf = [];
      let $f = 0;
      window.connectFillBots = function () {
        c = [];
        $f = 0;
        for (let d = 0; d < Zf.length; d++) {
          let e = new WebSocket("wss://" + Zf[d] + ".glitch.me");
          e.binaryType = "arraybuffer";
          e.onopen = function () {
            e.ssend = function (b) {
              let a = Array.prototype.slice.call(arguments, 1);
              let c = window.msgpack.encode([b, a]);
              e.send(c);
            };
            for (let b = 0; b < 4; b++) {
              window.grecaptcha.execute("6LevKusUAAAAAAFknhlV8sPtXAk5Z5dGP5T2FYIZ", {
                action: "homepage"
              }).then(function (b) {
                e.ssend("bots", cg.url.split("&")[0] + "&token=" + encodeURIComponent(b), $f);
                c.push([e]);
                $f++;
              });
            }
          };
          e.onmessage = function (e) {
            let a = new Uint8Array(e.data);
            let f = window.msgpack.decode(a);
            let c = f[0];
            a = f[1];
          };
        }
      };
      window.destroyFillBots = function () {
        c.forEach(b => {
          b[0].close();
        });
        c = [];
      };
      window.tryConnectBots = function () {
        for (let b = 0; b < (Ee.length < 3 ? 3 : 4); b++) {
          window.grecaptcha.execute("6LevKusUAAAAAAFknhlV8sPtXAk5Z5dGP5T2FYIZ", {
            action: "homepage"
          }).then(function (b) {
            Je(b);
          });
        }
      };
      window.destroyBots = function () {
        Ee.forEach(b => {
          b.closeSocket = true;
        });
        Ee = [];
      };
      window.resBuild = function () {
        if (mg.length) {
          mg.forEach(b => {
            b.breakObj = false;
          });
          sa = [];
        }
      };
      window.toggleBotsCircle = function () {
        ng.circle = !ng.circle;
      };
      window.prepareUI = function (a) {
        dd();
        Dc.removeAllChildren(Va);
        for (let b = 0; b < Ec.weapons.length + Ec.list.length; ++b) {
          (function (b) {
            Dc.generateElement({
              id: "actionBarItem" + b,
              class: "actionBarItem",
              style: "display:none",
              onmouseout: function () {
                cd();
              },
              parent: Va
            });
          })(b);
        }
        for (let b = 0; b < Ec.list.length + Ec.weapons.length; ++b) {
          (function (i) {
            let c = document.createElement("canvas");
            c.width = c.height = 66;
            let d = c.getContext("2d");
            d.translate(c.width / 2, c.height / 2);
            d.imageSmoothingEnabled = false;
            d.webkitImageSmoothingEnabled = false;
            d.mozImageSmoothingEnabled = false;
            if (Ec.weapons[i]) {
              d.rotate(Math.PI / 4 + Math.PI);
              let b = new Image();
              of[Ec.weapons[i].src] = b;
              b.onload = function () {
                this.isLoaded = true;
                let a = 1 / (this.height / this.width);
                let b = Ec.weapons[i].iPad || 1;
                d.drawImage(this, -(c.width * b * x.iconPad * a) / 2, -(c.height * b * x.iconPad) / 2, c.width * b * a * x.iconPad, c.height * b * x.iconPad);
                d.fillStyle = "rgba(0, 0, 70, 0.1)";
                d.globalCompositeOperation = "source-atop";
                d.fillRect(-c.width / 2, -c.height / 2, c.width, c.height);
                pa("actionBarItem" + i).style.backgroundImage = "url(" + c.toDataURL() + ")";
              };
              b.src = "./../img/weapons/" + Ec.weapons[i].src + ".png";
              let e = pa("actionBarItem" + i);
              e.onmouseover = Dc.checkTrusted(function () {
                cd(Ec.weapons[i], true);
              });
              e.onclick = Dc.checkTrusted(function () {
                $b(a.weapons[Ec.weapons[i].type]);
              });
              Dc.hookTouchEvents(e);
            } else {
              let b = ch(Ec.list[i - Ec.weapons.length], true);
              let e = Math.min(c.width - x.iconPadding, b.width);
              d.globalAlpha = 1;
              d.drawImage(b, -e / 2, -e / 2, e, e);
              d.fillStyle = "rgba(0, 0, 70, 0.1)";
              d.globalCompositeOperation = "source-atop";
              d.fillRect(-e / 2, -e / 2, e, e);
              pa("actionBarItem" + i).style.backgroundImage = "url(" + c.toDataURL() + ")";
              let f = pa("actionBarItem" + i);
              f.onmouseover = Dc.checkTrusted(function () {
                cd(Ec.list[i - Ec.weapons.length]);
              });
              f.onclick = Dc.checkTrusted(function () {
                Zb(a.items[a.getItemType(i - Ec.weapons.length)]);
              });
              Dc.hookTouchEvents(f);
            }
          })(b);
        }
      };
      window.profineTest = function (a) {
        if (a) {
          let b = "unknown";
          let c = a + "";
          c = c.slice(0, x.maxNameLength);
          c = c.replace(/[^\w:\(\)\/? -]+/gmi, " ");
          c = c.replace(/[^\x00-\x7F]/g, " ");
          c = c.trim();
          let d = {
            list: [],
            exclude: [],
            placeHolder: "*",
            regex: {},
            replaceRegex: {}
          };
          let e = false;
          let f = c.toLowerCase().replace(/\s/g, "").replace(/1/g, "i").replace(/0/g, "o").replace(/5/g, "s");
          for (let b of d.list) {
            if (f.indexOf(b) != -1) {
              e = true;
              break;
            }
          }
          if (c.length > 0 && !e) {
            b = c;
          }
          return b;
        }
      };
      window.toggleNight();
    },
    webgl_test: () => {
      return;
      let i = document.createElement("canvas");
      i.id = "WEBGL";
      i.width = i.height = 300;
      i.style = "\n            position: relative;\n            bottom: 70%;\n            left: 70%;\n            pointer-events: none;\n            ";
      let a = document.createElement("div");
      a.id = "faku";
      a.width = a.height = 300;
      a.style = "\n            position: relative;\n            bottom: 70%;\n            left: 70%;\n            pointer-events: none;\n            font-size: 20px;\n            ";
      a.innerHTML = "Webgl Test Rendering";
      let k = i.getContext("webgl");
      if (!k) {
        alert("urbad");
        return;
      }
      document.body.append(i);
      document.body.append(a);
      K(k);
      k.clearColor(0, 0, 0, 0.2);
      k.clear(k.COLOR_BUFFER_BIT);
      let b = k.createBuffer();
      k.bindBuffer(k.ARRAY_BUFFER, b);
      function c(c, a, b, d) {
        let e = k.createShader(k.VERTEX_SHADER);
        k.shaderSource(e, c);
        k.compileShader(e);
        k.getShaderParameter(e, k.COMPILE_STATUS);
        let f = k.createShader(k.FRAGMENT_SHADER);
        k.shaderSource(f, a);
        k.compileShader(f);
        k.getShaderParameter(f, k.COMPILE_STATUS);
        let g = k.createProgram();
        k.attachShader(g, e);
        k.attachShader(g, f);
        k.linkProgram(g);
        k.getProgramParameter(g, k.LINK_STATUS);
        k.useProgram(g);
        let h = k.getAttribLocation(g, "vertex");
        k.enableVertexAttribArray(h);
        k.vertexAttribPointer(h, 2, k.FLOAT, false, 0, 0);
        let i = b.length / 2;
        k.bufferData(k.ARRAY_BUFFER, new Float32Array(b), k.DYNAMIC_DRAW);
        k.drawArrays(d, 0, i);
      }
      function d(b) {
        return b.slice(1).match(/.{1,2}/g).map(b => parseInt(b, 16));
      }
      function e(d, a, b) {
        return [d / 255, a / 255, b / 255].join(", ");
      }
      let f = 50;
      for (let g = 0; g < f; g++) {
        let a = Math.PI * (g / (f / 2));
        c("\n                precision mediump float;\n                attribute vec2 vertex;\n                void main(void) {\n                    gl_Position = vec4(vertex, 0, 1);\n                }\n                ", "\n                precision mediump float;\n                void main(void) {\n                    gl_FragColor = vec4(" + e(...d("#cc5151")) + ", 1);\n                }\n                ", [0 + Math.cos(a) * 0.5, 0 + Math.sin(a) * 0.5, 0, 0], k.LINE_LOOP);
      }
    }
  };
  if (d) {
    for (let b in d) {
      let a = d[b];
      if (typeof a === "function") {
        a();
      }
    }
    window.enableHack = function () {
      if (!J) {
        J = true;
        d.main();
      }
    };
  }
})(1);